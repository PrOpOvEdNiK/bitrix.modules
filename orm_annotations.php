<?php

/* ORMENTITYANNOTATION:Bitrix\Main\Localization\CultureTable */
namespace Bitrix\Main\Localization {
	/**
	 * Culture
	 * @see \Bitrix\Main\Localization\CultureTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Context\Culture setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Main\Context\Culture setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Main\Context\Culture resetCode()
	 * @method \Bitrix\Main\Context\Culture unsetCode()
	 * @method \string fillCode()
	 * @method \string getName()
	 * @method \Bitrix\Main\Context\Culture setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\Context\Culture resetName()
	 * @method \Bitrix\Main\Context\Culture unsetName()
	 * @method \string fillName()
	 * @method \string getFormatDate()
	 * @method \Bitrix\Main\Context\Culture setFormatDate(\string|\Bitrix\Main\DB\SqlExpression $formatDate)
	 * @method bool hasFormatDate()
	 * @method bool isFormatDateFilled()
	 * @method bool isFormatDateChanged()
	 * @method \string remindActualFormatDate()
	 * @method \string requireFormatDate()
	 * @method \Bitrix\Main\Context\Culture resetFormatDate()
	 * @method \Bitrix\Main\Context\Culture unsetFormatDate()
	 * @method \string fillFormatDate()
	 * @method \string getFormatDatetime()
	 * @method \Bitrix\Main\Context\Culture setFormatDatetime(\string|\Bitrix\Main\DB\SqlExpression $formatDatetime)
	 * @method bool hasFormatDatetime()
	 * @method bool isFormatDatetimeFilled()
	 * @method bool isFormatDatetimeChanged()
	 * @method \string remindActualFormatDatetime()
	 * @method \string requireFormatDatetime()
	 * @method \Bitrix\Main\Context\Culture resetFormatDatetime()
	 * @method \Bitrix\Main\Context\Culture unsetFormatDatetime()
	 * @method \string fillFormatDatetime()
	 * @method \string getFormatName()
	 * @method \Bitrix\Main\Context\Culture setFormatName(\string|\Bitrix\Main\DB\SqlExpression $formatName)
	 * @method bool hasFormatName()
	 * @method bool isFormatNameFilled()
	 * @method bool isFormatNameChanged()
	 * @method \string remindActualFormatName()
	 * @method \string requireFormatName()
	 * @method \Bitrix\Main\Context\Culture resetFormatName()
	 * @method \Bitrix\Main\Context\Culture unsetFormatName()
	 * @method \string fillFormatName()
	 * @method \int getWeekStart()
	 * @method \Bitrix\Main\Context\Culture setWeekStart(\int|\Bitrix\Main\DB\SqlExpression $weekStart)
	 * @method bool hasWeekStart()
	 * @method bool isWeekStartFilled()
	 * @method bool isWeekStartChanged()
	 * @method \int remindActualWeekStart()
	 * @method \int requireWeekStart()
	 * @method \Bitrix\Main\Context\Culture resetWeekStart()
	 * @method \Bitrix\Main\Context\Culture unsetWeekStart()
	 * @method \int fillWeekStart()
	 * @method \string getCharset()
	 * @method \Bitrix\Main\Context\Culture setCharset(\string|\Bitrix\Main\DB\SqlExpression $charset)
	 * @method bool hasCharset()
	 * @method bool isCharsetFilled()
	 * @method bool isCharsetChanged()
	 * @method \string remindActualCharset()
	 * @method \string requireCharset()
	 * @method \Bitrix\Main\Context\Culture resetCharset()
	 * @method \Bitrix\Main\Context\Culture unsetCharset()
	 * @method \string fillCharset()
	 * @method \boolean getDirection()
	 * @method \Bitrix\Main\Context\Culture setDirection(\boolean|\Bitrix\Main\DB\SqlExpression $direction)
	 * @method bool hasDirection()
	 * @method bool isDirectionFilled()
	 * @method bool isDirectionChanged()
	 * @method \boolean remindActualDirection()
	 * @method \boolean requireDirection()
	 * @method \Bitrix\Main\Context\Culture resetDirection()
	 * @method \Bitrix\Main\Context\Culture unsetDirection()
	 * @method \boolean fillDirection()
	 * @method \string getShortDateFormat()
	 * @method \Bitrix\Main\Context\Culture setShortDateFormat(\string|\Bitrix\Main\DB\SqlExpression $shortDateFormat)
	 * @method bool hasShortDateFormat()
	 * @method bool isShortDateFormatFilled()
	 * @method bool isShortDateFormatChanged()
	 * @method \string remindActualShortDateFormat()
	 * @method \string requireShortDateFormat()
	 * @method \Bitrix\Main\Context\Culture resetShortDateFormat()
	 * @method \Bitrix\Main\Context\Culture unsetShortDateFormat()
	 * @method \string fillShortDateFormat()
	 * @method \string getMediumDateFormat()
	 * @method \Bitrix\Main\Context\Culture setMediumDateFormat(\string|\Bitrix\Main\DB\SqlExpression $mediumDateFormat)
	 * @method bool hasMediumDateFormat()
	 * @method bool isMediumDateFormatFilled()
	 * @method bool isMediumDateFormatChanged()
	 * @method \string remindActualMediumDateFormat()
	 * @method \string requireMediumDateFormat()
	 * @method \Bitrix\Main\Context\Culture resetMediumDateFormat()
	 * @method \Bitrix\Main\Context\Culture unsetMediumDateFormat()
	 * @method \string fillMediumDateFormat()
	 * @method \string getLongDateFormat()
	 * @method \Bitrix\Main\Context\Culture setLongDateFormat(\string|\Bitrix\Main\DB\SqlExpression $longDateFormat)
	 * @method bool hasLongDateFormat()
	 * @method bool isLongDateFormatFilled()
	 * @method bool isLongDateFormatChanged()
	 * @method \string remindActualLongDateFormat()
	 * @method \string requireLongDateFormat()
	 * @method \Bitrix\Main\Context\Culture resetLongDateFormat()
	 * @method \Bitrix\Main\Context\Culture unsetLongDateFormat()
	 * @method \string fillLongDateFormat()
	 * @method \string getFullDateFormat()
	 * @method \Bitrix\Main\Context\Culture setFullDateFormat(\string|\Bitrix\Main\DB\SqlExpression $fullDateFormat)
	 * @method bool hasFullDateFormat()
	 * @method bool isFullDateFormatFilled()
	 * @method bool isFullDateFormatChanged()
	 * @method \string remindActualFullDateFormat()
	 * @method \string requireFullDateFormat()
	 * @method \Bitrix\Main\Context\Culture resetFullDateFormat()
	 * @method \Bitrix\Main\Context\Culture unsetFullDateFormat()
	 * @method \string fillFullDateFormat()
	 * @method \string getDayMonthFormat()
	 * @method \Bitrix\Main\Context\Culture setDayMonthFormat(\string|\Bitrix\Main\DB\SqlExpression $dayMonthFormat)
	 * @method bool hasDayMonthFormat()
	 * @method bool isDayMonthFormatFilled()
	 * @method bool isDayMonthFormatChanged()
	 * @method \string remindActualDayMonthFormat()
	 * @method \string requireDayMonthFormat()
	 * @method \Bitrix\Main\Context\Culture resetDayMonthFormat()
	 * @method \Bitrix\Main\Context\Culture unsetDayMonthFormat()
	 * @method \string fillDayMonthFormat()
	 * @method \string getShortTimeFormat()
	 * @method \Bitrix\Main\Context\Culture setShortTimeFormat(\string|\Bitrix\Main\DB\SqlExpression $shortTimeFormat)
	 * @method bool hasShortTimeFormat()
	 * @method bool isShortTimeFormatFilled()
	 * @method bool isShortTimeFormatChanged()
	 * @method \string remindActualShortTimeFormat()
	 * @method \string requireShortTimeFormat()
	 * @method \Bitrix\Main\Context\Culture resetShortTimeFormat()
	 * @method \Bitrix\Main\Context\Culture unsetShortTimeFormat()
	 * @method \string fillShortTimeFormat()
	 * @method \string getLongTimeFormat()
	 * @method \Bitrix\Main\Context\Culture setLongTimeFormat(\string|\Bitrix\Main\DB\SqlExpression $longTimeFormat)
	 * @method bool hasLongTimeFormat()
	 * @method bool isLongTimeFormatFilled()
	 * @method bool isLongTimeFormatChanged()
	 * @method \string remindActualLongTimeFormat()
	 * @method \string requireLongTimeFormat()
	 * @method \Bitrix\Main\Context\Culture resetLongTimeFormat()
	 * @method \Bitrix\Main\Context\Culture unsetLongTimeFormat()
	 * @method \string fillLongTimeFormat()
	 * @method \string getAmValue()
	 * @method \Bitrix\Main\Context\Culture setAmValue(\string|\Bitrix\Main\DB\SqlExpression $amValue)
	 * @method bool hasAmValue()
	 * @method bool isAmValueFilled()
	 * @method bool isAmValueChanged()
	 * @method \string remindActualAmValue()
	 * @method \string requireAmValue()
	 * @method \Bitrix\Main\Context\Culture resetAmValue()
	 * @method \Bitrix\Main\Context\Culture unsetAmValue()
	 * @method \string fillAmValue()
	 * @method \string getPmValue()
	 * @method \Bitrix\Main\Context\Culture setPmValue(\string|\Bitrix\Main\DB\SqlExpression $pmValue)
	 * @method bool hasPmValue()
	 * @method bool isPmValueFilled()
	 * @method bool isPmValueChanged()
	 * @method \string remindActualPmValue()
	 * @method \string requirePmValue()
	 * @method \Bitrix\Main\Context\Culture resetPmValue()
	 * @method \Bitrix\Main\Context\Culture unsetPmValue()
	 * @method \string fillPmValue()
	 * @method \string getNumberThousandsSeparator()
	 * @method \Bitrix\Main\Context\Culture setNumberThousandsSeparator(\string|\Bitrix\Main\DB\SqlExpression $numberThousandsSeparator)
	 * @method bool hasNumberThousandsSeparator()
	 * @method bool isNumberThousandsSeparatorFilled()
	 * @method bool isNumberThousandsSeparatorChanged()
	 * @method \string remindActualNumberThousandsSeparator()
	 * @method \string requireNumberThousandsSeparator()
	 * @method \Bitrix\Main\Context\Culture resetNumberThousandsSeparator()
	 * @method \Bitrix\Main\Context\Culture unsetNumberThousandsSeparator()
	 * @method \string fillNumberThousandsSeparator()
	 * @method \string getNumberDecimalSeparator()
	 * @method \Bitrix\Main\Context\Culture setNumberDecimalSeparator(\string|\Bitrix\Main\DB\SqlExpression $numberDecimalSeparator)
	 * @method bool hasNumberDecimalSeparator()
	 * @method bool isNumberDecimalSeparatorFilled()
	 * @method bool isNumberDecimalSeparatorChanged()
	 * @method \string remindActualNumberDecimalSeparator()
	 * @method \string requireNumberDecimalSeparator()
	 * @method \Bitrix\Main\Context\Culture resetNumberDecimalSeparator()
	 * @method \Bitrix\Main\Context\Culture unsetNumberDecimalSeparator()
	 * @method \string fillNumberDecimalSeparator()
	 * @method \int getNumberDecimals()
	 * @method \Bitrix\Main\Context\Culture setNumberDecimals(\int|\Bitrix\Main\DB\SqlExpression $numberDecimals)
	 * @method bool hasNumberDecimals()
	 * @method bool isNumberDecimalsFilled()
	 * @method bool isNumberDecimalsChanged()
	 * @method \int remindActualNumberDecimals()
	 * @method \int requireNumberDecimals()
	 * @method \Bitrix\Main\Context\Culture resetNumberDecimals()
	 * @method \Bitrix\Main\Context\Culture unsetNumberDecimals()
	 * @method \int fillNumberDecimals()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Context\Culture set($fieldName, $value)
	 * @method \Bitrix\Main\Context\Culture reset($fieldName)
	 * @method \Bitrix\Main\Context\Culture unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Context\Culture wakeUp($data)
	 */
	class EO_Culture {
		/* @var \Bitrix\Main\Localization\CultureTable */
		static public $dataClass = '\Bitrix\Main\Localization\CultureTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Localization {
	/**
	 * EO_Culture_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getFormatDateList()
	 * @method \string[] fillFormatDate()
	 * @method \string[] getFormatDatetimeList()
	 * @method \string[] fillFormatDatetime()
	 * @method \string[] getFormatNameList()
	 * @method \string[] fillFormatName()
	 * @method \int[] getWeekStartList()
	 * @method \int[] fillWeekStart()
	 * @method \string[] getCharsetList()
	 * @method \string[] fillCharset()
	 * @method \boolean[] getDirectionList()
	 * @method \boolean[] fillDirection()
	 * @method \string[] getShortDateFormatList()
	 * @method \string[] fillShortDateFormat()
	 * @method \string[] getMediumDateFormatList()
	 * @method \string[] fillMediumDateFormat()
	 * @method \string[] getLongDateFormatList()
	 * @method \string[] fillLongDateFormat()
	 * @method \string[] getFullDateFormatList()
	 * @method \string[] fillFullDateFormat()
	 * @method \string[] getDayMonthFormatList()
	 * @method \string[] fillDayMonthFormat()
	 * @method \string[] getShortTimeFormatList()
	 * @method \string[] fillShortTimeFormat()
	 * @method \string[] getLongTimeFormatList()
	 * @method \string[] fillLongTimeFormat()
	 * @method \string[] getAmValueList()
	 * @method \string[] fillAmValue()
	 * @method \string[] getPmValueList()
	 * @method \string[] fillPmValue()
	 * @method \string[] getNumberThousandsSeparatorList()
	 * @method \string[] fillNumberThousandsSeparator()
	 * @method \string[] getNumberDecimalSeparatorList()
	 * @method \string[] fillNumberDecimalSeparator()
	 * @method \int[] getNumberDecimalsList()
	 * @method \int[] fillNumberDecimals()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Context\Culture $object)
	 * @method bool has(\Bitrix\Main\Context\Culture $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Context\Culture getByPrimary($primary)
	 * @method \Bitrix\Main\Context\Culture[] getAll()
	 * @method bool remove(\Bitrix\Main\Context\Culture $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Localization\EO_Culture_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Context\Culture current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Culture_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Localization\CultureTable */
		static public $dataClass = '\Bitrix\Main\Localization\CultureTable';
	}
}
namespace Bitrix\Main\Localization {
	/**
	 * @method static EO_Culture_Query query()
	 * @method static EO_Culture_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Culture_Result getById($id)
	 * @method static EO_Culture_Result getList(array $parameters = array())
	 * @method static EO_Culture_Entity getEntity()
	 * @method static \Bitrix\Main\Context\Culture createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Localization\EO_Culture_Collection createCollection()
	 * @method static \Bitrix\Main\Context\Culture wakeUpObject($row)
	 * @method static \Bitrix\Main\Localization\EO_Culture_Collection wakeUpCollection($rows)
	 */
	class CultureTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Culture_Result exec()
	 * @method \Bitrix\Main\Context\Culture fetchObject()
	 * @method \Bitrix\Main\Localization\EO_Culture_Collection fetchCollection()
	 */
	class EO_Culture_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Context\Culture fetchObject()
	 * @method \Bitrix\Main\Localization\EO_Culture_Collection fetchCollection()
	 */
	class EO_Culture_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Context\Culture createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Localization\EO_Culture_Collection createCollection()
	 * @method \Bitrix\Main\Context\Culture wakeUpObject($row)
	 * @method \Bitrix\Main\Localization\EO_Culture_Collection wakeUpCollection($rows)
	 */
	class EO_Culture_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserTable */
namespace Bitrix\Main {
	/**
	 * EO_User
	 * @see \Bitrix\Main\UserTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_User setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLogin()
	 * @method \Bitrix\Main\EO_User setLogin(\string|\Bitrix\Main\DB\SqlExpression $login)
	 * @method bool hasLogin()
	 * @method bool isLoginFilled()
	 * @method bool isLoginChanged()
	 * @method \string remindActualLogin()
	 * @method \string requireLogin()
	 * @method \Bitrix\Main\EO_User resetLogin()
	 * @method \Bitrix\Main\EO_User unsetLogin()
	 * @method \string fillLogin()
	 * @method \string getPassword()
	 * @method \Bitrix\Main\EO_User setPassword(\string|\Bitrix\Main\DB\SqlExpression $password)
	 * @method bool hasPassword()
	 * @method bool isPasswordFilled()
	 * @method bool isPasswordChanged()
	 * @method \string remindActualPassword()
	 * @method \string requirePassword()
	 * @method \Bitrix\Main\EO_User resetPassword()
	 * @method \Bitrix\Main\EO_User unsetPassword()
	 * @method \string fillPassword()
	 * @method \string getEmail()
	 * @method \Bitrix\Main\EO_User setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Bitrix\Main\EO_User resetEmail()
	 * @method \Bitrix\Main\EO_User unsetEmail()
	 * @method \string fillEmail()
	 * @method \boolean getActive()
	 * @method \Bitrix\Main\EO_User setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Main\EO_User resetActive()
	 * @method \Bitrix\Main\EO_User unsetActive()
	 * @method \boolean fillActive()
	 * @method \Bitrix\Main\Type\DateTime getDateRegister()
	 * @method \Bitrix\Main\EO_User setDateRegister(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateRegister)
	 * @method bool hasDateRegister()
	 * @method bool isDateRegisterFilled()
	 * @method bool isDateRegisterChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegister()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegister()
	 * @method \Bitrix\Main\EO_User resetDateRegister()
	 * @method \Bitrix\Main\EO_User unsetDateRegister()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime getDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateRegShort()
	 * @method bool hasDateRegShort()
	 * @method bool isDateRegShortFilled()
	 * @method \Bitrix\Main\EO_User unsetDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime getLastLogin()
	 * @method \Bitrix\Main\EO_User setLastLogin(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastLogin)
	 * @method bool hasLastLogin()
	 * @method bool isLastLoginFilled()
	 * @method bool isLastLoginChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLogin()
	 * @method \Bitrix\Main\Type\DateTime requireLastLogin()
	 * @method \Bitrix\Main\EO_User resetLastLogin()
	 * @method \Bitrix\Main\EO_User unsetLastLogin()
	 * @method \Bitrix\Main\Type\DateTime fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime getLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime requireLastLoginShort()
	 * @method bool hasLastLoginShort()
	 * @method bool isLastLoginShortFilled()
	 * @method \Bitrix\Main\EO_User unsetLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime getLastActivityDate()
	 * @method \Bitrix\Main\EO_User setLastActivityDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastActivityDate)
	 * @method bool hasLastActivityDate()
	 * @method bool isLastActivityDateFilled()
	 * @method bool isLastActivityDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime requireLastActivityDate()
	 * @method \Bitrix\Main\EO_User resetLastActivityDate()
	 * @method \Bitrix\Main\EO_User unsetLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Main\EO_User setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Main\EO_User resetTimestampX()
	 * @method \Bitrix\Main\EO_User unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getName()
	 * @method \Bitrix\Main\EO_User setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\EO_User resetName()
	 * @method \Bitrix\Main\EO_User unsetName()
	 * @method \string fillName()
	 * @method \string getSecondName()
	 * @method \Bitrix\Main\EO_User setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Bitrix\Main\EO_User resetSecondName()
	 * @method \Bitrix\Main\EO_User unsetSecondName()
	 * @method \string fillSecondName()
	 * @method \string getLastName()
	 * @method \Bitrix\Main\EO_User setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Bitrix\Main\EO_User resetLastName()
	 * @method \Bitrix\Main\EO_User unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getTitle()
	 * @method \Bitrix\Main\EO_User setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Main\EO_User resetTitle()
	 * @method \Bitrix\Main\EO_User unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getExternalAuthId()
	 * @method \Bitrix\Main\EO_User setExternalAuthId(\string|\Bitrix\Main\DB\SqlExpression $externalAuthId)
	 * @method bool hasExternalAuthId()
	 * @method bool isExternalAuthIdFilled()
	 * @method bool isExternalAuthIdChanged()
	 * @method \string remindActualExternalAuthId()
	 * @method \string requireExternalAuthId()
	 * @method \Bitrix\Main\EO_User resetExternalAuthId()
	 * @method \Bitrix\Main\EO_User unsetExternalAuthId()
	 * @method \string fillExternalAuthId()
	 * @method \string getXmlId()
	 * @method \Bitrix\Main\EO_User setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Main\EO_User resetXmlId()
	 * @method \Bitrix\Main\EO_User unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getBxUserId()
	 * @method \Bitrix\Main\EO_User setBxUserId(\string|\Bitrix\Main\DB\SqlExpression $bxUserId)
	 * @method bool hasBxUserId()
	 * @method bool isBxUserIdFilled()
	 * @method bool isBxUserIdChanged()
	 * @method \string remindActualBxUserId()
	 * @method \string requireBxUserId()
	 * @method \Bitrix\Main\EO_User resetBxUserId()
	 * @method \Bitrix\Main\EO_User unsetBxUserId()
	 * @method \string fillBxUserId()
	 * @method \string getConfirmCode()
	 * @method \Bitrix\Main\EO_User setConfirmCode(\string|\Bitrix\Main\DB\SqlExpression $confirmCode)
	 * @method bool hasConfirmCode()
	 * @method bool isConfirmCodeFilled()
	 * @method bool isConfirmCodeChanged()
	 * @method \string remindActualConfirmCode()
	 * @method \string requireConfirmCode()
	 * @method \Bitrix\Main\EO_User resetConfirmCode()
	 * @method \Bitrix\Main\EO_User unsetConfirmCode()
	 * @method \string fillConfirmCode()
	 * @method \string getLid()
	 * @method \Bitrix\Main\EO_User setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Main\EO_User resetLid()
	 * @method \Bitrix\Main\EO_User unsetLid()
	 * @method \string fillLid()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Main\EO_User setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Main\EO_User resetLanguageId()
	 * @method \Bitrix\Main\EO_User unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \int getTimeZoneOffset()
	 * @method \Bitrix\Main\EO_User setTimeZoneOffset(\int|\Bitrix\Main\DB\SqlExpression $timeZoneOffset)
	 * @method bool hasTimeZoneOffset()
	 * @method bool isTimeZoneOffsetFilled()
	 * @method bool isTimeZoneOffsetChanged()
	 * @method \int remindActualTimeZoneOffset()
	 * @method \int requireTimeZoneOffset()
	 * @method \Bitrix\Main\EO_User resetTimeZoneOffset()
	 * @method \Bitrix\Main\EO_User unsetTimeZoneOffset()
	 * @method \int fillTimeZoneOffset()
	 * @method \string getPersonalProfession()
	 * @method \Bitrix\Main\EO_User setPersonalProfession(\string|\Bitrix\Main\DB\SqlExpression $personalProfession)
	 * @method bool hasPersonalProfession()
	 * @method bool isPersonalProfessionFilled()
	 * @method bool isPersonalProfessionChanged()
	 * @method \string remindActualPersonalProfession()
	 * @method \string requirePersonalProfession()
	 * @method \Bitrix\Main\EO_User resetPersonalProfession()
	 * @method \Bitrix\Main\EO_User unsetPersonalProfession()
	 * @method \string fillPersonalProfession()
	 * @method \string getPersonalPhone()
	 * @method \Bitrix\Main\EO_User setPersonalPhone(\string|\Bitrix\Main\DB\SqlExpression $personalPhone)
	 * @method bool hasPersonalPhone()
	 * @method bool isPersonalPhoneFilled()
	 * @method bool isPersonalPhoneChanged()
	 * @method \string remindActualPersonalPhone()
	 * @method \string requirePersonalPhone()
	 * @method \Bitrix\Main\EO_User resetPersonalPhone()
	 * @method \Bitrix\Main\EO_User unsetPersonalPhone()
	 * @method \string fillPersonalPhone()
	 * @method \string getPersonalMobile()
	 * @method \Bitrix\Main\EO_User setPersonalMobile(\string|\Bitrix\Main\DB\SqlExpression $personalMobile)
	 * @method bool hasPersonalMobile()
	 * @method bool isPersonalMobileFilled()
	 * @method bool isPersonalMobileChanged()
	 * @method \string remindActualPersonalMobile()
	 * @method \string requirePersonalMobile()
	 * @method \Bitrix\Main\EO_User resetPersonalMobile()
	 * @method \Bitrix\Main\EO_User unsetPersonalMobile()
	 * @method \string fillPersonalMobile()
	 * @method \string getPersonalWww()
	 * @method \Bitrix\Main\EO_User setPersonalWww(\string|\Bitrix\Main\DB\SqlExpression $personalWww)
	 * @method bool hasPersonalWww()
	 * @method bool isPersonalWwwFilled()
	 * @method bool isPersonalWwwChanged()
	 * @method \string remindActualPersonalWww()
	 * @method \string requirePersonalWww()
	 * @method \Bitrix\Main\EO_User resetPersonalWww()
	 * @method \Bitrix\Main\EO_User unsetPersonalWww()
	 * @method \string fillPersonalWww()
	 * @method \string getPersonalIcq()
	 * @method \Bitrix\Main\EO_User setPersonalIcq(\string|\Bitrix\Main\DB\SqlExpression $personalIcq)
	 * @method bool hasPersonalIcq()
	 * @method bool isPersonalIcqFilled()
	 * @method bool isPersonalIcqChanged()
	 * @method \string remindActualPersonalIcq()
	 * @method \string requirePersonalIcq()
	 * @method \Bitrix\Main\EO_User resetPersonalIcq()
	 * @method \Bitrix\Main\EO_User unsetPersonalIcq()
	 * @method \string fillPersonalIcq()
	 * @method \string getPersonalFax()
	 * @method \Bitrix\Main\EO_User setPersonalFax(\string|\Bitrix\Main\DB\SqlExpression $personalFax)
	 * @method bool hasPersonalFax()
	 * @method bool isPersonalFaxFilled()
	 * @method bool isPersonalFaxChanged()
	 * @method \string remindActualPersonalFax()
	 * @method \string requirePersonalFax()
	 * @method \Bitrix\Main\EO_User resetPersonalFax()
	 * @method \Bitrix\Main\EO_User unsetPersonalFax()
	 * @method \string fillPersonalFax()
	 * @method \string getPersonalPager()
	 * @method \Bitrix\Main\EO_User setPersonalPager(\string|\Bitrix\Main\DB\SqlExpression $personalPager)
	 * @method bool hasPersonalPager()
	 * @method bool isPersonalPagerFilled()
	 * @method bool isPersonalPagerChanged()
	 * @method \string remindActualPersonalPager()
	 * @method \string requirePersonalPager()
	 * @method \Bitrix\Main\EO_User resetPersonalPager()
	 * @method \Bitrix\Main\EO_User unsetPersonalPager()
	 * @method \string fillPersonalPager()
	 * @method \string getPersonalStreet()
	 * @method \Bitrix\Main\EO_User setPersonalStreet(\string|\Bitrix\Main\DB\SqlExpression $personalStreet)
	 * @method bool hasPersonalStreet()
	 * @method bool isPersonalStreetFilled()
	 * @method bool isPersonalStreetChanged()
	 * @method \string remindActualPersonalStreet()
	 * @method \string requirePersonalStreet()
	 * @method \Bitrix\Main\EO_User resetPersonalStreet()
	 * @method \Bitrix\Main\EO_User unsetPersonalStreet()
	 * @method \string fillPersonalStreet()
	 * @method \string getPersonalMailbox()
	 * @method \Bitrix\Main\EO_User setPersonalMailbox(\string|\Bitrix\Main\DB\SqlExpression $personalMailbox)
	 * @method bool hasPersonalMailbox()
	 * @method bool isPersonalMailboxFilled()
	 * @method bool isPersonalMailboxChanged()
	 * @method \string remindActualPersonalMailbox()
	 * @method \string requirePersonalMailbox()
	 * @method \Bitrix\Main\EO_User resetPersonalMailbox()
	 * @method \Bitrix\Main\EO_User unsetPersonalMailbox()
	 * @method \string fillPersonalMailbox()
	 * @method \string getPersonalCity()
	 * @method \Bitrix\Main\EO_User setPersonalCity(\string|\Bitrix\Main\DB\SqlExpression $personalCity)
	 * @method bool hasPersonalCity()
	 * @method bool isPersonalCityFilled()
	 * @method bool isPersonalCityChanged()
	 * @method \string remindActualPersonalCity()
	 * @method \string requirePersonalCity()
	 * @method \Bitrix\Main\EO_User resetPersonalCity()
	 * @method \Bitrix\Main\EO_User unsetPersonalCity()
	 * @method \string fillPersonalCity()
	 * @method \string getPersonalState()
	 * @method \Bitrix\Main\EO_User setPersonalState(\string|\Bitrix\Main\DB\SqlExpression $personalState)
	 * @method bool hasPersonalState()
	 * @method bool isPersonalStateFilled()
	 * @method bool isPersonalStateChanged()
	 * @method \string remindActualPersonalState()
	 * @method \string requirePersonalState()
	 * @method \Bitrix\Main\EO_User resetPersonalState()
	 * @method \Bitrix\Main\EO_User unsetPersonalState()
	 * @method \string fillPersonalState()
	 * @method \string getPersonalZip()
	 * @method \Bitrix\Main\EO_User setPersonalZip(\string|\Bitrix\Main\DB\SqlExpression $personalZip)
	 * @method bool hasPersonalZip()
	 * @method bool isPersonalZipFilled()
	 * @method bool isPersonalZipChanged()
	 * @method \string remindActualPersonalZip()
	 * @method \string requirePersonalZip()
	 * @method \Bitrix\Main\EO_User resetPersonalZip()
	 * @method \Bitrix\Main\EO_User unsetPersonalZip()
	 * @method \string fillPersonalZip()
	 * @method \string getPersonalCountry()
	 * @method \Bitrix\Main\EO_User setPersonalCountry(\string|\Bitrix\Main\DB\SqlExpression $personalCountry)
	 * @method bool hasPersonalCountry()
	 * @method bool isPersonalCountryFilled()
	 * @method bool isPersonalCountryChanged()
	 * @method \string remindActualPersonalCountry()
	 * @method \string requirePersonalCountry()
	 * @method \Bitrix\Main\EO_User resetPersonalCountry()
	 * @method \Bitrix\Main\EO_User unsetPersonalCountry()
	 * @method \string fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date getPersonalBirthday()
	 * @method \Bitrix\Main\EO_User setPersonalBirthday(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $personalBirthday)
	 * @method bool hasPersonalBirthday()
	 * @method bool isPersonalBirthdayFilled()
	 * @method bool isPersonalBirthdayChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date requirePersonalBirthday()
	 * @method \Bitrix\Main\EO_User resetPersonalBirthday()
	 * @method \Bitrix\Main\EO_User unsetPersonalBirthday()
	 * @method \Bitrix\Main\Type\Date fillPersonalBirthday()
	 * @method \string getPersonalGender()
	 * @method \Bitrix\Main\EO_User setPersonalGender(\string|\Bitrix\Main\DB\SqlExpression $personalGender)
	 * @method bool hasPersonalGender()
	 * @method bool isPersonalGenderFilled()
	 * @method bool isPersonalGenderChanged()
	 * @method \string remindActualPersonalGender()
	 * @method \string requirePersonalGender()
	 * @method \Bitrix\Main\EO_User resetPersonalGender()
	 * @method \Bitrix\Main\EO_User unsetPersonalGender()
	 * @method \string fillPersonalGender()
	 * @method \int getPersonalPhoto()
	 * @method \Bitrix\Main\EO_User setPersonalPhoto(\int|\Bitrix\Main\DB\SqlExpression $personalPhoto)
	 * @method bool hasPersonalPhoto()
	 * @method bool isPersonalPhotoFilled()
	 * @method bool isPersonalPhotoChanged()
	 * @method \int remindActualPersonalPhoto()
	 * @method \int requirePersonalPhoto()
	 * @method \Bitrix\Main\EO_User resetPersonalPhoto()
	 * @method \Bitrix\Main\EO_User unsetPersonalPhoto()
	 * @method \int fillPersonalPhoto()
	 * @method \string getPersonalNotes()
	 * @method \Bitrix\Main\EO_User setPersonalNotes(\string|\Bitrix\Main\DB\SqlExpression $personalNotes)
	 * @method bool hasPersonalNotes()
	 * @method bool isPersonalNotesFilled()
	 * @method bool isPersonalNotesChanged()
	 * @method \string remindActualPersonalNotes()
	 * @method \string requirePersonalNotes()
	 * @method \Bitrix\Main\EO_User resetPersonalNotes()
	 * @method \Bitrix\Main\EO_User unsetPersonalNotes()
	 * @method \string fillPersonalNotes()
	 * @method \string getWorkCompany()
	 * @method \Bitrix\Main\EO_User setWorkCompany(\string|\Bitrix\Main\DB\SqlExpression $workCompany)
	 * @method bool hasWorkCompany()
	 * @method bool isWorkCompanyFilled()
	 * @method bool isWorkCompanyChanged()
	 * @method \string remindActualWorkCompany()
	 * @method \string requireWorkCompany()
	 * @method \Bitrix\Main\EO_User resetWorkCompany()
	 * @method \Bitrix\Main\EO_User unsetWorkCompany()
	 * @method \string fillWorkCompany()
	 * @method \string getWorkDepartment()
	 * @method \Bitrix\Main\EO_User setWorkDepartment(\string|\Bitrix\Main\DB\SqlExpression $workDepartment)
	 * @method bool hasWorkDepartment()
	 * @method bool isWorkDepartmentFilled()
	 * @method bool isWorkDepartmentChanged()
	 * @method \string remindActualWorkDepartment()
	 * @method \string requireWorkDepartment()
	 * @method \Bitrix\Main\EO_User resetWorkDepartment()
	 * @method \Bitrix\Main\EO_User unsetWorkDepartment()
	 * @method \string fillWorkDepartment()
	 * @method \string getWorkPhone()
	 * @method \Bitrix\Main\EO_User setWorkPhone(\string|\Bitrix\Main\DB\SqlExpression $workPhone)
	 * @method bool hasWorkPhone()
	 * @method bool isWorkPhoneFilled()
	 * @method bool isWorkPhoneChanged()
	 * @method \string remindActualWorkPhone()
	 * @method \string requireWorkPhone()
	 * @method \Bitrix\Main\EO_User resetWorkPhone()
	 * @method \Bitrix\Main\EO_User unsetWorkPhone()
	 * @method \string fillWorkPhone()
	 * @method \string getWorkPosition()
	 * @method \Bitrix\Main\EO_User setWorkPosition(\string|\Bitrix\Main\DB\SqlExpression $workPosition)
	 * @method bool hasWorkPosition()
	 * @method bool isWorkPositionFilled()
	 * @method bool isWorkPositionChanged()
	 * @method \string remindActualWorkPosition()
	 * @method \string requireWorkPosition()
	 * @method \Bitrix\Main\EO_User resetWorkPosition()
	 * @method \Bitrix\Main\EO_User unsetWorkPosition()
	 * @method \string fillWorkPosition()
	 * @method \string getWorkWww()
	 * @method \Bitrix\Main\EO_User setWorkWww(\string|\Bitrix\Main\DB\SqlExpression $workWww)
	 * @method bool hasWorkWww()
	 * @method bool isWorkWwwFilled()
	 * @method bool isWorkWwwChanged()
	 * @method \string remindActualWorkWww()
	 * @method \string requireWorkWww()
	 * @method \Bitrix\Main\EO_User resetWorkWww()
	 * @method \Bitrix\Main\EO_User unsetWorkWww()
	 * @method \string fillWorkWww()
	 * @method \string getWorkFax()
	 * @method \Bitrix\Main\EO_User setWorkFax(\string|\Bitrix\Main\DB\SqlExpression $workFax)
	 * @method bool hasWorkFax()
	 * @method bool isWorkFaxFilled()
	 * @method bool isWorkFaxChanged()
	 * @method \string remindActualWorkFax()
	 * @method \string requireWorkFax()
	 * @method \Bitrix\Main\EO_User resetWorkFax()
	 * @method \Bitrix\Main\EO_User unsetWorkFax()
	 * @method \string fillWorkFax()
	 * @method \string getWorkPager()
	 * @method \Bitrix\Main\EO_User setWorkPager(\string|\Bitrix\Main\DB\SqlExpression $workPager)
	 * @method bool hasWorkPager()
	 * @method bool isWorkPagerFilled()
	 * @method bool isWorkPagerChanged()
	 * @method \string remindActualWorkPager()
	 * @method \string requireWorkPager()
	 * @method \Bitrix\Main\EO_User resetWorkPager()
	 * @method \Bitrix\Main\EO_User unsetWorkPager()
	 * @method \string fillWorkPager()
	 * @method \string getWorkStreet()
	 * @method \Bitrix\Main\EO_User setWorkStreet(\string|\Bitrix\Main\DB\SqlExpression $workStreet)
	 * @method bool hasWorkStreet()
	 * @method bool isWorkStreetFilled()
	 * @method bool isWorkStreetChanged()
	 * @method \string remindActualWorkStreet()
	 * @method \string requireWorkStreet()
	 * @method \Bitrix\Main\EO_User resetWorkStreet()
	 * @method \Bitrix\Main\EO_User unsetWorkStreet()
	 * @method \string fillWorkStreet()
	 * @method \string getWorkMailbox()
	 * @method \Bitrix\Main\EO_User setWorkMailbox(\string|\Bitrix\Main\DB\SqlExpression $workMailbox)
	 * @method bool hasWorkMailbox()
	 * @method bool isWorkMailboxFilled()
	 * @method bool isWorkMailboxChanged()
	 * @method \string remindActualWorkMailbox()
	 * @method \string requireWorkMailbox()
	 * @method \Bitrix\Main\EO_User resetWorkMailbox()
	 * @method \Bitrix\Main\EO_User unsetWorkMailbox()
	 * @method \string fillWorkMailbox()
	 * @method \string getWorkCity()
	 * @method \Bitrix\Main\EO_User setWorkCity(\string|\Bitrix\Main\DB\SqlExpression $workCity)
	 * @method bool hasWorkCity()
	 * @method bool isWorkCityFilled()
	 * @method bool isWorkCityChanged()
	 * @method \string remindActualWorkCity()
	 * @method \string requireWorkCity()
	 * @method \Bitrix\Main\EO_User resetWorkCity()
	 * @method \Bitrix\Main\EO_User unsetWorkCity()
	 * @method \string fillWorkCity()
	 * @method \string getWorkState()
	 * @method \Bitrix\Main\EO_User setWorkState(\string|\Bitrix\Main\DB\SqlExpression $workState)
	 * @method bool hasWorkState()
	 * @method bool isWorkStateFilled()
	 * @method bool isWorkStateChanged()
	 * @method \string remindActualWorkState()
	 * @method \string requireWorkState()
	 * @method \Bitrix\Main\EO_User resetWorkState()
	 * @method \Bitrix\Main\EO_User unsetWorkState()
	 * @method \string fillWorkState()
	 * @method \string getWorkZip()
	 * @method \Bitrix\Main\EO_User setWorkZip(\string|\Bitrix\Main\DB\SqlExpression $workZip)
	 * @method bool hasWorkZip()
	 * @method bool isWorkZipFilled()
	 * @method bool isWorkZipChanged()
	 * @method \string remindActualWorkZip()
	 * @method \string requireWorkZip()
	 * @method \Bitrix\Main\EO_User resetWorkZip()
	 * @method \Bitrix\Main\EO_User unsetWorkZip()
	 * @method \string fillWorkZip()
	 * @method \string getWorkCountry()
	 * @method \Bitrix\Main\EO_User setWorkCountry(\string|\Bitrix\Main\DB\SqlExpression $workCountry)
	 * @method bool hasWorkCountry()
	 * @method bool isWorkCountryFilled()
	 * @method bool isWorkCountryChanged()
	 * @method \string remindActualWorkCountry()
	 * @method \string requireWorkCountry()
	 * @method \Bitrix\Main\EO_User resetWorkCountry()
	 * @method \Bitrix\Main\EO_User unsetWorkCountry()
	 * @method \string fillWorkCountry()
	 * @method \string getWorkProfile()
	 * @method \Bitrix\Main\EO_User setWorkProfile(\string|\Bitrix\Main\DB\SqlExpression $workProfile)
	 * @method bool hasWorkProfile()
	 * @method bool isWorkProfileFilled()
	 * @method bool isWorkProfileChanged()
	 * @method \string remindActualWorkProfile()
	 * @method \string requireWorkProfile()
	 * @method \Bitrix\Main\EO_User resetWorkProfile()
	 * @method \Bitrix\Main\EO_User unsetWorkProfile()
	 * @method \string fillWorkProfile()
	 * @method \int getWorkLogo()
	 * @method \Bitrix\Main\EO_User setWorkLogo(\int|\Bitrix\Main\DB\SqlExpression $workLogo)
	 * @method bool hasWorkLogo()
	 * @method bool isWorkLogoFilled()
	 * @method bool isWorkLogoChanged()
	 * @method \int remindActualWorkLogo()
	 * @method \int requireWorkLogo()
	 * @method \Bitrix\Main\EO_User resetWorkLogo()
	 * @method \Bitrix\Main\EO_User unsetWorkLogo()
	 * @method \int fillWorkLogo()
	 * @method \string getWorkNotes()
	 * @method \Bitrix\Main\EO_User setWorkNotes(\string|\Bitrix\Main\DB\SqlExpression $workNotes)
	 * @method bool hasWorkNotes()
	 * @method bool isWorkNotesFilled()
	 * @method bool isWorkNotesChanged()
	 * @method \string remindActualWorkNotes()
	 * @method \string requireWorkNotes()
	 * @method \Bitrix\Main\EO_User resetWorkNotes()
	 * @method \Bitrix\Main\EO_User unsetWorkNotes()
	 * @method \string fillWorkNotes()
	 * @method \string getAdminNotes()
	 * @method \Bitrix\Main\EO_User setAdminNotes(\string|\Bitrix\Main\DB\SqlExpression $adminNotes)
	 * @method bool hasAdminNotes()
	 * @method bool isAdminNotesFilled()
	 * @method bool isAdminNotesChanged()
	 * @method \string remindActualAdminNotes()
	 * @method \string requireAdminNotes()
	 * @method \Bitrix\Main\EO_User resetAdminNotes()
	 * @method \Bitrix\Main\EO_User unsetAdminNotes()
	 * @method \string fillAdminNotes()
	 * @method \string getShortName()
	 * @method \string remindActualShortName()
	 * @method \string requireShortName()
	 * @method bool hasShortName()
	 * @method bool isShortNameFilled()
	 * @method \Bitrix\Main\EO_User unsetShortName()
	 * @method \string fillShortName()
	 * @method \boolean getIsOnline()
	 * @method \boolean remindActualIsOnline()
	 * @method \boolean requireIsOnline()
	 * @method bool hasIsOnline()
	 * @method bool isIsOnlineFilled()
	 * @method \Bitrix\Main\EO_User unsetIsOnline()
	 * @method \boolean fillIsOnline()
	 * @method \boolean getIsRealUser()
	 * @method \boolean remindActualIsRealUser()
	 * @method \boolean requireIsRealUser()
	 * @method bool hasIsRealUser()
	 * @method bool isIsRealUserFilled()
	 * @method \Bitrix\Main\EO_User unsetIsRealUser()
	 * @method \boolean fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex getIndex()
	 * @method \Bitrix\Main\EO_UserIndex remindActualIndex()
	 * @method \Bitrix\Main\EO_UserIndex requireIndex()
	 * @method \Bitrix\Main\EO_User setIndex(\Bitrix\Main\EO_UserIndex $object)
	 * @method \Bitrix\Main\EO_User resetIndex()
	 * @method \Bitrix\Main\EO_User unsetIndex()
	 * @method bool hasIndex()
	 * @method bool isIndexFilled()
	 * @method bool isIndexChanged()
	 * @method \Bitrix\Main\EO_UserIndex fillIndex()
	 * @method \Bitrix\Main\EO_UserIndexSelector getIndexSelector()
	 * @method \Bitrix\Main\EO_UserIndexSelector remindActualIndexSelector()
	 * @method \Bitrix\Main\EO_UserIndexSelector requireIndexSelector()
	 * @method \Bitrix\Main\EO_User setIndexSelector(\Bitrix\Main\EO_UserIndexSelector $object)
	 * @method \Bitrix\Main\EO_User resetIndexSelector()
	 * @method \Bitrix\Main\EO_User unsetIndexSelector()
	 * @method bool hasIndexSelector()
	 * @method bool isIndexSelectorFilled()
	 * @method bool isIndexSelectorChanged()
	 * @method \Bitrix\Main\EO_UserIndexSelector fillIndexSelector()
	 * @method \Bitrix\Main\EO_UserCounter getCounter()
	 * @method \Bitrix\Main\EO_UserCounter remindActualCounter()
	 * @method \Bitrix\Main\EO_UserCounter requireCounter()
	 * @method \Bitrix\Main\EO_User setCounter(\Bitrix\Main\EO_UserCounter $object)
	 * @method \Bitrix\Main\EO_User resetCounter()
	 * @method \Bitrix\Main\EO_User unsetCounter()
	 * @method bool hasCounter()
	 * @method bool isCounterFilled()
	 * @method bool isCounterChanged()
	 * @method \Bitrix\Main\EO_UserCounter fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth getPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth remindActualPhoneAuth()
	 * @method \Bitrix\Main\EO_UserPhoneAuth requirePhoneAuth()
	 * @method \Bitrix\Main\EO_User setPhoneAuth(\Bitrix\Main\EO_UserPhoneAuth $object)
	 * @method \Bitrix\Main\EO_User resetPhoneAuth()
	 * @method \Bitrix\Main\EO_User unsetPhoneAuth()
	 * @method bool hasPhoneAuth()
	 * @method bool isPhoneAuthFilled()
	 * @method bool isPhoneAuthChanged()
	 * @method \Bitrix\Main\EO_UserPhoneAuth fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection requireGroups()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method bool hasGroups()
	 * @method bool isGroupsFilled()
	 * @method bool isGroupsChanged()
	 * @method void addToGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeFromGroups(\Bitrix\Main\EO_UserGroup $userGroup)
	 * @method void removeAllGroups()
	 * @method \Bitrix\Main\EO_User resetGroups()
	 * @method \Bitrix\Main\EO_User unsetGroups()
	 * @method \Bitrix\Main\EO_UserUts getUtsObject()
	 * @method \Bitrix\Main\EO_UserUts remindActualUtsObject()
	 * @method \Bitrix\Main\EO_UserUts requireUtsObject()
	 * @method \Bitrix\Main\EO_User setUtsObject(\Bitrix\Main\EO_UserUts $object)
	 * @method \Bitrix\Main\EO_User resetUtsObject()
	 * @method \Bitrix\Main\EO_User unsetUtsObject()
	 * @method bool hasUtsObject()
	 * @method bool isUtsObjectFilled()
	 * @method bool isUtsObjectChanged()
	 * @method \Bitrix\Main\EO_UserUts fillUtsObject()
	 * @method \string getUfDepartment()
	 * @method \string remindActualUfDepartment()
	 * @method \string requireUfDepartment()
	 * @method bool hasUfDepartment()
	 * @method bool isUfDepartmentFilled()
	 * @method \Bitrix\Main\EO_User unsetUfDepartment()
	 * @method \string fillUfDepartment()
	 * @method \Bitrix\Main\EO_User setUfDepartment(\string[] $ufDepartment)
	 * @method bool isUfDepartmentChanged()
	 * @method \string getUfWorkRole()
	 * @method \string remindActualUfWorkRole()
	 * @method \string requireUfWorkRole()
	 * @method bool hasUfWorkRole()
	 * @method bool isUfWorkRoleFilled()
	 * @method \Bitrix\Main\EO_User unsetUfWorkRole()
	 * @method \string fillUfWorkRole()
	 * @method \Bitrix\Main\EO_User setUfWorkRole(\string $ufWorkRole)
	 * @method bool isUfWorkRoleChanged()
	 * @method \string getUfPhoneInner()
	 * @method \string remindActualUfPhoneInner()
	 * @method \string requireUfPhoneInner()
	 * @method bool hasUfPhoneInner()
	 * @method bool isUfPhoneInnerFilled()
	 * @method \Bitrix\Main\EO_User unsetUfPhoneInner()
	 * @method \string fillUfPhoneInner()
	 * @method \Bitrix\Main\EO_User setUfPhoneInner(\string $ufPhoneInner)
	 * @method bool isUfPhoneInnerChanged()
	 * @method \string getUfUserCrmEntity()
	 * @method \string remindActualUfUserCrmEntity()
	 * @method \string requireUfUserCrmEntity()
	 * @method bool hasUfUserCrmEntity()
	 * @method bool isUfUserCrmEntityFilled()
	 * @method \Bitrix\Main\EO_User unsetUfUserCrmEntity()
	 * @method \string fillUfUserCrmEntity()
	 * @method \Bitrix\Main\EO_User setUfUserCrmEntity(\string $ufUserCrmEntity)
	 * @method bool isUfUserCrmEntityChanged()
	 * @method \string getUfImSearch()
	 * @method \string remindActualUfImSearch()
	 * @method \string requireUfImSearch()
	 * @method bool hasUfImSearch()
	 * @method bool isUfImSearchFilled()
	 * @method \Bitrix\Main\EO_User unsetUfImSearch()
	 * @method \string fillUfImSearch()
	 * @method \Bitrix\Main\EO_User setUfImSearch(\string $ufImSearch)
	 * @method bool isUfImSearchChanged()
	 * @method \int getUf1c()
	 * @method \int remindActualUf1c()
	 * @method \int requireUf1c()
	 * @method bool hasUf1c()
	 * @method bool isUf1cFilled()
	 * @method \Bitrix\Main\EO_User unsetUf1c()
	 * @method \int fillUf1c()
	 * @method \Bitrix\Main\EO_User setUf1c(\int $uf1c)
	 * @method bool isUf1cChanged()
	 * @method \string getUfInn()
	 * @method \string remindActualUfInn()
	 * @method \string requireUfInn()
	 * @method bool hasUfInn()
	 * @method bool isUfInnFilled()
	 * @method \Bitrix\Main\EO_User unsetUfInn()
	 * @method \string fillUfInn()
	 * @method \Bitrix\Main\EO_User setUfInn(\string $ufInn)
	 * @method bool isUfInnChanged()
	 * @method \string getUfDistrict()
	 * @method \string remindActualUfDistrict()
	 * @method \string requireUfDistrict()
	 * @method bool hasUfDistrict()
	 * @method bool isUfDistrictFilled()
	 * @method \Bitrix\Main\EO_User unsetUfDistrict()
	 * @method \string fillUfDistrict()
	 * @method \Bitrix\Main\EO_User setUfDistrict(\string $ufDistrict)
	 * @method bool isUfDistrictChanged()
	 * @method \string getUfSkype()
	 * @method \string remindActualUfSkype()
	 * @method \string requireUfSkype()
	 * @method bool hasUfSkype()
	 * @method bool isUfSkypeFilled()
	 * @method \Bitrix\Main\EO_User unsetUfSkype()
	 * @method \string fillUfSkype()
	 * @method \Bitrix\Main\EO_User setUfSkype(\string $ufSkype)
	 * @method bool isUfSkypeChanged()
	 * @method \string getUfTwitter()
	 * @method \string remindActualUfTwitter()
	 * @method \string requireUfTwitter()
	 * @method bool hasUfTwitter()
	 * @method bool isUfTwitterFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTwitter()
	 * @method \string fillUfTwitter()
	 * @method \Bitrix\Main\EO_User setUfTwitter(\string $ufTwitter)
	 * @method bool isUfTwitterChanged()
	 * @method \string getUfFacebook()
	 * @method \string remindActualUfFacebook()
	 * @method \string requireUfFacebook()
	 * @method bool hasUfFacebook()
	 * @method bool isUfFacebookFilled()
	 * @method \Bitrix\Main\EO_User unsetUfFacebook()
	 * @method \string fillUfFacebook()
	 * @method \Bitrix\Main\EO_User setUfFacebook(\string $ufFacebook)
	 * @method bool isUfFacebookChanged()
	 * @method \string getUfLinkedin()
	 * @method \string remindActualUfLinkedin()
	 * @method \string requireUfLinkedin()
	 * @method bool hasUfLinkedin()
	 * @method bool isUfLinkedinFilled()
	 * @method \Bitrix\Main\EO_User unsetUfLinkedin()
	 * @method \string fillUfLinkedin()
	 * @method \Bitrix\Main\EO_User setUfLinkedin(\string $ufLinkedin)
	 * @method bool isUfLinkedinChanged()
	 * @method \string getUfXing()
	 * @method \string remindActualUfXing()
	 * @method \string requireUfXing()
	 * @method bool hasUfXing()
	 * @method bool isUfXingFilled()
	 * @method \Bitrix\Main\EO_User unsetUfXing()
	 * @method \string fillUfXing()
	 * @method \Bitrix\Main\EO_User setUfXing(\string $ufXing)
	 * @method bool isUfXingChanged()
	 * @method \string getUfWebSites()
	 * @method \string remindActualUfWebSites()
	 * @method \string requireUfWebSites()
	 * @method bool hasUfWebSites()
	 * @method bool isUfWebSitesFilled()
	 * @method \Bitrix\Main\EO_User unsetUfWebSites()
	 * @method \string fillUfWebSites()
	 * @method \Bitrix\Main\EO_User setUfWebSites(\string $ufWebSites)
	 * @method bool isUfWebSitesChanged()
	 * @method \string getUfSkills()
	 * @method \string remindActualUfSkills()
	 * @method \string requireUfSkills()
	 * @method bool hasUfSkills()
	 * @method bool isUfSkillsFilled()
	 * @method \Bitrix\Main\EO_User unsetUfSkills()
	 * @method \string fillUfSkills()
	 * @method \Bitrix\Main\EO_User setUfSkills(\string $ufSkills)
	 * @method bool isUfSkillsChanged()
	 * @method \string getUfInterests()
	 * @method \string remindActualUfInterests()
	 * @method \string requireUfInterests()
	 * @method bool hasUfInterests()
	 * @method bool isUfInterestsFilled()
	 * @method \Bitrix\Main\EO_User unsetUfInterests()
	 * @method \string fillUfInterests()
	 * @method \Bitrix\Main\EO_User setUfInterests(\string $ufInterests)
	 * @method bool isUfInterestsChanged()
	 * @method \string getUfWorkBinding()
	 * @method \string remindActualUfWorkBinding()
	 * @method \string requireUfWorkBinding()
	 * @method bool hasUfWorkBinding()
	 * @method bool isUfWorkBindingFilled()
	 * @method \Bitrix\Main\EO_User unsetUfWorkBinding()
	 * @method \string fillUfWorkBinding()
	 * @method \Bitrix\Main\EO_User setUfWorkBinding(\string $ufWorkBinding)
	 * @method bool isUfWorkBindingChanged()
	 * @method \Bitrix\Main\Type\DateTime getUfBxdavexCalsync()
	 * @method \Bitrix\Main\Type\DateTime remindActualUfBxdavexCalsync()
	 * @method \Bitrix\Main\Type\DateTime requireUfBxdavexCalsync()
	 * @method bool hasUfBxdavexCalsync()
	 * @method bool isUfBxdavexCalsyncFilled()
	 * @method \Bitrix\Main\EO_User unsetUfBxdavexCalsync()
	 * @method \Bitrix\Main\Type\DateTime fillUfBxdavexCalsync()
	 * @method \Bitrix\Main\EO_User setUfBxdavexCalsync(\Bitrix\Main\Type\DateTime $ufBxdavexCalsync)
	 * @method bool isUfBxdavexCalsyncChanged()
	 * @method \int getUfPublic()
	 * @method \int remindActualUfPublic()
	 * @method \int requireUfPublic()
	 * @method bool hasUfPublic()
	 * @method bool isUfPublicFilled()
	 * @method \Bitrix\Main\EO_User unsetUfPublic()
	 * @method \int fillUfPublic()
	 * @method \Bitrix\Main\EO_User setUfPublic(\int $ufPublic)
	 * @method bool isUfPublicChanged()
	 * @method \string getUfLikes()
	 * @method \string remindActualUfLikes()
	 * @method \string requireUfLikes()
	 * @method bool hasUfLikes()
	 * @method bool isUfLikesFilled()
	 * @method \Bitrix\Main\EO_User unsetUfLikes()
	 * @method \string fillUfLikes()
	 * @method \Bitrix\Main\EO_User setUfLikes(\string $ufLikes)
	 * @method bool isUfLikesChanged()
	 * @method \string getUfConnectorMd5()
	 * @method \string remindActualUfConnectorMd5()
	 * @method \string requireUfConnectorMd5()
	 * @method bool hasUfConnectorMd5()
	 * @method bool isUfConnectorMd5Filled()
	 * @method \Bitrix\Main\EO_User unsetUfConnectorMd5()
	 * @method \string fillUfConnectorMd5()
	 * @method \Bitrix\Main\EO_User setUfConnectorMd5(\string $ufConnectorMd5)
	 * @method bool isUfConnectorMd5Changed()
	 * @method \string getUfViPassword()
	 * @method \string remindActualUfViPassword()
	 * @method \string requireUfViPassword()
	 * @method bool hasUfViPassword()
	 * @method bool isUfViPasswordFilled()
	 * @method \Bitrix\Main\EO_User unsetUfViPassword()
	 * @method \string fillUfViPassword()
	 * @method \Bitrix\Main\EO_User setUfViPassword(\string $ufViPassword)
	 * @method bool isUfViPasswordChanged()
	 * @method \string getUfViBackphone()
	 * @method \string remindActualUfViBackphone()
	 * @method \string requireUfViBackphone()
	 * @method bool hasUfViBackphone()
	 * @method bool isUfViBackphoneFilled()
	 * @method \Bitrix\Main\EO_User unsetUfViBackphone()
	 * @method \string fillUfViBackphone()
	 * @method \Bitrix\Main\EO_User setUfViBackphone(\string $ufViBackphone)
	 * @method bool isUfViBackphoneChanged()
	 * @method \string getUfViPhone()
	 * @method \string remindActualUfViPhone()
	 * @method \string requireUfViPhone()
	 * @method bool hasUfViPhone()
	 * @method bool isUfViPhoneFilled()
	 * @method \Bitrix\Main\EO_User unsetUfViPhone()
	 * @method \string fillUfViPhone()
	 * @method \Bitrix\Main\EO_User setUfViPhone(\string $ufViPhone)
	 * @method bool isUfViPhoneChanged()
	 * @method \string getUfViPhonePassword()
	 * @method \string remindActualUfViPhonePassword()
	 * @method \string requireUfViPhonePassword()
	 * @method bool hasUfViPhonePassword()
	 * @method bool isUfViPhonePasswordFilled()
	 * @method \Bitrix\Main\EO_User unsetUfViPhonePassword()
	 * @method \string fillUfViPhonePassword()
	 * @method \Bitrix\Main\EO_User setUfViPhonePassword(\string $ufViPhonePassword)
	 * @method bool isUfViPhonePasswordChanged()
	 * @method \Bitrix\Main\Type\Date getUfEmploymentDate()
	 * @method \Bitrix\Main\Type\Date remindActualUfEmploymentDate()
	 * @method \Bitrix\Main\Type\Date requireUfEmploymentDate()
	 * @method bool hasUfEmploymentDate()
	 * @method bool isUfEmploymentDateFilled()
	 * @method \Bitrix\Main\EO_User unsetUfEmploymentDate()
	 * @method \Bitrix\Main\Type\Date fillUfEmploymentDate()
	 * @method \Bitrix\Main\EO_User setUfEmploymentDate(\Bitrix\Main\Type\Date $ufEmploymentDate)
	 * @method bool isUfEmploymentDateChanged()
	 * @method \string getUfRadioTotalLikes()
	 * @method \string remindActualUfRadioTotalLikes()
	 * @method \string requireUfRadioTotalLikes()
	 * @method bool hasUfRadioTotalLikes()
	 * @method bool isUfRadioTotalLikesFilled()
	 * @method \Bitrix\Main\EO_User unsetUfRadioTotalLikes()
	 * @method \string fillUfRadioTotalLikes()
	 * @method \Bitrix\Main\EO_User setUfRadioTotalLikes(\string $ufRadioTotalLikes)
	 * @method bool isUfRadioTotalLikesChanged()
	 * @method \string getUfRadioBalance()
	 * @method \string remindActualUfRadioBalance()
	 * @method \string requireUfRadioBalance()
	 * @method bool hasUfRadioBalance()
	 * @method bool isUfRadioBalanceFilled()
	 * @method \Bitrix\Main\EO_User unsetUfRadioBalance()
	 * @method \string fillUfRadioBalance()
	 * @method \Bitrix\Main\EO_User setUfRadioBalance(\string $ufRadioBalance)
	 * @method bool isUfRadioBalanceChanged()
	 * @method \string getUfRadioMonthLikes()
	 * @method \string remindActualUfRadioMonthLikes()
	 * @method \string requireUfRadioMonthLikes()
	 * @method bool hasUfRadioMonthLikes()
	 * @method bool isUfRadioMonthLikesFilled()
	 * @method \Bitrix\Main\EO_User unsetUfRadioMonthLikes()
	 * @method \string fillUfRadioMonthLikes()
	 * @method \Bitrix\Main\EO_User setUfRadioMonthLikes(\string $ufRadioMonthLikes)
	 * @method bool isUfRadioMonthLikesChanged()
	 * @method \string getUfRadioDayLikes()
	 * @method \string remindActualUfRadioDayLikes()
	 * @method \string requireUfRadioDayLikes()
	 * @method bool hasUfRadioDayLikes()
	 * @method bool isUfRadioDayLikesFilled()
	 * @method \Bitrix\Main\EO_User unsetUfRadioDayLikes()
	 * @method \string fillUfRadioDayLikes()
	 * @method \Bitrix\Main\EO_User setUfRadioDayLikes(\string $ufRadioDayLikes)
	 * @method bool isUfRadioDayLikesChanged()
	 * @method \string getUfRadioGiveLikes()
	 * @method \string remindActualUfRadioGiveLikes()
	 * @method \string requireUfRadioGiveLikes()
	 * @method bool hasUfRadioGiveLikes()
	 * @method bool isUfRadioGiveLikesFilled()
	 * @method \Bitrix\Main\EO_User unsetUfRadioGiveLikes()
	 * @method \string fillUfRadioGiveLikes()
	 * @method \Bitrix\Main\EO_User setUfRadioGiveLikes(\string $ufRadioGiveLikes)
	 * @method bool isUfRadioGiveLikesChanged()
	 * @method \int getUfTimeman()
	 * @method \int remindActualUfTimeman()
	 * @method \int requireUfTimeman()
	 * @method bool hasUfTimeman()
	 * @method bool isUfTimemanFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTimeman()
	 * @method \int fillUfTimeman()
	 * @method \Bitrix\Main\EO_User setUfTimeman(\int $ufTimeman)
	 * @method bool isUfTimemanChanged()
	 * @method \string getUfTmMaxStart()
	 * @method \string remindActualUfTmMaxStart()
	 * @method \string requireUfTmMaxStart()
	 * @method bool hasUfTmMaxStart()
	 * @method bool isUfTmMaxStartFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmMaxStart()
	 * @method \string fillUfTmMaxStart()
	 * @method \Bitrix\Main\EO_User setUfTmMaxStart(\string $ufTmMaxStart)
	 * @method bool isUfTmMaxStartChanged()
	 * @method \string getUfTmMinFinish()
	 * @method \string remindActualUfTmMinFinish()
	 * @method \string requireUfTmMinFinish()
	 * @method bool hasUfTmMinFinish()
	 * @method bool isUfTmMinFinishFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmMinFinish()
	 * @method \string fillUfTmMinFinish()
	 * @method \Bitrix\Main\EO_User setUfTmMinFinish(\string $ufTmMinFinish)
	 * @method bool isUfTmMinFinishChanged()
	 * @method \string getUfTmMinDuration()
	 * @method \string remindActualUfTmMinDuration()
	 * @method \string requireUfTmMinDuration()
	 * @method bool hasUfTmMinDuration()
	 * @method bool isUfTmMinDurationFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmMinDuration()
	 * @method \string fillUfTmMinDuration()
	 * @method \Bitrix\Main\EO_User setUfTmMinDuration(\string $ufTmMinDuration)
	 * @method bool isUfTmMinDurationChanged()
	 * @method \int getUfTmReportReq()
	 * @method \int remindActualUfTmReportReq()
	 * @method \int requireUfTmReportReq()
	 * @method bool hasUfTmReportReq()
	 * @method bool isUfTmReportReqFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmReportReq()
	 * @method \int fillUfTmReportReq()
	 * @method \Bitrix\Main\EO_User setUfTmReportReq(\int $ufTmReportReq)
	 * @method bool isUfTmReportReqChanged()
	 * @method \string getUfTmReportTpl()
	 * @method \string remindActualUfTmReportTpl()
	 * @method \string requireUfTmReportTpl()
	 * @method bool hasUfTmReportTpl()
	 * @method bool isUfTmReportTplFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmReportTpl()
	 * @method \string fillUfTmReportTpl()
	 * @method \Bitrix\Main\EO_User setUfTmReportTpl(\string[] $ufTmReportTpl)
	 * @method bool isUfTmReportTplChanged()
	 * @method \int getUfTmFree()
	 * @method \int remindActualUfTmFree()
	 * @method \int requireUfTmFree()
	 * @method bool hasUfTmFree()
	 * @method bool isUfTmFreeFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmFree()
	 * @method \int fillUfTmFree()
	 * @method \Bitrix\Main\EO_User setUfTmFree(\int $ufTmFree)
	 * @method bool isUfTmFreeChanged()
	 * @method \string getUfTmTime()
	 * @method \string remindActualUfTmTime()
	 * @method \string requireUfTmTime()
	 * @method bool hasUfTmTime()
	 * @method bool isUfTmTimeFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmTime()
	 * @method \string fillUfTmTime()
	 * @method \Bitrix\Main\EO_User setUfTmTime(\string $ufTmTime)
	 * @method bool isUfTmTimeChanged()
	 * @method \string getUfTmDay()
	 * @method \string remindActualUfTmDay()
	 * @method \string requireUfTmDay()
	 * @method bool hasUfTmDay()
	 * @method bool isUfTmDayFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmDay()
	 * @method \string fillUfTmDay()
	 * @method \Bitrix\Main\EO_User setUfTmDay(\string $ufTmDay)
	 * @method bool isUfTmDayChanged()
	 * @method \string getUfTmReportDate()
	 * @method \string remindActualUfTmReportDate()
	 * @method \string requireUfTmReportDate()
	 * @method bool hasUfTmReportDate()
	 * @method bool isUfTmReportDateFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmReportDate()
	 * @method \string fillUfTmReportDate()
	 * @method \Bitrix\Main\EO_User setUfTmReportDate(\string $ufTmReportDate)
	 * @method bool isUfTmReportDateChanged()
	 * @method \int getUfReportPeriod()
	 * @method \int remindActualUfReportPeriod()
	 * @method \int requireUfReportPeriod()
	 * @method bool hasUfReportPeriod()
	 * @method bool isUfReportPeriodFilled()
	 * @method \Bitrix\Main\EO_User unsetUfReportPeriod()
	 * @method \int fillUfReportPeriod()
	 * @method \Bitrix\Main\EO_User setUfReportPeriod(\int $ufReportPeriod)
	 * @method bool isUfReportPeriodChanged()
	 * @method \string getUfDelayTime()
	 * @method \string remindActualUfDelayTime()
	 * @method \string requireUfDelayTime()
	 * @method bool hasUfDelayTime()
	 * @method bool isUfDelayTimeFilled()
	 * @method \Bitrix\Main\EO_User unsetUfDelayTime()
	 * @method \string fillUfDelayTime()
	 * @method \Bitrix\Main\EO_User setUfDelayTime(\string $ufDelayTime)
	 * @method bool isUfDelayTimeChanged()
	 * @method \string getUfLastReportDate()
	 * @method \string remindActualUfLastReportDate()
	 * @method \string requireUfLastReportDate()
	 * @method bool hasUfLastReportDate()
	 * @method bool isUfLastReportDateFilled()
	 * @method \Bitrix\Main\EO_User unsetUfLastReportDate()
	 * @method \string fillUfLastReportDate()
	 * @method \Bitrix\Main\EO_User setUfLastReportDate(\string $ufLastReportDate)
	 * @method bool isUfLastReportDateChanged()
	 * @method \string getUfSettingDate()
	 * @method \string remindActualUfSettingDate()
	 * @method \string requireUfSettingDate()
	 * @method bool hasUfSettingDate()
	 * @method bool isUfSettingDateFilled()
	 * @method \Bitrix\Main\EO_User unsetUfSettingDate()
	 * @method \string fillUfSettingDate()
	 * @method \Bitrix\Main\EO_User setUfSettingDate(\string $ufSettingDate)
	 * @method bool isUfSettingDateChanged()
	 * @method \string getUfTmAllowedDelta()
	 * @method \string remindActualUfTmAllowedDelta()
	 * @method \string requireUfTmAllowedDelta()
	 * @method bool hasUfTmAllowedDelta()
	 * @method bool isUfTmAllowedDeltaFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmAllowedDelta()
	 * @method \string fillUfTmAllowedDelta()
	 * @method \Bitrix\Main\EO_User setUfTmAllowedDelta(\string $ufTmAllowedDelta)
	 * @method bool isUfTmAllowedDeltaChanged()
	 * @method \int getUfDepartmentSingle()
	 * @method \int remindActualUfDepartmentSingle()
	 * @method \int requireUfDepartmentSingle()
	 * @method bool hasUfDepartmentSingle()
	 * @method bool isUfDepartmentSingleFilled()
	 * @method \Bitrix\Main\EO_User unsetUfDepartmentSingle()
	 * @method \int fillUfDepartmentSingle()
	 * @method \string getUfTmReportTplSingle()
	 * @method \string remindActualUfTmReportTplSingle()
	 * @method \string requireUfTmReportTplSingle()
	 * @method bool hasUfTmReportTplSingle()
	 * @method bool isUfTmReportTplSingleFilled()
	 * @method \Bitrix\Main\EO_User unsetUfTmReportTplSingle()
	 * @method \string fillUfTmReportTplSingle()
	 * @method \Bitrix\Main\EO_UserUts getUtsObjectInner()
	 * @method \Bitrix\Main\EO_UserUts remindActualUtsObjectInner()
	 * @method \Bitrix\Main\EO_UserUts requireUtsObjectInner()
	 * @method \Bitrix\Main\EO_User setUtsObjectInner(\Bitrix\Main\EO_UserUts $object)
	 * @method \Bitrix\Main\EO_User resetUtsObjectInner()
	 * @method \Bitrix\Main\EO_User unsetUtsObjectInner()
	 * @method bool hasUtsObjectInner()
	 * @method bool isUtsObjectInnerFilled()
	 * @method bool isUtsObjectInnerChanged()
	 * @method \Bitrix\Main\EO_UserUts fillUtsObjectInner()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_User set($fieldName, $value)
	 * @method \Bitrix\Main\EO_User reset($fieldName)
	 * @method \Bitrix\Main\EO_User unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_User wakeUp($data)
	 */
	class EO_User {
		/* @var \Bitrix\Main\UserTable */
		static public $dataClass = '\Bitrix\Main\UserTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_User_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLoginList()
	 * @method \string[] fillLogin()
	 * @method \string[] getPasswordList()
	 * @method \string[] fillPassword()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegisterList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegister()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRegShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRegShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLogin()
	 * @method \Bitrix\Main\Type\DateTime[] getLastLoginShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastLoginShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastActivityDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastActivityDate()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getExternalAuthIdList()
	 * @method \string[] fillExternalAuthId()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getBxUserIdList()
	 * @method \string[] fillBxUserId()
	 * @method \string[] getConfirmCodeList()
	 * @method \string[] fillConfirmCode()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \int[] getTimeZoneOffsetList()
	 * @method \int[] fillTimeZoneOffset()
	 * @method \string[] getPersonalProfessionList()
	 * @method \string[] fillPersonalProfession()
	 * @method \string[] getPersonalPhoneList()
	 * @method \string[] fillPersonalPhone()
	 * @method \string[] getPersonalMobileList()
	 * @method \string[] fillPersonalMobile()
	 * @method \string[] getPersonalWwwList()
	 * @method \string[] fillPersonalWww()
	 * @method \string[] getPersonalIcqList()
	 * @method \string[] fillPersonalIcq()
	 * @method \string[] getPersonalFaxList()
	 * @method \string[] fillPersonalFax()
	 * @method \string[] getPersonalPagerList()
	 * @method \string[] fillPersonalPager()
	 * @method \string[] getPersonalStreetList()
	 * @method \string[] fillPersonalStreet()
	 * @method \string[] getPersonalMailboxList()
	 * @method \string[] fillPersonalMailbox()
	 * @method \string[] getPersonalCityList()
	 * @method \string[] fillPersonalCity()
	 * @method \string[] getPersonalStateList()
	 * @method \string[] fillPersonalState()
	 * @method \string[] getPersonalZipList()
	 * @method \string[] fillPersonalZip()
	 * @method \string[] getPersonalCountryList()
	 * @method \string[] fillPersonalCountry()
	 * @method \Bitrix\Main\Type\Date[] getPersonalBirthdayList()
	 * @method \Bitrix\Main\Type\Date[] fillPersonalBirthday()
	 * @method \string[] getPersonalGenderList()
	 * @method \string[] fillPersonalGender()
	 * @method \int[] getPersonalPhotoList()
	 * @method \int[] fillPersonalPhoto()
	 * @method \string[] getPersonalNotesList()
	 * @method \string[] fillPersonalNotes()
	 * @method \string[] getWorkCompanyList()
	 * @method \string[] fillWorkCompany()
	 * @method \string[] getWorkDepartmentList()
	 * @method \string[] fillWorkDepartment()
	 * @method \string[] getWorkPhoneList()
	 * @method \string[] fillWorkPhone()
	 * @method \string[] getWorkPositionList()
	 * @method \string[] fillWorkPosition()
	 * @method \string[] getWorkWwwList()
	 * @method \string[] fillWorkWww()
	 * @method \string[] getWorkFaxList()
	 * @method \string[] fillWorkFax()
	 * @method \string[] getWorkPagerList()
	 * @method \string[] fillWorkPager()
	 * @method \string[] getWorkStreetList()
	 * @method \string[] fillWorkStreet()
	 * @method \string[] getWorkMailboxList()
	 * @method \string[] fillWorkMailbox()
	 * @method \string[] getWorkCityList()
	 * @method \string[] fillWorkCity()
	 * @method \string[] getWorkStateList()
	 * @method \string[] fillWorkState()
	 * @method \string[] getWorkZipList()
	 * @method \string[] fillWorkZip()
	 * @method \string[] getWorkCountryList()
	 * @method \string[] fillWorkCountry()
	 * @method \string[] getWorkProfileList()
	 * @method \string[] fillWorkProfile()
	 * @method \int[] getWorkLogoList()
	 * @method \int[] fillWorkLogo()
	 * @method \string[] getWorkNotesList()
	 * @method \string[] fillWorkNotes()
	 * @method \string[] getAdminNotesList()
	 * @method \string[] fillAdminNotes()
	 * @method \string[] getShortNameList()
	 * @method \string[] fillShortName()
	 * @method \boolean[] getIsOnlineList()
	 * @method \boolean[] fillIsOnline()
	 * @method \boolean[] getIsRealUserList()
	 * @method \boolean[] fillIsRealUser()
	 * @method \Bitrix\Main\EO_UserIndex[] getIndexList()
	 * @method \Bitrix\Main\EO_User_Collection getIndexCollection()
	 * @method \Bitrix\Main\EO_UserIndex_Collection fillIndex()
	 * @method \Bitrix\Main\EO_UserIndexSelector[] getIndexSelectorList()
	 * @method \Bitrix\Main\EO_User_Collection getIndexSelectorCollection()
	 * @method \Bitrix\Main\EO_UserIndexSelector_Collection fillIndexSelector()
	 * @method \Bitrix\Main\EO_UserCounter[] getCounterList()
	 * @method \Bitrix\Main\EO_User_Collection getCounterCollection()
	 * @method \Bitrix\Main\EO_UserCounter_Collection fillCounter()
	 * @method \Bitrix\Main\EO_UserPhoneAuth[] getPhoneAuthList()
	 * @method \Bitrix\Main\EO_User_Collection getPhoneAuthCollection()
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection fillPhoneAuth()
	 * @method \Bitrix\Main\EO_UserGroup_Collection[] getGroupsList()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroupsCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillGroups()
	 * @method \Bitrix\Main\EO_UserUts[] getUtsObjectList()
	 * @method \Bitrix\Main\EO_User_Collection getUtsObjectCollection()
	 * @method \Bitrix\Main\EO_UserUts_Collection fillUtsObject()
	 * @method \string[] getUfDepartmentList()
	 * @method \string[] fillUfDepartment()
	 * @method \string[] getUfWorkRoleList()
	 * @method \string[] fillUfWorkRole()
	 * @method \string[] getUfPhoneInnerList()
	 * @method \string[] fillUfPhoneInner()
	 * @method \string[] getUfUserCrmEntityList()
	 * @method \string[] fillUfUserCrmEntity()
	 * @method \string[] getUfImSearchList()
	 * @method \string[] fillUfImSearch()
	 * @method \int[] getUf1cList()
	 * @method \int[] fillUf1c()
	 * @method \string[] getUfInnList()
	 * @method \string[] fillUfInn()
	 * @method \string[] getUfDistrictList()
	 * @method \string[] fillUfDistrict()
	 * @method \string[] getUfSkypeList()
	 * @method \string[] fillUfSkype()
	 * @method \string[] getUfTwitterList()
	 * @method \string[] fillUfTwitter()
	 * @method \string[] getUfFacebookList()
	 * @method \string[] fillUfFacebook()
	 * @method \string[] getUfLinkedinList()
	 * @method \string[] fillUfLinkedin()
	 * @method \string[] getUfXingList()
	 * @method \string[] fillUfXing()
	 * @method \string[] getUfWebSitesList()
	 * @method \string[] fillUfWebSites()
	 * @method \string[] getUfSkillsList()
	 * @method \string[] fillUfSkills()
	 * @method \string[] getUfInterestsList()
	 * @method \string[] fillUfInterests()
	 * @method \string[] getUfWorkBindingList()
	 * @method \string[] fillUfWorkBinding()
	 * @method \Bitrix\Main\Type\DateTime[] getUfBxdavexCalsyncList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUfBxdavexCalsync()
	 * @method \int[] getUfPublicList()
	 * @method \int[] fillUfPublic()
	 * @method \string[] getUfLikesList()
	 * @method \string[] fillUfLikes()
	 * @method \string[] getUfConnectorMd5List()
	 * @method \string[] fillUfConnectorMd5()
	 * @method \string[] getUfViPasswordList()
	 * @method \string[] fillUfViPassword()
	 * @method \string[] getUfViBackphoneList()
	 * @method \string[] fillUfViBackphone()
	 * @method \string[] getUfViPhoneList()
	 * @method \string[] fillUfViPhone()
	 * @method \string[] getUfViPhonePasswordList()
	 * @method \string[] fillUfViPhonePassword()
	 * @method \Bitrix\Main\Type\Date[] getUfEmploymentDateList()
	 * @method \Bitrix\Main\Type\Date[] fillUfEmploymentDate()
	 * @method \string[] getUfRadioTotalLikesList()
	 * @method \string[] fillUfRadioTotalLikes()
	 * @method \string[] getUfRadioBalanceList()
	 * @method \string[] fillUfRadioBalance()
	 * @method \string[] getUfRadioMonthLikesList()
	 * @method \string[] fillUfRadioMonthLikes()
	 * @method \string[] getUfRadioDayLikesList()
	 * @method \string[] fillUfRadioDayLikes()
	 * @method \string[] getUfRadioGiveLikesList()
	 * @method \string[] fillUfRadioGiveLikes()
	 * @method \int[] getUfTimemanList()
	 * @method \int[] fillUfTimeman()
	 * @method \string[] getUfTmMaxStartList()
	 * @method \string[] fillUfTmMaxStart()
	 * @method \string[] getUfTmMinFinishList()
	 * @method \string[] fillUfTmMinFinish()
	 * @method \string[] getUfTmMinDurationList()
	 * @method \string[] fillUfTmMinDuration()
	 * @method \int[] getUfTmReportReqList()
	 * @method \int[] fillUfTmReportReq()
	 * @method \string[] getUfTmReportTplList()
	 * @method \string[] fillUfTmReportTpl()
	 * @method \int[] getUfTmFreeList()
	 * @method \int[] fillUfTmFree()
	 * @method \string[] getUfTmTimeList()
	 * @method \string[] fillUfTmTime()
	 * @method \string[] getUfTmDayList()
	 * @method \string[] fillUfTmDay()
	 * @method \string[] getUfTmReportDateList()
	 * @method \string[] fillUfTmReportDate()
	 * @method \int[] getUfReportPeriodList()
	 * @method \int[] fillUfReportPeriod()
	 * @method \string[] getUfDelayTimeList()
	 * @method \string[] fillUfDelayTime()
	 * @method \string[] getUfLastReportDateList()
	 * @method \string[] fillUfLastReportDate()
	 * @method \string[] getUfSettingDateList()
	 * @method \string[] fillUfSettingDate()
	 * @method \string[] getUfTmAllowedDeltaList()
	 * @method \string[] fillUfTmAllowedDelta()
	 * @method \int[] getUfDepartmentSingleList()
	 * @method \int[] fillUfDepartmentSingle()
	 * @method \string[] getUfTmReportTplSingleList()
	 * @method \string[] fillUfTmReportTplSingle()
	 * @method \Bitrix\Main\EO_UserUts[] getUtsObjectInnerList()
	 * @method \Bitrix\Main\EO_User_Collection getUtsObjectInnerCollection()
	 * @method \Bitrix\Main\EO_UserUts_Collection fillUtsObjectInner()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_User $object)
	 * @method bool has(\Bitrix\Main\EO_User $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_User getByPrimary($primary)
	 * @method \Bitrix\Main\EO_User[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_User $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_User_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_User current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_User_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserTable */
		static public $dataClass = '\Bitrix\Main\UserTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_User_Query query()
	 * @method static EO_User_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_User_Result getById($id)
	 * @method static EO_User_Result getList(array $parameters = array())
	 * @method static EO_User_Entity getEntity()
	 * @method static \Bitrix\Main\EO_User createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_User_Collection createCollection()
	 * @method static \Bitrix\Main\EO_User wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_User_Collection wakeUpCollection($rows)
	 */
	class UserTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_User_Result exec()
	 * @method \Bitrix\Main\EO_User fetchObject()
	 * @method \Bitrix\Main\EO_User_Collection fetchCollection()
	 */
	class EO_User_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_User fetchObject()
	 * @method \Bitrix\Main\EO_User_Collection fetchCollection()
	 */
	class EO_User_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_User createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_User_Collection createCollection()
	 * @method \Bitrix\Main\EO_User wakeUpObject($row)
	 * @method \Bitrix\Main\EO_User_Collection wakeUpCollection($rows)
	 */
	class EO_User_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\TaskTable */
namespace Bitrix\Tasks\Internals {
	/**
	 * EO_Task
	 * @see \Bitrix\Tasks\Internals\TaskTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Tasks\Internals\EO_Task setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetTitle()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getDescription()
	 * @method \Bitrix\Tasks\Internals\EO_Task setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetDescription()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetDescription()
	 * @method \string fillDescription()
	 * @method \boolean getDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Internals\EO_Task setDescriptionInBbcode(\boolean|\Bitrix\Main\DB\SqlExpression $descriptionInBbcode)
	 * @method bool hasDescriptionInBbcode()
	 * @method bool isDescriptionInBbcodeFilled()
	 * @method bool isDescriptionInBbcodeChanged()
	 * @method \boolean remindActualDescriptionInBbcode()
	 * @method \boolean requireDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetDescriptionInBbcode()
	 * @method \boolean fillDescriptionInBbcode()
	 * @method \string getPriority()
	 * @method \Bitrix\Tasks\Internals\EO_Task setPriority(\string|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \string remindActualPriority()
	 * @method \string requirePriority()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetPriority()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetPriority()
	 * @method \string fillPriority()
	 * @method \string getStatus()
	 * @method \Bitrix\Tasks\Internals\EO_Task setStatus(\string|\Bitrix\Main\DB\SqlExpression $status)
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \string remindActualStatus()
	 * @method \string requireStatus()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetStatus()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetStatus()
	 * @method \string fillStatus()
	 * @method \int getStageId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setStageId(\int|\Bitrix\Main\DB\SqlExpression $stageId)
	 * @method bool hasStageId()
	 * @method bool isStageIdFilled()
	 * @method bool isStageIdChanged()
	 * @method \int remindActualStageId()
	 * @method \int requireStageId()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetStageId()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetStageId()
	 * @method \int fillStageId()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetResponsibleId()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime getDateStart()
	 * @method \Bitrix\Tasks\Internals\EO_Task setDateStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateStart)
	 * @method bool hasDateStart()
	 * @method bool isDateStartFilled()
	 * @method bool isDateStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStart()
	 * @method \Bitrix\Main\Type\DateTime requireDateStart()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetDateStart()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetDateStart()
	 * @method \Bitrix\Main\Type\DateTime fillDateStart()
	 * @method \int getDurationPlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task setDurationPlan(\int|\Bitrix\Main\DB\SqlExpression $durationPlan)
	 * @method bool hasDurationPlan()
	 * @method bool isDurationPlanFilled()
	 * @method bool isDurationPlanChanged()
	 * @method \int remindActualDurationPlan()
	 * @method \int requireDurationPlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetDurationPlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetDurationPlan()
	 * @method \int fillDurationPlan()
	 * @method \int getDurationFact()
	 * @method \Bitrix\Tasks\Internals\EO_Task setDurationFact(\int|\Bitrix\Main\DB\SqlExpression $durationFact)
	 * @method bool hasDurationFact()
	 * @method bool isDurationFactFilled()
	 * @method bool isDurationFactChanged()
	 * @method \int remindActualDurationFact()
	 * @method \int requireDurationFact()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetDurationFact()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetDurationFact()
	 * @method \int fillDurationFact()
	 * @method \string getDurationType()
	 * @method \Bitrix\Tasks\Internals\EO_Task setDurationType(\string|\Bitrix\Main\DB\SqlExpression $durationType)
	 * @method bool hasDurationType()
	 * @method bool isDurationTypeFilled()
	 * @method bool isDurationTypeChanged()
	 * @method \string remindActualDurationType()
	 * @method \string requireDurationType()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetDurationType()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetDurationType()
	 * @method \string fillDurationType()
	 * @method \int getTimeEstimate()
	 * @method \Bitrix\Tasks\Internals\EO_Task setTimeEstimate(\int|\Bitrix\Main\DB\SqlExpression $timeEstimate)
	 * @method bool hasTimeEstimate()
	 * @method bool isTimeEstimateFilled()
	 * @method bool isTimeEstimateChanged()
	 * @method \int remindActualTimeEstimate()
	 * @method \int requireTimeEstimate()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetTimeEstimate()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetTimeEstimate()
	 * @method \int fillTimeEstimate()
	 * @method \boolean getReplicate()
	 * @method \Bitrix\Tasks\Internals\EO_Task setReplicate(\boolean|\Bitrix\Main\DB\SqlExpression $replicate)
	 * @method bool hasReplicate()
	 * @method bool isReplicateFilled()
	 * @method bool isReplicateChanged()
	 * @method \boolean remindActualReplicate()
	 * @method \boolean requireReplicate()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetReplicate()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetReplicate()
	 * @method \boolean fillReplicate()
	 * @method \Bitrix\Main\Type\DateTime getDeadline()
	 * @method \Bitrix\Tasks\Internals\EO_Task setDeadline(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $deadline)
	 * @method bool hasDeadline()
	 * @method bool isDeadlineFilled()
	 * @method bool isDeadlineChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDeadline()
	 * @method \Bitrix\Main\Type\DateTime requireDeadline()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetDeadline()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetDeadline()
	 * @method \Bitrix\Main\Type\DateTime fillDeadline()
	 * @method \Bitrix\Main\Type\DateTime getStartDatePlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task setStartDatePlan(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $startDatePlan)
	 * @method bool hasStartDatePlan()
	 * @method bool isStartDatePlanFilled()
	 * @method bool isStartDatePlanChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualStartDatePlan()
	 * @method \Bitrix\Main\Type\DateTime requireStartDatePlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetStartDatePlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetStartDatePlan()
	 * @method \Bitrix\Main\Type\DateTime fillStartDatePlan()
	 * @method \Bitrix\Main\Type\DateTime getEndDatePlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task setEndDatePlan(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $endDatePlan)
	 * @method bool hasEndDatePlan()
	 * @method bool isEndDatePlanFilled()
	 * @method bool isEndDatePlanChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualEndDatePlan()
	 * @method \Bitrix\Main\Type\DateTime requireEndDatePlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetEndDatePlan()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetEndDatePlan()
	 * @method \Bitrix\Main\Type\DateTime fillEndDatePlan()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetCreatedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \Bitrix\Main\Type\DateTime getCreatedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task setCreatedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetCreatedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetCreatedDate()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedDate()
	 * @method \int getChangedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task setChangedBy(\int|\Bitrix\Main\DB\SqlExpression $changedBy)
	 * @method bool hasChangedBy()
	 * @method bool isChangedByFilled()
	 * @method bool isChangedByChanged()
	 * @method \int remindActualChangedBy()
	 * @method \int requireChangedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetChangedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetChangedBy()
	 * @method \int fillChangedBy()
	 * @method \Bitrix\Main\Type\DateTime getChangedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task setChangedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $changedDate)
	 * @method bool hasChangedDate()
	 * @method bool isChangedDateFilled()
	 * @method bool isChangedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualChangedDate()
	 * @method \Bitrix\Main\Type\DateTime requireChangedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetChangedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetChangedDate()
	 * @method \Bitrix\Main\Type\DateTime fillChangedDate()
	 * @method \int getStatusChangedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task setStatusChangedBy(\int|\Bitrix\Main\DB\SqlExpression $statusChangedBy)
	 * @method bool hasStatusChangedBy()
	 * @method bool isStatusChangedByFilled()
	 * @method bool isStatusChangedByChanged()
	 * @method \int remindActualStatusChangedBy()
	 * @method \int requireStatusChangedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetStatusChangedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetStatusChangedBy()
	 * @method \int fillStatusChangedBy()
	 * @method \Bitrix\Main\Type\DateTime getStatusChangedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task setStatusChangedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $statusChangedDate)
	 * @method bool hasStatusChangedDate()
	 * @method bool isStatusChangedDateFilled()
	 * @method bool isStatusChangedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualStatusChangedDate()
	 * @method \Bitrix\Main\Type\DateTime requireStatusChangedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetStatusChangedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetStatusChangedDate()
	 * @method \Bitrix\Main\Type\DateTime fillStatusChangedDate()
	 * @method \int getClosedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task setClosedBy(\int|\Bitrix\Main\DB\SqlExpression $closedBy)
	 * @method bool hasClosedBy()
	 * @method bool isClosedByFilled()
	 * @method bool isClosedByChanged()
	 * @method \int remindActualClosedBy()
	 * @method \int requireClosedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetClosedBy()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetClosedBy()
	 * @method \int fillClosedBy()
	 * @method \Bitrix\Main\Type\DateTime getClosedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task setClosedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $closedDate)
	 * @method bool hasClosedDate()
	 * @method bool isClosedDateFilled()
	 * @method bool isClosedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualClosedDate()
	 * @method \Bitrix\Main\Type\DateTime requireClosedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetClosedDate()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetClosedDate()
	 * @method \Bitrix\Main\Type\DateTime fillClosedDate()
	 * @method \string getGuid()
	 * @method \Bitrix\Tasks\Internals\EO_Task setGuid(\string|\Bitrix\Main\DB\SqlExpression $guid)
	 * @method bool hasGuid()
	 * @method bool isGuidFilled()
	 * @method bool isGuidChanged()
	 * @method \string remindActualGuid()
	 * @method \string requireGuid()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetGuid()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetGuid()
	 * @method \string fillGuid()
	 * @method \string getXmlId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetXmlId()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getMark()
	 * @method \Bitrix\Tasks\Internals\EO_Task setMark(\string|\Bitrix\Main\DB\SqlExpression $mark)
	 * @method bool hasMark()
	 * @method bool isMarkFilled()
	 * @method bool isMarkChanged()
	 * @method \string remindActualMark()
	 * @method \string requireMark()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetMark()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetMark()
	 * @method \string fillMark()
	 * @method \boolean getAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Internals\EO_Task setAllowChangeDeadline(\boolean|\Bitrix\Main\DB\SqlExpression $allowChangeDeadline)
	 * @method bool hasAllowChangeDeadline()
	 * @method bool isAllowChangeDeadlineFilled()
	 * @method bool isAllowChangeDeadlineChanged()
	 * @method \boolean remindActualAllowChangeDeadline()
	 * @method \boolean requireAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetAllowChangeDeadline()
	 * @method \boolean fillAllowChangeDeadline()
	 * @method \boolean getAllowTimeTracking()
	 * @method \Bitrix\Tasks\Internals\EO_Task setAllowTimeTracking(\boolean|\Bitrix\Main\DB\SqlExpression $allowTimeTracking)
	 * @method bool hasAllowTimeTracking()
	 * @method bool isAllowTimeTrackingFilled()
	 * @method bool isAllowTimeTrackingChanged()
	 * @method \boolean remindActualAllowTimeTracking()
	 * @method \boolean requireAllowTimeTracking()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetAllowTimeTracking()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetAllowTimeTracking()
	 * @method \boolean fillAllowTimeTracking()
	 * @method \boolean getTaskControl()
	 * @method \Bitrix\Tasks\Internals\EO_Task setTaskControl(\boolean|\Bitrix\Main\DB\SqlExpression $taskControl)
	 * @method bool hasTaskControl()
	 * @method bool isTaskControlFilled()
	 * @method bool isTaskControlChanged()
	 * @method \boolean remindActualTaskControl()
	 * @method \boolean requireTaskControl()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetTaskControl()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetTaskControl()
	 * @method \boolean fillTaskControl()
	 * @method \boolean getAddInReport()
	 * @method \Bitrix\Tasks\Internals\EO_Task setAddInReport(\boolean|\Bitrix\Main\DB\SqlExpression $addInReport)
	 * @method bool hasAddInReport()
	 * @method bool isAddInReportFilled()
	 * @method bool isAddInReportChanged()
	 * @method \boolean remindActualAddInReport()
	 * @method \boolean requireAddInReport()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetAddInReport()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetAddInReport()
	 * @method \boolean fillAddInReport()
	 * @method \int getGroupId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetGroupId()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetGroupId()
	 * @method \int fillGroupId()
	 * @method \int getParentId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetParentId()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetParentId()
	 * @method \int fillParentId()
	 * @method \int getForumTopicId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setForumTopicId(\int|\Bitrix\Main\DB\SqlExpression $forumTopicId)
	 * @method bool hasForumTopicId()
	 * @method bool isForumTopicIdFilled()
	 * @method bool isForumTopicIdChanged()
	 * @method \int remindActualForumTopicId()
	 * @method \int requireForumTopicId()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetForumTopicId()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetForumTopicId()
	 * @method \int fillForumTopicId()
	 * @method \boolean getMultitask()
	 * @method \Bitrix\Tasks\Internals\EO_Task setMultitask(\boolean|\Bitrix\Main\DB\SqlExpression $multitask)
	 * @method bool hasMultitask()
	 * @method bool isMultitaskFilled()
	 * @method bool isMultitaskChanged()
	 * @method \boolean remindActualMultitask()
	 * @method \boolean requireMultitask()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetMultitask()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetMultitask()
	 * @method \boolean fillMultitask()
	 * @method \string getSiteId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \string remindActualSiteId()
	 * @method \string requireSiteId()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetSiteId()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetSiteId()
	 * @method \string fillSiteId()
	 * @method \int getForkedByTemplateId()
	 * @method \Bitrix\Tasks\Internals\EO_Task setForkedByTemplateId(\int|\Bitrix\Main\DB\SqlExpression $forkedByTemplateId)
	 * @method bool hasForkedByTemplateId()
	 * @method bool isForkedByTemplateIdFilled()
	 * @method bool isForkedByTemplateIdChanged()
	 * @method \int remindActualForkedByTemplateId()
	 * @method \int requireForkedByTemplateId()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetForkedByTemplateId()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetForkedByTemplateId()
	 * @method \int fillForkedByTemplateId()
	 * @method \boolean getZombie()
	 * @method \Bitrix\Tasks\Internals\EO_Task setZombie(\boolean|\Bitrix\Main\DB\SqlExpression $zombie)
	 * @method bool hasZombie()
	 * @method bool isZombieFilled()
	 * @method bool isZombieChanged()
	 * @method \boolean remindActualZombie()
	 * @method \boolean requireZombie()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetZombie()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetZombie()
	 * @method \boolean fillZombie()
	 * @method \boolean getMatchWorkTime()
	 * @method \Bitrix\Tasks\Internals\EO_Task setMatchWorkTime(\boolean|\Bitrix\Main\DB\SqlExpression $matchWorkTime)
	 * @method bool hasMatchWorkTime()
	 * @method bool isMatchWorkTimeFilled()
	 * @method bool isMatchWorkTimeChanged()
	 * @method \boolean remindActualMatchWorkTime()
	 * @method \boolean requireMatchWorkTime()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetMatchWorkTime()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetMatchWorkTime()
	 * @method \boolean fillMatchWorkTime()
	 * @method \Bitrix\Main\EO_User getCreator()
	 * @method \Bitrix\Main\EO_User remindActualCreator()
	 * @method \Bitrix\Main\EO_User requireCreator()
	 * @method \Bitrix\Tasks\Internals\EO_Task setCreator(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Internals\EO_Task resetCreator()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetCreator()
	 * @method bool hasCreator()
	 * @method bool isCreatorFilled()
	 * @method bool isCreatorChanged()
	 * @method \Bitrix\Main\EO_User fillCreator()
	 * @method \Bitrix\Main\EO_User getResponsible()
	 * @method \Bitrix\Main\EO_User remindActualResponsible()
	 * @method \Bitrix\Main\EO_User requireResponsible()
	 * @method \Bitrix\Tasks\Internals\EO_Task setResponsible(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Internals\EO_Task resetResponsible()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetResponsible()
	 * @method bool hasResponsible()
	 * @method bool isResponsibleFilled()
	 * @method bool isResponsibleChanged()
	 * @method \Bitrix\Main\EO_User fillResponsible()
	 * @method \Bitrix\Tasks\Internals\EO_Task getParent()
	 * @method \Bitrix\Tasks\Internals\EO_Task remindActualParent()
	 * @method \Bitrix\Tasks\Internals\EO_Task requireParent()
	 * @method \Bitrix\Tasks\Internals\EO_Task setParent(\Bitrix\Tasks\Internals\EO_Task $object)
	 * @method \Bitrix\Tasks\Internals\EO_Task resetParent()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetParent()
	 * @method bool hasParent()
	 * @method bool isParentFilled()
	 * @method bool isParentChanged()
	 * @method \Bitrix\Tasks\Internals\EO_Task fillParent()
	 * @method \Bitrix\Main\EO_Site getSite()
	 * @method \Bitrix\Main\EO_Site remindActualSite()
	 * @method \Bitrix\Main\EO_Site requireSite()
	 * @method \Bitrix\Tasks\Internals\EO_Task setSite(\Bitrix\Main\EO_Site $object)
	 * @method \Bitrix\Tasks\Internals\EO_Task resetSite()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetSite()
	 * @method bool hasSite()
	 * @method bool isSiteFilled()
	 * @method bool isSiteChanged()
	 * @method \Bitrix\Main\EO_Site fillSite()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member getMembers()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member remindActualMembers()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member requireMembers()
	 * @method \Bitrix\Tasks\Internals\EO_Task setMembers(\Bitrix\Tasks\Internals\Task\EO_Member $object)
	 * @method \Bitrix\Tasks\Internals\EO_Task resetMembers()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetMembers()
	 * @method bool hasMembers()
	 * @method bool isMembersFilled()
	 * @method bool isMembersChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member fillMembers()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup getGroup()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup remindActualGroup()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup requireGroup()
	 * @method \Bitrix\Tasks\Internals\EO_Task setGroup(\Bitrix\Socialnetwork\EO_Workgroup $object)
	 * @method \Bitrix\Tasks\Internals\EO_Task resetGroup()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup fillGroup()
	 * @method \int getOutlookVersion()
	 * @method \Bitrix\Tasks\Internals\EO_Task setOutlookVersion(\int|\Bitrix\Main\DB\SqlExpression $outlookVersion)
	 * @method bool hasOutlookVersion()
	 * @method bool isOutlookVersionFilled()
	 * @method bool isOutlookVersionChanged()
	 * @method \int remindActualOutlookVersion()
	 * @method \int requireOutlookVersion()
	 * @method \Bitrix\Tasks\Internals\EO_Task resetOutlookVersion()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetOutlookVersion()
	 * @method \int fillOutlookVersion()
	 * @method \Bitrix\Tasks\Internals\EO_TaskUts getUtsObject()
	 * @method \Bitrix\Tasks\Internals\EO_TaskUts remindActualUtsObject()
	 * @method \Bitrix\Tasks\Internals\EO_TaskUts requireUtsObject()
	 * @method \Bitrix\Tasks\Internals\EO_Task setUtsObject(\Bitrix\Tasks\Internals\EO_TaskUts $object)
	 * @method \Bitrix\Tasks\Internals\EO_Task resetUtsObject()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetUtsObject()
	 * @method bool hasUtsObject()
	 * @method bool isUtsObjectFilled()
	 * @method bool isUtsObjectChanged()
	 * @method \Bitrix\Tasks\Internals\EO_TaskUts fillUtsObject()
	 * @method \string getUfCrmTask()
	 * @method \string remindActualUfCrmTask()
	 * @method \string requireUfCrmTask()
	 * @method bool hasUfCrmTask()
	 * @method bool isUfCrmTaskFilled()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetUfCrmTask()
	 * @method \string fillUfCrmTask()
	 * @method \Bitrix\Tasks\Internals\EO_Task setUfCrmTask(\string[] $ufCrmTask)
	 * @method bool isUfCrmTaskChanged()
	 * @method \string getUfTaskWebdavFiles()
	 * @method \string remindActualUfTaskWebdavFiles()
	 * @method \string requireUfTaskWebdavFiles()
	 * @method bool hasUfTaskWebdavFiles()
	 * @method bool isUfTaskWebdavFilesFilled()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetUfTaskWebdavFiles()
	 * @method \string fillUfTaskWebdavFiles()
	 * @method \Bitrix\Tasks\Internals\EO_Task setUfTaskWebdavFiles(\string[] $ufTaskWebdavFiles)
	 * @method bool isUfTaskWebdavFilesChanged()
	 * @method \int getUfMailMessage()
	 * @method \int remindActualUfMailMessage()
	 * @method \int requireUfMailMessage()
	 * @method bool hasUfMailMessage()
	 * @method bool isUfMailMessageFilled()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetUfMailMessage()
	 * @method \int fillUfMailMessage()
	 * @method \Bitrix\Tasks\Internals\EO_Task setUfMailMessage(\int $ufMailMessage)
	 * @method bool isUfMailMessageChanged()
	 * @method \float getUfAuto508830788999()
	 * @method \float remindActualUfAuto508830788999()
	 * @method \float requireUfAuto508830788999()
	 * @method bool hasUfAuto508830788999()
	 * @method bool isUfAuto508830788999Filled()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetUfAuto508830788999()
	 * @method \float fillUfAuto508830788999()
	 * @method \Bitrix\Tasks\Internals\EO_Task setUfAuto508830788999(\float $ufAuto508830788999)
	 * @method bool isUfAuto508830788999Changed()
	 * @method \string getUfCrmTaskSingle()
	 * @method \string remindActualUfCrmTaskSingle()
	 * @method \string requireUfCrmTaskSingle()
	 * @method bool hasUfCrmTaskSingle()
	 * @method bool isUfCrmTaskSingleFilled()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetUfCrmTaskSingle()
	 * @method \string fillUfCrmTaskSingle()
	 * @method \int getUfTaskWebdavFilesSingle()
	 * @method \int remindActualUfTaskWebdavFilesSingle()
	 * @method \int requireUfTaskWebdavFilesSingle()
	 * @method bool hasUfTaskWebdavFilesSingle()
	 * @method bool isUfTaskWebdavFilesSingleFilled()
	 * @method \Bitrix\Tasks\Internals\EO_Task unsetUfTaskWebdavFilesSingle()
	 * @method \int fillUfTaskWebdavFilesSingle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\EO_Task set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\EO_Task reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\EO_Task unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\EO_Task wakeUp($data)
	 */
	class EO_Task {
		/* @var \Bitrix\Tasks\Internals\TaskTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\TaskTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals {
	/**
	 * EO_Task_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \boolean[] getDescriptionInBbcodeList()
	 * @method \boolean[] fillDescriptionInBbcode()
	 * @method \string[] getPriorityList()
	 * @method \string[] fillPriority()
	 * @method \string[] getStatusList()
	 * @method \string[] fillStatus()
	 * @method \int[] getStageIdList()
	 * @method \int[] fillStageId()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStart()
	 * @method \int[] getDurationPlanList()
	 * @method \int[] fillDurationPlan()
	 * @method \int[] getDurationFactList()
	 * @method \int[] fillDurationFact()
	 * @method \string[] getDurationTypeList()
	 * @method \string[] fillDurationType()
	 * @method \int[] getTimeEstimateList()
	 * @method \int[] fillTimeEstimate()
	 * @method \boolean[] getReplicateList()
	 * @method \boolean[] fillReplicate()
	 * @method \Bitrix\Main\Type\DateTime[] getDeadlineList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDeadline()
	 * @method \Bitrix\Main\Type\DateTime[] getStartDatePlanList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStartDatePlan()
	 * @method \Bitrix\Main\Type\DateTime[] getEndDatePlanList()
	 * @method \Bitrix\Main\Type\DateTime[] fillEndDatePlan()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedDate()
	 * @method \int[] getChangedByList()
	 * @method \int[] fillChangedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getChangedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillChangedDate()
	 * @method \int[] getStatusChangedByList()
	 * @method \int[] fillStatusChangedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getStatusChangedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStatusChangedDate()
	 * @method \int[] getClosedByList()
	 * @method \int[] fillClosedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getClosedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillClosedDate()
	 * @method \string[] getGuidList()
	 * @method \string[] fillGuid()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getMarkList()
	 * @method \string[] fillMark()
	 * @method \boolean[] getAllowChangeDeadlineList()
	 * @method \boolean[] fillAllowChangeDeadline()
	 * @method \boolean[] getAllowTimeTrackingList()
	 * @method \boolean[] fillAllowTimeTracking()
	 * @method \boolean[] getTaskControlList()
	 * @method \boolean[] fillTaskControl()
	 * @method \boolean[] getAddInReportList()
	 * @method \boolean[] fillAddInReport()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \int[] getForumTopicIdList()
	 * @method \int[] fillForumTopicId()
	 * @method \boolean[] getMultitaskList()
	 * @method \boolean[] fillMultitask()
	 * @method \string[] getSiteIdList()
	 * @method \string[] fillSiteId()
	 * @method \int[] getForkedByTemplateIdList()
	 * @method \int[] fillForkedByTemplateId()
	 * @method \boolean[] getZombieList()
	 * @method \boolean[] fillZombie()
	 * @method \boolean[] getMatchWorkTimeList()
	 * @method \boolean[] fillMatchWorkTime()
	 * @method \Bitrix\Main\EO_User[] getCreatorList()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection getCreatorCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreator()
	 * @method \Bitrix\Main\EO_User[] getResponsibleList()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection getResponsibleCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsible()
	 * @method \Bitrix\Tasks\Internals\EO_Task[] getParentList()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection getParentCollection()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection fillParent()
	 * @method \Bitrix\Main\EO_Site[] getSiteList()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection getSiteCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSite()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member[] getMembersList()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection getMembersCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member_Collection fillMembers()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup[] getGroupList()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection getGroupCollection()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup_Collection fillGroup()
	 * @method \int[] getOutlookVersionList()
	 * @method \int[] fillOutlookVersion()
	 * @method \Bitrix\Tasks\Internals\EO_TaskUts[] getUtsObjectList()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection getUtsObjectCollection()
	 * @method \Bitrix\Tasks\Internals\EO_TaskUts_Collection fillUtsObject()
	 * @method \string[] getUfCrmTaskList()
	 * @method \string[] fillUfCrmTask()
	 * @method \string[] getUfTaskWebdavFilesList()
	 * @method \string[] fillUfTaskWebdavFiles()
	 * @method \int[] getUfMailMessageList()
	 * @method \int[] fillUfMailMessage()
	 * @method \float[] getUfAuto508830788999List()
	 * @method \float[] fillUfAuto508830788999()
	 * @method \string[] getUfCrmTaskSingleList()
	 * @method \string[] fillUfCrmTaskSingle()
	 * @method \int[] getUfTaskWebdavFilesSingleList()
	 * @method \int[] fillUfTaskWebdavFilesSingle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\EO_Task $object)
	 * @method bool has(\Bitrix\Tasks\Internals\EO_Task $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\EO_Task getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\EO_Task[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\EO_Task $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\EO_Task_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\EO_Task current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Task_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\TaskTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\TaskTable';
	}
}
namespace Bitrix\Tasks\Internals {
	/**
	 * @method static EO_Task_Query query()
	 * @method static EO_Task_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Task_Result getById($id)
	 * @method static EO_Task_Result getList(array $parameters = array())
	 * @method static EO_Task_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\EO_Task createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\EO_Task_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\EO_Task wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\EO_Task_Collection wakeUpCollection($rows)
	 */
	class TaskTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Task_Result exec()
	 * @method \Bitrix\Tasks\Internals\EO_Task fetchObject()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection fetchCollection()
	 */
	class EO_Task_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\EO_Task fetchObject()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection fetchCollection()
	 */
	class EO_Task_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\EO_Task createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\EO_Task wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection wakeUpCollection($rows)
	 */
	class EO_Task_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Integration\Report\Internals\TaskTable */
namespace Bitrix\Tasks\Integration\Report\Internals {
	/**
	 * EO_Task
	 * @see \Bitrix\Tasks\Integration\Report\Internals\TaskTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetTitle()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getDescription()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDescription()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDescription()
	 * @method \string fillDescription()
	 * @method \boolean getDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDescriptionInBbcode(\boolean|\Bitrix\Main\DB\SqlExpression $descriptionInBbcode)
	 * @method bool hasDescriptionInBbcode()
	 * @method bool isDescriptionInBbcodeFilled()
	 * @method bool isDescriptionInBbcodeChanged()
	 * @method \boolean remindActualDescriptionInBbcode()
	 * @method \boolean requireDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDescriptionInBbcode()
	 * @method \boolean fillDescriptionInBbcode()
	 * @method \string getPriority()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setPriority(\string|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \string remindActualPriority()
	 * @method \string requirePriority()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetPriority()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetPriority()
	 * @method \string fillPriority()
	 * @method \string getStatus()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setStatus(\string|\Bitrix\Main\DB\SqlExpression $status)
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \string remindActualStatus()
	 * @method \string requireStatus()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetStatus()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetStatus()
	 * @method \string fillStatus()
	 * @method \int getStageId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setStageId(\int|\Bitrix\Main\DB\SqlExpression $stageId)
	 * @method bool hasStageId()
	 * @method bool isStageIdFilled()
	 * @method bool isStageIdChanged()
	 * @method \int remindActualStageId()
	 * @method \int requireStageId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetStageId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetStageId()
	 * @method \int fillStageId()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetResponsibleId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime getDateStart()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDateStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateStart)
	 * @method bool hasDateStart()
	 * @method bool isDateStartFilled()
	 * @method bool isDateStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStart()
	 * @method \Bitrix\Main\Type\DateTime requireDateStart()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDateStart()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDateStart()
	 * @method \Bitrix\Main\Type\DateTime fillDateStart()
	 * @method \int getDurationPlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDurationPlan(\int|\Bitrix\Main\DB\SqlExpression $durationPlan)
	 * @method bool hasDurationPlan()
	 * @method bool isDurationPlanFilled()
	 * @method bool isDurationPlanChanged()
	 * @method \int remindActualDurationPlan()
	 * @method \int requireDurationPlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDurationPlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDurationPlan()
	 * @method \int fillDurationPlan()
	 * @method \int getDurationFact()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDurationFact(\int|\Bitrix\Main\DB\SqlExpression $durationFact)
	 * @method bool hasDurationFact()
	 * @method bool isDurationFactFilled()
	 * @method bool isDurationFactChanged()
	 * @method \int remindActualDurationFact()
	 * @method \int requireDurationFact()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDurationFact()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDurationFact()
	 * @method \int fillDurationFact()
	 * @method \string getDurationType()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDurationType(\string|\Bitrix\Main\DB\SqlExpression $durationType)
	 * @method bool hasDurationType()
	 * @method bool isDurationTypeFilled()
	 * @method bool isDurationTypeChanged()
	 * @method \string remindActualDurationType()
	 * @method \string requireDurationType()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDurationType()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDurationType()
	 * @method \string fillDurationType()
	 * @method \int getTimeEstimate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setTimeEstimate(\int|\Bitrix\Main\DB\SqlExpression $timeEstimate)
	 * @method bool hasTimeEstimate()
	 * @method bool isTimeEstimateFilled()
	 * @method bool isTimeEstimateChanged()
	 * @method \int remindActualTimeEstimate()
	 * @method \int requireTimeEstimate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetTimeEstimate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetTimeEstimate()
	 * @method \int fillTimeEstimate()
	 * @method \boolean getReplicate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setReplicate(\boolean|\Bitrix\Main\DB\SqlExpression $replicate)
	 * @method bool hasReplicate()
	 * @method bool isReplicateFilled()
	 * @method bool isReplicateChanged()
	 * @method \boolean remindActualReplicate()
	 * @method \boolean requireReplicate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetReplicate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetReplicate()
	 * @method \boolean fillReplicate()
	 * @method \Bitrix\Main\Type\DateTime getDeadline()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDeadline(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $deadline)
	 * @method bool hasDeadline()
	 * @method bool isDeadlineFilled()
	 * @method bool isDeadlineChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDeadline()
	 * @method \Bitrix\Main\Type\DateTime requireDeadline()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDeadline()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDeadline()
	 * @method \Bitrix\Main\Type\DateTime fillDeadline()
	 * @method \Bitrix\Main\Type\DateTime getStartDatePlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setStartDatePlan(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $startDatePlan)
	 * @method bool hasStartDatePlan()
	 * @method bool isStartDatePlanFilled()
	 * @method bool isStartDatePlanChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualStartDatePlan()
	 * @method \Bitrix\Main\Type\DateTime requireStartDatePlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetStartDatePlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetStartDatePlan()
	 * @method \Bitrix\Main\Type\DateTime fillStartDatePlan()
	 * @method \Bitrix\Main\Type\DateTime getEndDatePlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setEndDatePlan(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $endDatePlan)
	 * @method bool hasEndDatePlan()
	 * @method bool isEndDatePlanFilled()
	 * @method bool isEndDatePlanChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualEndDatePlan()
	 * @method \Bitrix\Main\Type\DateTime requireEndDatePlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetEndDatePlan()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetEndDatePlan()
	 * @method \Bitrix\Main\Type\DateTime fillEndDatePlan()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetCreatedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \Bitrix\Main\Type\DateTime getCreatedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setCreatedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetCreatedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetCreatedDate()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedDate()
	 * @method \int getChangedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setChangedBy(\int|\Bitrix\Main\DB\SqlExpression $changedBy)
	 * @method bool hasChangedBy()
	 * @method bool isChangedByFilled()
	 * @method bool isChangedByChanged()
	 * @method \int remindActualChangedBy()
	 * @method \int requireChangedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetChangedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetChangedBy()
	 * @method \int fillChangedBy()
	 * @method \Bitrix\Main\Type\DateTime getChangedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setChangedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $changedDate)
	 * @method bool hasChangedDate()
	 * @method bool isChangedDateFilled()
	 * @method bool isChangedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualChangedDate()
	 * @method \Bitrix\Main\Type\DateTime requireChangedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetChangedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetChangedDate()
	 * @method \Bitrix\Main\Type\DateTime fillChangedDate()
	 * @method \int getStatusChangedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setStatusChangedBy(\int|\Bitrix\Main\DB\SqlExpression $statusChangedBy)
	 * @method bool hasStatusChangedBy()
	 * @method bool isStatusChangedByFilled()
	 * @method bool isStatusChangedByChanged()
	 * @method \int remindActualStatusChangedBy()
	 * @method \int requireStatusChangedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetStatusChangedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetStatusChangedBy()
	 * @method \int fillStatusChangedBy()
	 * @method \Bitrix\Main\Type\DateTime getStatusChangedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setStatusChangedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $statusChangedDate)
	 * @method bool hasStatusChangedDate()
	 * @method bool isStatusChangedDateFilled()
	 * @method bool isStatusChangedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualStatusChangedDate()
	 * @method \Bitrix\Main\Type\DateTime requireStatusChangedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetStatusChangedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetStatusChangedDate()
	 * @method \Bitrix\Main\Type\DateTime fillStatusChangedDate()
	 * @method \int getClosedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setClosedBy(\int|\Bitrix\Main\DB\SqlExpression $closedBy)
	 * @method bool hasClosedBy()
	 * @method bool isClosedByFilled()
	 * @method bool isClosedByChanged()
	 * @method \int remindActualClosedBy()
	 * @method \int requireClosedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetClosedBy()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetClosedBy()
	 * @method \int fillClosedBy()
	 * @method \Bitrix\Main\Type\DateTime getClosedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setClosedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $closedDate)
	 * @method bool hasClosedDate()
	 * @method bool isClosedDateFilled()
	 * @method bool isClosedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualClosedDate()
	 * @method \Bitrix\Main\Type\DateTime requireClosedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetClosedDate()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetClosedDate()
	 * @method \Bitrix\Main\Type\DateTime fillClosedDate()
	 * @method \string getGuid()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setGuid(\string|\Bitrix\Main\DB\SqlExpression $guid)
	 * @method bool hasGuid()
	 * @method bool isGuidFilled()
	 * @method bool isGuidChanged()
	 * @method \string remindActualGuid()
	 * @method \string requireGuid()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetGuid()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetGuid()
	 * @method \string fillGuid()
	 * @method \string getXmlId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetXmlId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getMark()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setMark(\string|\Bitrix\Main\DB\SqlExpression $mark)
	 * @method bool hasMark()
	 * @method bool isMarkFilled()
	 * @method bool isMarkChanged()
	 * @method \string remindActualMark()
	 * @method \string requireMark()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetMark()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetMark()
	 * @method \string fillMark()
	 * @method \boolean getAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setAllowChangeDeadline(\boolean|\Bitrix\Main\DB\SqlExpression $allowChangeDeadline)
	 * @method bool hasAllowChangeDeadline()
	 * @method bool isAllowChangeDeadlineFilled()
	 * @method bool isAllowChangeDeadlineChanged()
	 * @method \boolean remindActualAllowChangeDeadline()
	 * @method \boolean requireAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetAllowChangeDeadline()
	 * @method \boolean fillAllowChangeDeadline()
	 * @method \boolean getAllowTimeTracking()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setAllowTimeTracking(\boolean|\Bitrix\Main\DB\SqlExpression $allowTimeTracking)
	 * @method bool hasAllowTimeTracking()
	 * @method bool isAllowTimeTrackingFilled()
	 * @method bool isAllowTimeTrackingChanged()
	 * @method \boolean remindActualAllowTimeTracking()
	 * @method \boolean requireAllowTimeTracking()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetAllowTimeTracking()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetAllowTimeTracking()
	 * @method \boolean fillAllowTimeTracking()
	 * @method \boolean getTaskControl()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setTaskControl(\boolean|\Bitrix\Main\DB\SqlExpression $taskControl)
	 * @method bool hasTaskControl()
	 * @method bool isTaskControlFilled()
	 * @method bool isTaskControlChanged()
	 * @method \boolean remindActualTaskControl()
	 * @method \boolean requireTaskControl()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetTaskControl()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetTaskControl()
	 * @method \boolean fillTaskControl()
	 * @method \boolean getAddInReport()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setAddInReport(\boolean|\Bitrix\Main\DB\SqlExpression $addInReport)
	 * @method bool hasAddInReport()
	 * @method bool isAddInReportFilled()
	 * @method bool isAddInReportChanged()
	 * @method \boolean remindActualAddInReport()
	 * @method \boolean requireAddInReport()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetAddInReport()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetAddInReport()
	 * @method \boolean fillAddInReport()
	 * @method \int getGroupId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetGroupId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetGroupId()
	 * @method \int fillGroupId()
	 * @method \int getParentId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetParentId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetParentId()
	 * @method \int fillParentId()
	 * @method \int getForumTopicId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setForumTopicId(\int|\Bitrix\Main\DB\SqlExpression $forumTopicId)
	 * @method bool hasForumTopicId()
	 * @method bool isForumTopicIdFilled()
	 * @method bool isForumTopicIdChanged()
	 * @method \int remindActualForumTopicId()
	 * @method \int requireForumTopicId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetForumTopicId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetForumTopicId()
	 * @method \int fillForumTopicId()
	 * @method \boolean getMultitask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setMultitask(\boolean|\Bitrix\Main\DB\SqlExpression $multitask)
	 * @method bool hasMultitask()
	 * @method bool isMultitaskFilled()
	 * @method bool isMultitaskChanged()
	 * @method \boolean remindActualMultitask()
	 * @method \boolean requireMultitask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetMultitask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetMultitask()
	 * @method \boolean fillMultitask()
	 * @method \string getSiteId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \string remindActualSiteId()
	 * @method \string requireSiteId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetSiteId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetSiteId()
	 * @method \string fillSiteId()
	 * @method \int getForkedByTemplateId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setForkedByTemplateId(\int|\Bitrix\Main\DB\SqlExpression $forkedByTemplateId)
	 * @method bool hasForkedByTemplateId()
	 * @method bool isForkedByTemplateIdFilled()
	 * @method bool isForkedByTemplateIdChanged()
	 * @method \int remindActualForkedByTemplateId()
	 * @method \int requireForkedByTemplateId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetForkedByTemplateId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetForkedByTemplateId()
	 * @method \int fillForkedByTemplateId()
	 * @method \boolean getZombie()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setZombie(\boolean|\Bitrix\Main\DB\SqlExpression $zombie)
	 * @method bool hasZombie()
	 * @method bool isZombieFilled()
	 * @method bool isZombieChanged()
	 * @method \boolean remindActualZombie()
	 * @method \boolean requireZombie()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetZombie()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetZombie()
	 * @method \boolean fillZombie()
	 * @method \boolean getMatchWorkTime()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setMatchWorkTime(\boolean|\Bitrix\Main\DB\SqlExpression $matchWorkTime)
	 * @method bool hasMatchWorkTime()
	 * @method bool isMatchWorkTimeFilled()
	 * @method bool isMatchWorkTimeChanged()
	 * @method \boolean remindActualMatchWorkTime()
	 * @method \boolean requireMatchWorkTime()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetMatchWorkTime()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetMatchWorkTime()
	 * @method \boolean fillMatchWorkTime()
	 * @method \Bitrix\Main\EO_User getCreator()
	 * @method \Bitrix\Main\EO_User remindActualCreator()
	 * @method \Bitrix\Main\EO_User requireCreator()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setCreator(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetCreator()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetCreator()
	 * @method bool hasCreator()
	 * @method bool isCreatorFilled()
	 * @method bool isCreatorChanged()
	 * @method \Bitrix\Main\EO_User fillCreator()
	 * @method \Bitrix\Main\EO_User getResponsible()
	 * @method \Bitrix\Main\EO_User remindActualResponsible()
	 * @method \Bitrix\Main\EO_User requireResponsible()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setResponsible(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetResponsible()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetResponsible()
	 * @method bool hasResponsible()
	 * @method bool isResponsibleFilled()
	 * @method bool isResponsibleChanged()
	 * @method \Bitrix\Main\EO_User fillResponsible()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task getParent()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task remindActualParent()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task requireParent()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setParent(\Bitrix\Tasks\Integration\Report\Internals\EO_Task $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetParent()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetParent()
	 * @method bool hasParent()
	 * @method bool isParentFilled()
	 * @method bool isParentChanged()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task fillParent()
	 * @method \Bitrix\Main\EO_Site getSite()
	 * @method \Bitrix\Main\EO_Site remindActualSite()
	 * @method \Bitrix\Main\EO_Site requireSite()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setSite(\Bitrix\Main\EO_Site $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetSite()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetSite()
	 * @method bool hasSite()
	 * @method bool isSiteFilled()
	 * @method bool isSiteChanged()
	 * @method \Bitrix\Main\EO_Site fillSite()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member getMembers()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member remindActualMembers()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member requireMembers()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setMembers(\Bitrix\Tasks\Internals\Task\EO_Member $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetMembers()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetMembers()
	 * @method bool hasMembers()
	 * @method bool isMembersFilled()
	 * @method bool isMembersChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member fillMembers()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup getGroup()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup remindActualGroup()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup requireGroup()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setGroup(\Bitrix\Socialnetwork\EO_Workgroup $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetGroup()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup fillGroup()
	 * @method \int getOutlookVersion()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setOutlookVersion(\int|\Bitrix\Main\DB\SqlExpression $outlookVersion)
	 * @method bool hasOutlookVersion()
	 * @method bool isOutlookVersionFilled()
	 * @method bool isOutlookVersionChanged()
	 * @method \int remindActualOutlookVersion()
	 * @method \int requireOutlookVersion()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetOutlookVersion()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetOutlookVersion()
	 * @method \int fillOutlookVersion()
	 * @method \string getDescriptionTr()
	 * @method \string remindActualDescriptionTr()
	 * @method \string requireDescriptionTr()
	 * @method bool hasDescriptionTr()
	 * @method bool isDescriptionTrFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDescriptionTr()
	 * @method \string fillDescriptionTr()
	 * @method \string getStatusPseudo()
	 * @method \string remindActualStatusPseudo()
	 * @method \string requireStatusPseudo()
	 * @method bool hasStatusPseudo()
	 * @method bool isStatusPseudoFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetStatusPseudo()
	 * @method \string fillStatusPseudo()
	 * @method \Bitrix\Main\EO_User getCreatedByUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedByUser()
	 * @method \Bitrix\Main\EO_User requireCreatedByUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setCreatedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetCreatedByUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetCreatedByUser()
	 * @method bool hasCreatedByUser()
	 * @method bool isCreatedByUserFilled()
	 * @method bool isCreatedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User getChangedByUser()
	 * @method \Bitrix\Main\EO_User remindActualChangedByUser()
	 * @method \Bitrix\Main\EO_User requireChangedByUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setChangedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetChangedByUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetChangedByUser()
	 * @method bool hasChangedByUser()
	 * @method bool isChangedByUserFilled()
	 * @method bool isChangedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillChangedByUser()
	 * @method \Bitrix\Main\EO_User getStatusChangedByUser()
	 * @method \Bitrix\Main\EO_User remindActualStatusChangedByUser()
	 * @method \Bitrix\Main\EO_User requireStatusChangedByUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setStatusChangedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetStatusChangedByUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetStatusChangedByUser()
	 * @method bool hasStatusChangedByUser()
	 * @method bool isStatusChangedByUserFilled()
	 * @method bool isStatusChangedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillStatusChangedByUser()
	 * @method \Bitrix\Main\EO_User getClosedByUser()
	 * @method \Bitrix\Main\EO_User remindActualClosedByUser()
	 * @method \Bitrix\Main\EO_User requireClosedByUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setClosedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetClosedByUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetClosedByUser()
	 * @method bool hasClosedByUser()
	 * @method bool isClosedByUserFilled()
	 * @method bool isClosedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillClosedByUser()
	 * @method \int getTimeSpentInLogs()
	 * @method \int remindActualTimeSpentInLogs()
	 * @method \int requireTimeSpentInLogs()
	 * @method bool hasTimeSpentInLogs()
	 * @method bool isTimeSpentInLogsFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetTimeSpentInLogs()
	 * @method \int fillTimeSpentInLogs()
	 * @method \int getDuration()
	 * @method \int remindActualDuration()
	 * @method \int requireDuration()
	 * @method bool hasDuration()
	 * @method bool isDurationFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDuration()
	 * @method \int fillDuration()
	 * @method \int getDurationPlanMinutes()
	 * @method \int remindActualDurationPlanMinutes()
	 * @method \int requireDurationPlanMinutes()
	 * @method bool hasDurationPlanMinutes()
	 * @method bool isDurationPlanMinutesFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDurationPlanMinutes()
	 * @method \int fillDurationPlanMinutes()
	 * @method \int getDurationPlanHours()
	 * @method \int remindActualDurationPlanHours()
	 * @method \int requireDurationPlanHours()
	 * @method bool hasDurationPlanHours()
	 * @method bool isDurationPlanHoursFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDurationPlanHours()
	 * @method \int fillDurationPlanHours()
	 * @method \boolean getIsOverdue()
	 * @method \boolean remindActualIsOverdue()
	 * @method \boolean requireIsOverdue()
	 * @method bool hasIsOverdue()
	 * @method bool isIsOverdueFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetIsOverdue()
	 * @method \boolean fillIsOverdue()
	 * @method \int getIsOverduePrcnt()
	 * @method \int remindActualIsOverduePrcnt()
	 * @method \int requireIsOverduePrcnt()
	 * @method bool hasIsOverduePrcnt()
	 * @method bool isIsOverduePrcntFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetIsOverduePrcnt()
	 * @method \int fillIsOverduePrcnt()
	 * @method \boolean getIsMarked()
	 * @method \boolean remindActualIsMarked()
	 * @method \boolean requireIsMarked()
	 * @method bool hasIsMarked()
	 * @method bool isIsMarkedFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetIsMarked()
	 * @method \boolean fillIsMarked()
	 * @method \int getIsMarkedPrcnt()
	 * @method \int remindActualIsMarkedPrcnt()
	 * @method \int requireIsMarkedPrcnt()
	 * @method bool hasIsMarkedPrcnt()
	 * @method bool isIsMarkedPrcntFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetIsMarkedPrcnt()
	 * @method \int fillIsMarkedPrcnt()
	 * @method \boolean getIsEffective()
	 * @method \boolean remindActualIsEffective()
	 * @method \boolean requireIsEffective()
	 * @method bool hasIsEffective()
	 * @method bool isIsEffectiveFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetIsEffective()
	 * @method \boolean fillIsEffective()
	 * @method \int getIsEffectivePrcnt()
	 * @method \int remindActualIsEffectivePrcnt()
	 * @method \int requireIsEffectivePrcnt()
	 * @method bool hasIsEffectivePrcnt()
	 * @method bool isIsEffectivePrcntFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetIsEffectivePrcnt()
	 * @method \int fillIsEffectivePrcnt()
	 * @method \boolean getIsRunning()
	 * @method \boolean remindActualIsRunning()
	 * @method \boolean requireIsRunning()
	 * @method bool hasIsRunning()
	 * @method bool isIsRunningFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetIsRunning()
	 * @method \boolean fillIsRunning()
	 * @method \string getDeclineReason()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDeclineReason(\string|\Bitrix\Main\DB\SqlExpression $declineReason)
	 * @method bool hasDeclineReason()
	 * @method bool isDeclineReasonFilled()
	 * @method bool isDeclineReasonChanged()
	 * @method \string remindActualDeclineReason()
	 * @method \string requireDeclineReason()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDeclineReason()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDeclineReason()
	 * @method \string fillDeclineReason()
	 * @method \int getDeadlineCounted()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setDeadlineCounted(\int|\Bitrix\Main\DB\SqlExpression $deadlineCounted)
	 * @method bool hasDeadlineCounted()
	 * @method bool isDeadlineCountedFilled()
	 * @method bool isDeadlineCountedChanged()
	 * @method \int remindActualDeadlineCounted()
	 * @method \int requireDeadlineCounted()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetDeadlineCounted()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetDeadlineCounted()
	 * @method \int fillDeadlineCounted()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_TaskUts getUtsObject()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_TaskUts remindActualUtsObject()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_TaskUts requireUtsObject()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setUtsObject(\Bitrix\Tasks\Integration\Report\Internals\EO_TaskUts $object)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task resetUtsObject()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetUtsObject()
	 * @method bool hasUtsObject()
	 * @method bool isUtsObjectFilled()
	 * @method bool isUtsObjectChanged()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_TaskUts fillUtsObject()
	 * @method \string getUfCrmTask()
	 * @method \string remindActualUfCrmTask()
	 * @method \string requireUfCrmTask()
	 * @method bool hasUfCrmTask()
	 * @method bool isUfCrmTaskFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetUfCrmTask()
	 * @method \string fillUfCrmTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setUfCrmTask(\string[] $ufCrmTask)
	 * @method bool isUfCrmTaskChanged()
	 * @method \string getUfTaskWebdavFiles()
	 * @method \string remindActualUfTaskWebdavFiles()
	 * @method \string requireUfTaskWebdavFiles()
	 * @method bool hasUfTaskWebdavFiles()
	 * @method bool isUfTaskWebdavFilesFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetUfTaskWebdavFiles()
	 * @method \string fillUfTaskWebdavFiles()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setUfTaskWebdavFiles(\string[] $ufTaskWebdavFiles)
	 * @method bool isUfTaskWebdavFilesChanged()
	 * @method \int getUfMailMessage()
	 * @method \int remindActualUfMailMessage()
	 * @method \int requireUfMailMessage()
	 * @method bool hasUfMailMessage()
	 * @method bool isUfMailMessageFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetUfMailMessage()
	 * @method \int fillUfMailMessage()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setUfMailMessage(\int $ufMailMessage)
	 * @method bool isUfMailMessageChanged()
	 * @method \float getUfAuto508830788999()
	 * @method \float remindActualUfAuto508830788999()
	 * @method \float requireUfAuto508830788999()
	 * @method bool hasUfAuto508830788999()
	 * @method bool isUfAuto508830788999Filled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetUfAuto508830788999()
	 * @method \float fillUfAuto508830788999()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task setUfAuto508830788999(\float $ufAuto508830788999)
	 * @method bool isUfAuto508830788999Changed()
	 * @method \string getUfCrmTaskSingle()
	 * @method \string remindActualUfCrmTaskSingle()
	 * @method \string requireUfCrmTaskSingle()
	 * @method bool hasUfCrmTaskSingle()
	 * @method bool isUfCrmTaskSingleFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetUfCrmTaskSingle()
	 * @method \string fillUfCrmTaskSingle()
	 * @method \int getUfTaskWebdavFilesSingle()
	 * @method \int remindActualUfTaskWebdavFilesSingle()
	 * @method \int requireUfTaskWebdavFilesSingle()
	 * @method bool hasUfTaskWebdavFilesSingle()
	 * @method bool isUfTaskWebdavFilesSingleFilled()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unsetUfTaskWebdavFilesSingle()
	 * @method \int fillUfTaskWebdavFilesSingle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task set($fieldName, $value)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task reset($fieldName)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Integration\Report\Internals\EO_Task wakeUp($data)
	 */
	class EO_Task {
		/* @var \Bitrix\Tasks\Integration\Report\Internals\TaskTable */
		static public $dataClass = '\Bitrix\Tasks\Integration\Report\Internals\TaskTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Integration\Report\Internals {
	/**
	 * EO_Task_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \boolean[] getDescriptionInBbcodeList()
	 * @method \boolean[] fillDescriptionInBbcode()
	 * @method \string[] getPriorityList()
	 * @method \string[] fillPriority()
	 * @method \string[] getStatusList()
	 * @method \string[] fillStatus()
	 * @method \int[] getStageIdList()
	 * @method \int[] fillStageId()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStart()
	 * @method \int[] getDurationPlanList()
	 * @method \int[] fillDurationPlan()
	 * @method \int[] getDurationFactList()
	 * @method \int[] fillDurationFact()
	 * @method \string[] getDurationTypeList()
	 * @method \string[] fillDurationType()
	 * @method \int[] getTimeEstimateList()
	 * @method \int[] fillTimeEstimate()
	 * @method \boolean[] getReplicateList()
	 * @method \boolean[] fillReplicate()
	 * @method \Bitrix\Main\Type\DateTime[] getDeadlineList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDeadline()
	 * @method \Bitrix\Main\Type\DateTime[] getStartDatePlanList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStartDatePlan()
	 * @method \Bitrix\Main\Type\DateTime[] getEndDatePlanList()
	 * @method \Bitrix\Main\Type\DateTime[] fillEndDatePlan()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedDate()
	 * @method \int[] getChangedByList()
	 * @method \int[] fillChangedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getChangedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillChangedDate()
	 * @method \int[] getStatusChangedByList()
	 * @method \int[] fillStatusChangedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getStatusChangedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStatusChangedDate()
	 * @method \int[] getClosedByList()
	 * @method \int[] fillClosedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getClosedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillClosedDate()
	 * @method \string[] getGuidList()
	 * @method \string[] fillGuid()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getMarkList()
	 * @method \string[] fillMark()
	 * @method \boolean[] getAllowChangeDeadlineList()
	 * @method \boolean[] fillAllowChangeDeadline()
	 * @method \boolean[] getAllowTimeTrackingList()
	 * @method \boolean[] fillAllowTimeTracking()
	 * @method \boolean[] getTaskControlList()
	 * @method \boolean[] fillTaskControl()
	 * @method \boolean[] getAddInReportList()
	 * @method \boolean[] fillAddInReport()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \int[] getForumTopicIdList()
	 * @method \int[] fillForumTopicId()
	 * @method \boolean[] getMultitaskList()
	 * @method \boolean[] fillMultitask()
	 * @method \string[] getSiteIdList()
	 * @method \string[] fillSiteId()
	 * @method \int[] getForkedByTemplateIdList()
	 * @method \int[] fillForkedByTemplateId()
	 * @method \boolean[] getZombieList()
	 * @method \boolean[] fillZombie()
	 * @method \boolean[] getMatchWorkTimeList()
	 * @method \boolean[] fillMatchWorkTime()
	 * @method \Bitrix\Main\EO_User[] getCreatorList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getCreatorCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreator()
	 * @method \Bitrix\Main\EO_User[] getResponsibleList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getResponsibleCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsible()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task[] getParentList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getParentCollection()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection fillParent()
	 * @method \Bitrix\Main\EO_Site[] getSiteList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getSiteCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSite()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member[] getMembersList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getMembersCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member_Collection fillMembers()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup[] getGroupList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getGroupCollection()
	 * @method \Bitrix\Socialnetwork\EO_Workgroup_Collection fillGroup()
	 * @method \int[] getOutlookVersionList()
	 * @method \int[] fillOutlookVersion()
	 * @method \string[] getDescriptionTrList()
	 * @method \string[] fillDescriptionTr()
	 * @method \string[] getStatusPseudoList()
	 * @method \string[] fillStatusPseudo()
	 * @method \Bitrix\Main\EO_User[] getCreatedByUserList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getCreatedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User[] getChangedByUserList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getChangedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillChangedByUser()
	 * @method \Bitrix\Main\EO_User[] getStatusChangedByUserList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getStatusChangedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillStatusChangedByUser()
	 * @method \Bitrix\Main\EO_User[] getClosedByUserList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getClosedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillClosedByUser()
	 * @method \int[] getTimeSpentInLogsList()
	 * @method \int[] fillTimeSpentInLogs()
	 * @method \int[] getDurationList()
	 * @method \int[] fillDuration()
	 * @method \int[] getDurationPlanMinutesList()
	 * @method \int[] fillDurationPlanMinutes()
	 * @method \int[] getDurationPlanHoursList()
	 * @method \int[] fillDurationPlanHours()
	 * @method \boolean[] getIsOverdueList()
	 * @method \boolean[] fillIsOverdue()
	 * @method \int[] getIsOverduePrcntList()
	 * @method \int[] fillIsOverduePrcnt()
	 * @method \boolean[] getIsMarkedList()
	 * @method \boolean[] fillIsMarked()
	 * @method \int[] getIsMarkedPrcntList()
	 * @method \int[] fillIsMarkedPrcnt()
	 * @method \boolean[] getIsEffectiveList()
	 * @method \boolean[] fillIsEffective()
	 * @method \int[] getIsEffectivePrcntList()
	 * @method \int[] fillIsEffectivePrcnt()
	 * @method \boolean[] getIsRunningList()
	 * @method \boolean[] fillIsRunning()
	 * @method \string[] getDeclineReasonList()
	 * @method \string[] fillDeclineReason()
	 * @method \int[] getDeadlineCountedList()
	 * @method \int[] fillDeadlineCounted()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_TaskUts[] getUtsObjectList()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection getUtsObjectCollection()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_TaskUts_Collection fillUtsObject()
	 * @method \string[] getUfCrmTaskList()
	 * @method \string[] fillUfCrmTask()
	 * @method \string[] getUfTaskWebdavFilesList()
	 * @method \string[] fillUfTaskWebdavFiles()
	 * @method \int[] getUfMailMessageList()
	 * @method \int[] fillUfMailMessage()
	 * @method \float[] getUfAuto508830788999List()
	 * @method \float[] fillUfAuto508830788999()
	 * @method \string[] getUfCrmTaskSingleList()
	 * @method \string[] fillUfCrmTaskSingle()
	 * @method \int[] getUfTaskWebdavFilesSingleList()
	 * @method \int[] fillUfTaskWebdavFilesSingle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Integration\Report\Internals\EO_Task $object)
	 * @method bool has(\Bitrix\Tasks\Integration\Report\Internals\EO_Task $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task getByPrimary($primary)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Integration\Report\Internals\EO_Task $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Task_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Integration\Report\Internals\TaskTable */
		static public $dataClass = '\Bitrix\Tasks\Integration\Report\Internals\TaskTable';
	}
}
namespace Bitrix\Tasks\Integration\Report\Internals {
	/**
	 * @method static EO_Task_Query query()
	 * @method static EO_Task_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Task_Result getById($id)
	 * @method static EO_Task_Result getList(array $parameters = array())
	 * @method static EO_Task_Entity getEntity()
	 * @method static \Bitrix\Tasks\Integration\Report\Internals\EO_Task createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection createCollection()
	 * @method static \Bitrix\Tasks\Integration\Report\Internals\EO_Task wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection wakeUpCollection($rows)
	 */
	class TaskTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Task_Result exec()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task fetchObject()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection fetchCollection()
	 */
	class EO_Task_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task fetchObject()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection fetchCollection()
	 */
	class EO_Task_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection createCollection()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task wakeUpObject($row)
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection wakeUpCollection($rows)
	 */
	class EO_Task_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\TagTable */
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Tag
	 * @see \Bitrix\Tasks\Internals\Task\TagTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag resetUser()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Tag wakeUp($data)
	 */
	class EO_Tag {
		/* @var \Bitrix\Tasks\Internals\Task\TagTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\TagTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Tag_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getTaskIdList()
	 * @method \int[] getUserIdList()
	 * @method \string[] getNameList()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\EO_Tag $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\EO_Tag $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\EO_Tag $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Tag_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Tag_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\TagTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\TagTable';
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * @method static EO_Tag_Query query()
	 * @method static EO_Tag_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Tag_Result getById($id)
	 * @method static EO_Tag_Result getList(array $parameters = array())
	 * @method static EO_Tag_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Tag createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Tag_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Tag wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Tag_Collection wakeUpCollection($rows)
	 */
	class TagTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Tag_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag_Collection fetchCollection()
	 */
	class EO_Tag_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag_Collection fetchCollection()
	 */
	class EO_Tag_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Tag_Collection wakeUpCollection($rows)
	 */
	class EO_Tag_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\MemberTable */
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Member
	 * @see \Bitrix\Tasks\Internals\Task\MemberTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getType()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member resetUser()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \Bitrix\Tasks\Internals\EO_Task getTask()
	 * @method \Bitrix\Tasks\Internals\EO_Task remindActualTask()
	 * @method \Bitrix\Tasks\Internals\EO_Task requireTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member setTask(\Bitrix\Tasks\Internals\EO_Task $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member resetTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member unsetTask()
	 * @method bool hasTask()
	 * @method bool isTaskFilled()
	 * @method bool isTaskChanged()
	 * @method \Bitrix\Tasks\Internals\EO_Task fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Member wakeUp($data)
	 */
	class EO_Member {
		/* @var \Bitrix\Tasks\Internals\Task\MemberTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\MemberTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Member_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getTaskIdList()
	 * @method \int[] getUserIdList()
	 * @method \string[] getTypeList()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \Bitrix\Tasks\Internals\EO_Task[] getTaskList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member_Collection getTaskCollection()
	 * @method \Bitrix\Tasks\Internals\EO_Task_Collection fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\EO_Member $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\EO_Member $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\EO_Member $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Member_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Member_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\MemberTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\MemberTable';
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * @method static EO_Member_Query query()
	 * @method static EO_Member_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Member_Result getById($id)
	 * @method static EO_Member_Result getList(array $parameters = array())
	 * @method static EO_Member_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Member createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Member_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Member wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Member_Collection wakeUpCollection($rows)
	 */
	class MemberTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Member_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member_Collection fetchCollection()
	 */
	class EO_Member_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member_Collection fetchCollection()
	 */
	class EO_Member_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Member_Collection wakeUpCollection($rows)
	 */
	class EO_Member_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\ElapsedTimeTable */
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_ElapsedTime
	 * @see \Bitrix\Tasks\Internals\Task\ElapsedTimeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getCreatedDate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setCreatedDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedDate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetCreatedDate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetCreatedDate()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedDate()
	 * @method \Bitrix\Main\Type\DateTime getDateStart()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setDateStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateStart)
	 * @method bool hasDateStart()
	 * @method bool isDateStartFilled()
	 * @method bool isDateStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStart()
	 * @method \Bitrix\Main\Type\DateTime requireDateStart()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetDateStart()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetDateStart()
	 * @method \Bitrix\Main\Type\DateTime fillDateStart()
	 * @method \Bitrix\Main\Type\DateTime getDateStop()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setDateStop(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateStop)
	 * @method bool hasDateStop()
	 * @method bool isDateStopFilled()
	 * @method bool isDateStopChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStop()
	 * @method \Bitrix\Main\Type\DateTime requireDateStop()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetDateStop()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetDateStop()
	 * @method \Bitrix\Main\Type\DateTime fillDateStop()
	 * @method \int getUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetUserId()
	 * @method \int fillUserId()
	 * @method \int getTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int remindActualTaskId()
	 * @method \int requireTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetTaskId()
	 * @method \int fillTaskId()
	 * @method \int getMinutes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setMinutes(\int|\Bitrix\Main\DB\SqlExpression $minutes)
	 * @method bool hasMinutes()
	 * @method bool isMinutesFilled()
	 * @method bool isMinutesChanged()
	 * @method \int remindActualMinutes()
	 * @method \int requireMinutes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetMinutes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetMinutes()
	 * @method \int fillMinutes()
	 * @method \int getSeconds()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setSeconds(\int|\Bitrix\Main\DB\SqlExpression $seconds)
	 * @method bool hasSeconds()
	 * @method bool isSecondsFilled()
	 * @method bool isSecondsChanged()
	 * @method \int remindActualSeconds()
	 * @method \int requireSeconds()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetSeconds()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetSeconds()
	 * @method \int fillSeconds()
	 * @method \int getSource()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setSource(\int|\Bitrix\Main\DB\SqlExpression $source)
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \int remindActualSource()
	 * @method \int requireSource()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetSource()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetSource()
	 * @method \int fillSource()
	 * @method \string getCommentText()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setCommentText(\string|\Bitrix\Main\DB\SqlExpression $commentText)
	 * @method bool hasCommentText()
	 * @method bool isCommentTextFilled()
	 * @method bool isCommentTextChanged()
	 * @method \string remindActualCommentText()
	 * @method \string requireCommentText()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetCommentText()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetCommentText()
	 * @method \string fillCommentText()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetUser()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task getTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task remindActualTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task requireTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime setTask(\Bitrix\Tasks\Integration\Report\Internals\EO_Task $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime resetTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unsetTask()
	 * @method bool hasTask()
	 * @method bool isTaskFilled()
	 * @method bool isTaskChanged()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ElapsedTime wakeUp($data)
	 */
	class EO_ElapsedTime {
		/* @var \Bitrix\Tasks\Internals\Task\ElapsedTimeTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\ElapsedTimeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_ElapsedTime_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedDate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStart()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStopList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStop()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \int[] getTaskIdList()
	 * @method \int[] fillTaskId()
	 * @method \int[] getMinutesList()
	 * @method \int[] fillMinutes()
	 * @method \int[] getSecondsList()
	 * @method \int[] fillSeconds()
	 * @method \int[] getSourceList()
	 * @method \int[] fillSource()
	 * @method \string[] getCommentTextList()
	 * @method \string[] fillCommentText()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task[] getTaskList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection getTaskCollection()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\EO_ElapsedTime $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\EO_ElapsedTime $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\EO_ElapsedTime $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ElapsedTime_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\ElapsedTimeTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\ElapsedTimeTable';
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * @method static EO_ElapsedTime_Query query()
	 * @method static EO_ElapsedTime_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ElapsedTime_Result getById($id)
	 * @method static EO_ElapsedTime_Result getList(array $parameters = array())
	 * @method static EO_ElapsedTime_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ElapsedTime createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ElapsedTime wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection wakeUpCollection($rows)
	 */
	class ElapsedTimeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_ElapsedTime_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection fetchCollection()
	 */
	class EO_ElapsedTime_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection fetchCollection()
	 */
	class EO_ElapsedTime_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ElapsedTime_Collection wakeUpCollection($rows)
	 */
	class EO_ElapsedTime_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\SortingTable */
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Sorting
	 * @see \Bitrix\Tasks\Internals\Task\SortingTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int remindActualTaskId()
	 * @method \int requireTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting resetTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting unsetTaskId()
	 * @method \int fillTaskId()
	 * @method \float getSort()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting setSort(\float|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \float remindActualSort()
	 * @method \float requireSort()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting resetSort()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting unsetSort()
	 * @method \float fillSort()
	 * @method \int getUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting resetUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting unsetUserId()
	 * @method \int fillUserId()
	 * @method \int getGroupId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting resetGroupId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting unsetGroupId()
	 * @method \int fillGroupId()
	 * @method \int getPrevTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting setPrevTaskId(\int|\Bitrix\Main\DB\SqlExpression $prevTaskId)
	 * @method bool hasPrevTaskId()
	 * @method bool isPrevTaskIdFilled()
	 * @method bool isPrevTaskIdChanged()
	 * @method \int remindActualPrevTaskId()
	 * @method \int requirePrevTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting resetPrevTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting unsetPrevTaskId()
	 * @method \int fillPrevTaskId()
	 * @method \int getNextTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting setNextTaskId(\int|\Bitrix\Main\DB\SqlExpression $nextTaskId)
	 * @method bool hasNextTaskId()
	 * @method bool isNextTaskIdFilled()
	 * @method bool isNextTaskIdChanged()
	 * @method \int remindActualNextTaskId()
	 * @method \int requireNextTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting resetNextTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting unsetNextTaskId()
	 * @method \int fillNextTaskId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Sorting wakeUp($data)
	 */
	class EO_Sorting {
		/* @var \Bitrix\Tasks\Internals\Task\SortingTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\SortingTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Sorting_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTaskIdList()
	 * @method \int[] fillTaskId()
	 * @method \float[] getSortList()
	 * @method \float[] fillSort()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 * @method \int[] getPrevTaskIdList()
	 * @method \int[] fillPrevTaskId()
	 * @method \int[] getNextTaskIdList()
	 * @method \int[] fillNextTaskId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\EO_Sorting $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\EO_Sorting $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\EO_Sorting $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Sorting_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Sorting_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\SortingTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\SortingTable';
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * @method static EO_Sorting_Query query()
	 * @method static EO_Sorting_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Sorting_Result getById($id)
	 * @method static EO_Sorting_Result getList(array $parameters = array())
	 * @method static EO_Sorting_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Sorting createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Sorting_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Sorting wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Sorting_Collection wakeUpCollection($rows)
	 */
	class SortingTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Sorting_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting_Collection fetchCollection()
	 */
	class EO_Sorting_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting_Collection fetchCollection()
	 */
	class EO_Sorting_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Sorting_Collection wakeUpCollection($rows)
	 */
	class EO_Sorting_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\FavoriteTable */
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Favorite
	 * @see \Bitrix\Tasks\Internals\Task\FavoriteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite resetUser()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task getTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task remindActualTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task requireTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite setTask(\Bitrix\Tasks\Integration\Report\Internals\EO_Task $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite resetTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite unsetTask()
	 * @method bool hasTask()
	 * @method bool isTaskFilled()
	 * @method bool isTaskChanged()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Favorite wakeUp($data)
	 */
	class EO_Favorite {
		/* @var \Bitrix\Tasks\Internals\Task\FavoriteTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\FavoriteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Favorite_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getTaskIdList()
	 * @method \int[] getUserIdList()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task[] getTaskList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection getTaskCollection()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\EO_Favorite $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\EO_Favorite $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\EO_Favorite $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Favorite_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\FavoriteTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\FavoriteTable';
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * @method static EO_Favorite_Query query()
	 * @method static EO_Favorite_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Favorite_Result getById($id)
	 * @method static EO_Favorite_Result getList(array $parameters = array())
	 * @method static EO_Favorite_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Favorite createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Favorite wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection wakeUpCollection($rows)
	 */
	class FavoriteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Favorite_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection fetchCollection()
	 */
	class EO_Favorite_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection fetchCollection()
	 */
	class EO_Favorite_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Favorite_Collection wakeUpCollection($rows)
	 */
	class EO_Favorite_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\ProjectDependenceTable */
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_ProjectDependence
	 * @see \Bitrix\Tasks\Internals\Task\ProjectDependenceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int getDependsOnId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setDependsOnId(\int|\Bitrix\Main\DB\SqlExpression $dependsOnId)
	 * @method bool hasDependsOnId()
	 * @method bool isDependsOnIdFilled()
	 * @method bool isDependsOnIdChanged()
	 * @method \int getType()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setType(\int|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \int remindActualType()
	 * @method \int requireType()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetType()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetType()
	 * @method \int fillType()
	 * @method \int getCreatorId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setCreatorId(\int|\Bitrix\Main\DB\SqlExpression $creatorId)
	 * @method bool hasCreatorId()
	 * @method bool isCreatorIdFilled()
	 * @method bool isCreatorIdChanged()
	 * @method \int remindActualCreatorId()
	 * @method \int requireCreatorId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetCreatorId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetCreatorId()
	 * @method \int fillCreatorId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task getTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task remindActualTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task requireTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setTask(\Bitrix\Tasks\Integration\Report\Internals\EO_Task $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetTask()
	 * @method bool hasTask()
	 * @method bool isTaskFilled()
	 * @method bool isTaskChanged()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task fillTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task getDependsOn()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task remindActualDependsOn()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task requireDependsOn()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setDependsOn(\Bitrix\Tasks\Integration\Report\Internals\EO_Task $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetDependsOn()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetDependsOn()
	 * @method bool hasDependsOn()
	 * @method bool isDependsOnFilled()
	 * @method bool isDependsOnChanged()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task fillDependsOn()
	 * @method \boolean getDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setDirect(\boolean|\Bitrix\Main\DB\SqlExpression $direct)
	 * @method bool hasDirect()
	 * @method bool isDirectFilled()
	 * @method bool isDirectChanged()
	 * @method \boolean remindActualDirect()
	 * @method \boolean requireDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetDirect()
	 * @method \boolean fillDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence getParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence remindActualParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence requireParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setParentNode(\Bitrix\Tasks\Internals\Task\EO_ProjectDependence $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetParentNode()
	 * @method bool hasParentNode()
	 * @method bool isParentNodeFilled()
	 * @method bool isParentNodeChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence fillParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence getParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence remindActualParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence requireParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setParentNodes(\Bitrix\Tasks\Internals\Task\EO_ProjectDependence $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetParentNodes()
	 * @method bool hasParentNodes()
	 * @method bool isParentNodesFilled()
	 * @method bool isParentNodesChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence fillParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence getChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence remindActualChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence requireChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setChildNodes(\Bitrix\Tasks\Internals\Task\EO_ProjectDependence $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetChildNodes()
	 * @method bool hasChildNodes()
	 * @method bool isChildNodesFilled()
	 * @method bool isChildNodesChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence fillChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence getChildNodesDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence remindActualChildNodesDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence requireChildNodesDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setChildNodesDirect(\Bitrix\Tasks\Internals\Task\EO_ProjectDependence $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetChildNodesDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetChildNodesDirect()
	 * @method bool hasChildNodesDirect()
	 * @method bool isChildNodesDirectFilled()
	 * @method bool isChildNodesDirectChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence fillChildNodesDirect()
	 * @method \int getMpcity()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence setMpcity(\int|\Bitrix\Main\DB\SqlExpression $mpcity)
	 * @method bool hasMpcity()
	 * @method bool isMpcityFilled()
	 * @method bool isMpcityChanged()
	 * @method \int remindActualMpcity()
	 * @method \int requireMpcity()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence resetMpcity()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unsetMpcity()
	 * @method \int fillMpcity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ProjectDependence wakeUp($data)
	 */
	class EO_ProjectDependence {
		/* @var \Bitrix\Tasks\Internals\Task\ProjectDependenceTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\ProjectDependenceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_ProjectDependence_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getTaskIdList()
	 * @method \int[] getDependsOnIdList()
	 * @method \int[] getTypeList()
	 * @method \int[] fillType()
	 * @method \int[] getCreatorIdList()
	 * @method \int[] fillCreatorId()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task[] getTaskList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection getTaskCollection()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection fillTask()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task[] getDependsOnList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection getDependsOnCollection()
	 * @method \Bitrix\Tasks\Integration\Report\Internals\EO_Task_Collection fillDependsOn()
	 * @method \boolean[] getDirectList()
	 * @method \boolean[] fillDirect()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence[] getParentNodeList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection getParentNodeCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection fillParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence[] getParentNodesList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection getParentNodesCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection fillParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence[] getChildNodesList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection getChildNodesCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection fillChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence[] getChildNodesDirectList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection getChildNodesDirectCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection fillChildNodesDirect()
	 * @method \int[] getMpcityList()
	 * @method \int[] fillMpcity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\EO_ProjectDependence $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\EO_ProjectDependence $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\EO_ProjectDependence $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ProjectDependence_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\ProjectDependenceTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\ProjectDependenceTable';
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * @method static EO_ProjectDependence_Query query()
	 * @method static EO_ProjectDependence_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ProjectDependence_Result getById($id)
	 * @method static EO_ProjectDependence_Result getList(array $parameters = array())
	 * @method static EO_ProjectDependence_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ProjectDependence createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ProjectDependence wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection wakeUpCollection($rows)
	 */
	class ProjectDependenceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_ProjectDependence_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection fetchCollection()
	 */
	class EO_ProjectDependence_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection fetchCollection()
	 */
	class EO_ProjectDependence_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\EO_ProjectDependence_Collection wakeUpCollection($rows)
	 */
	class EO_ProjectDependence_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\TemplateTable */
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Template
	 * @see \Bitrix\Tasks\Internals\Task\TemplateTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetTitle()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getDescription()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetDescription()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetDescription()
	 * @method \string fillDescription()
	 * @method \boolean getDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setDescriptionInBbcode(\boolean|\Bitrix\Main\DB\SqlExpression $descriptionInBbcode)
	 * @method bool hasDescriptionInBbcode()
	 * @method bool isDescriptionInBbcodeFilled()
	 * @method bool isDescriptionInBbcodeChanged()
	 * @method \boolean remindActualDescriptionInBbcode()
	 * @method \boolean requireDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetDescriptionInBbcode()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetDescriptionInBbcode()
	 * @method \boolean fillDescriptionInBbcode()
	 * @method \string getPriority()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setPriority(\string|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \string remindActualPriority()
	 * @method \string requirePriority()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetPriority()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetPriority()
	 * @method \string fillPriority()
	 * @method \string getStatus()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setStatus(\string|\Bitrix\Main\DB\SqlExpression $status)
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \string remindActualStatus()
	 * @method \string requireStatus()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetStatus()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetStatus()
	 * @method \string fillStatus()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetResponsibleId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getTimeEstimate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setTimeEstimate(\int|\Bitrix\Main\DB\SqlExpression $timeEstimate)
	 * @method bool hasTimeEstimate()
	 * @method bool isTimeEstimateFilled()
	 * @method bool isTimeEstimateChanged()
	 * @method \int remindActualTimeEstimate()
	 * @method \int requireTimeEstimate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetTimeEstimate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetTimeEstimate()
	 * @method \int fillTimeEstimate()
	 * @method \boolean getReplicate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setReplicate(\boolean|\Bitrix\Main\DB\SqlExpression $replicate)
	 * @method bool hasReplicate()
	 * @method bool isReplicateFilled()
	 * @method bool isReplicateChanged()
	 * @method \boolean remindActualReplicate()
	 * @method \boolean requireReplicate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetReplicate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetReplicate()
	 * @method \boolean fillReplicate()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetCreatedBy()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \string getXmlId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetXmlId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \boolean getAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setAllowChangeDeadline(\boolean|\Bitrix\Main\DB\SqlExpression $allowChangeDeadline)
	 * @method bool hasAllowChangeDeadline()
	 * @method bool isAllowChangeDeadlineFilled()
	 * @method bool isAllowChangeDeadlineChanged()
	 * @method \boolean remindActualAllowChangeDeadline()
	 * @method \boolean requireAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetAllowChangeDeadline()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetAllowChangeDeadline()
	 * @method \boolean fillAllowChangeDeadline()
	 * @method \boolean getAllowTimeTracking()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setAllowTimeTracking(\boolean|\Bitrix\Main\DB\SqlExpression $allowTimeTracking)
	 * @method bool hasAllowTimeTracking()
	 * @method bool isAllowTimeTrackingFilled()
	 * @method bool isAllowTimeTrackingChanged()
	 * @method \boolean remindActualAllowTimeTracking()
	 * @method \boolean requireAllowTimeTracking()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetAllowTimeTracking()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetAllowTimeTracking()
	 * @method \boolean fillAllowTimeTracking()
	 * @method \boolean getTaskControl()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setTaskControl(\boolean|\Bitrix\Main\DB\SqlExpression $taskControl)
	 * @method bool hasTaskControl()
	 * @method bool isTaskControlFilled()
	 * @method bool isTaskControlChanged()
	 * @method \boolean remindActualTaskControl()
	 * @method \boolean requireTaskControl()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetTaskControl()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetTaskControl()
	 * @method \boolean fillTaskControl()
	 * @method \boolean getAddInReport()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setAddInReport(\boolean|\Bitrix\Main\DB\SqlExpression $addInReport)
	 * @method bool hasAddInReport()
	 * @method bool isAddInReportFilled()
	 * @method bool isAddInReportChanged()
	 * @method \boolean remindActualAddInReport()
	 * @method \boolean requireAddInReport()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetAddInReport()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetAddInReport()
	 * @method \boolean fillAddInReport()
	 * @method \boolean getMatchWorkTime()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setMatchWorkTime(\boolean|\Bitrix\Main\DB\SqlExpression $matchWorkTime)
	 * @method bool hasMatchWorkTime()
	 * @method bool isMatchWorkTimeFilled()
	 * @method bool isMatchWorkTimeChanged()
	 * @method \boolean remindActualMatchWorkTime()
	 * @method \boolean requireMatchWorkTime()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetMatchWorkTime()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetMatchWorkTime()
	 * @method \boolean fillMatchWorkTime()
	 * @method \int getGroupId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int remindActualGroupId()
	 * @method \int requireGroupId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetGroupId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetGroupId()
	 * @method \int fillGroupId()
	 * @method \int getParentId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetParentId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetParentId()
	 * @method \int fillParentId()
	 * @method \boolean getMultitask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setMultitask(\boolean|\Bitrix\Main\DB\SqlExpression $multitask)
	 * @method bool hasMultitask()
	 * @method bool isMultitaskFilled()
	 * @method bool isMultitaskChanged()
	 * @method \boolean remindActualMultitask()
	 * @method \boolean requireMultitask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetMultitask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetMultitask()
	 * @method \boolean fillMultitask()
	 * @method \string getSiteId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \string remindActualSiteId()
	 * @method \string requireSiteId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetSiteId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetSiteId()
	 * @method \string fillSiteId()
	 * @method \string getReplicateParams()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setReplicateParams(\string|\Bitrix\Main\DB\SqlExpression $replicateParams)
	 * @method bool hasReplicateParams()
	 * @method bool isReplicateParamsFilled()
	 * @method bool isReplicateParamsChanged()
	 * @method \string remindActualReplicateParams()
	 * @method \string requireReplicateParams()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetReplicateParams()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetReplicateParams()
	 * @method \string fillReplicateParams()
	 * @method \string getTags()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setTags(\string|\Bitrix\Main\DB\SqlExpression $tags)
	 * @method bool hasTags()
	 * @method bool isTagsFilled()
	 * @method bool isTagsChanged()
	 * @method \string remindActualTags()
	 * @method \string requireTags()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetTags()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetTags()
	 * @method \string fillTags()
	 * @method \string getAccomplices()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setAccomplices(\string|\Bitrix\Main\DB\SqlExpression $accomplices)
	 * @method bool hasAccomplices()
	 * @method bool isAccomplicesFilled()
	 * @method bool isAccomplicesChanged()
	 * @method \string remindActualAccomplices()
	 * @method \string requireAccomplices()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetAccomplices()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetAccomplices()
	 * @method \string fillAccomplices()
	 * @method \string getAuditors()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setAuditors(\string|\Bitrix\Main\DB\SqlExpression $auditors)
	 * @method bool hasAuditors()
	 * @method bool isAuditorsFilled()
	 * @method bool isAuditorsChanged()
	 * @method \string remindActualAuditors()
	 * @method \string requireAuditors()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetAuditors()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetAuditors()
	 * @method \string fillAuditors()
	 * @method \string getResponsibles()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setResponsibles(\string|\Bitrix\Main\DB\SqlExpression $responsibles)
	 * @method bool hasResponsibles()
	 * @method bool isResponsiblesFilled()
	 * @method bool isResponsiblesChanged()
	 * @method \string remindActualResponsibles()
	 * @method \string requireResponsibles()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetResponsibles()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetResponsibles()
	 * @method \string fillResponsibles()
	 * @method \string getDependsOn()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setDependsOn(\string|\Bitrix\Main\DB\SqlExpression $dependsOn)
	 * @method bool hasDependsOn()
	 * @method bool isDependsOnFilled()
	 * @method bool isDependsOnChanged()
	 * @method \string remindActualDependsOn()
	 * @method \string requireDependsOn()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetDependsOn()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetDependsOn()
	 * @method \string fillDependsOn()
	 * @method \int getDeadlineAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setDeadlineAfter(\int|\Bitrix\Main\DB\SqlExpression $deadlineAfter)
	 * @method bool hasDeadlineAfter()
	 * @method bool isDeadlineAfterFilled()
	 * @method bool isDeadlineAfterChanged()
	 * @method \int remindActualDeadlineAfter()
	 * @method \int requireDeadlineAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetDeadlineAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetDeadlineAfter()
	 * @method \int fillDeadlineAfter()
	 * @method \int getStartDatePlanAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setStartDatePlanAfter(\int|\Bitrix\Main\DB\SqlExpression $startDatePlanAfter)
	 * @method bool hasStartDatePlanAfter()
	 * @method bool isStartDatePlanAfterFilled()
	 * @method bool isStartDatePlanAfterChanged()
	 * @method \int remindActualStartDatePlanAfter()
	 * @method \int requireStartDatePlanAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetStartDatePlanAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetStartDatePlanAfter()
	 * @method \int fillStartDatePlanAfter()
	 * @method \int getEndDatePlanAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setEndDatePlanAfter(\int|\Bitrix\Main\DB\SqlExpression $endDatePlanAfter)
	 * @method bool hasEndDatePlanAfter()
	 * @method bool isEndDatePlanAfterFilled()
	 * @method bool isEndDatePlanAfterChanged()
	 * @method \int remindActualEndDatePlanAfter()
	 * @method \int requireEndDatePlanAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetEndDatePlanAfter()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetEndDatePlanAfter()
	 * @method \int fillEndDatePlanAfter()
	 * @method \int getTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int remindActualTaskId()
	 * @method \int requireTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetTaskId()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetTaskId()
	 * @method \int fillTaskId()
	 * @method \int getTparamType()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setTparamType(\int|\Bitrix\Main\DB\SqlExpression $tparamType)
	 * @method bool hasTparamType()
	 * @method bool isTparamTypeFilled()
	 * @method bool isTparamTypeChanged()
	 * @method \int remindActualTparamType()
	 * @method \int requireTparamType()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetTparamType()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetTparamType()
	 * @method \int fillTparamType()
	 * @method \int getTparamReplicationCount()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setTparamReplicationCount(\int|\Bitrix\Main\DB\SqlExpression $tparamReplicationCount)
	 * @method bool hasTparamReplicationCount()
	 * @method bool isTparamReplicationCountFilled()
	 * @method bool isTparamReplicationCountChanged()
	 * @method \int remindActualTparamReplicationCount()
	 * @method \int requireTparamReplicationCount()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetTparamReplicationCount()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetTparamReplicationCount()
	 * @method \int fillTparamReplicationCount()
	 * @method \string getZombie()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setZombie(\string|\Bitrix\Main\DB\SqlExpression $zombie)
	 * @method bool hasZombie()
	 * @method bool isZombieFilled()
	 * @method bool isZombieChanged()
	 * @method \string remindActualZombie()
	 * @method \string requireZombie()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetZombie()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetZombie()
	 * @method \string fillZombie()
	 * @method \string getFiles()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setFiles(\string|\Bitrix\Main\DB\SqlExpression $files)
	 * @method bool hasFiles()
	 * @method bool isFilesFilled()
	 * @method bool isFilesChanged()
	 * @method \string remindActualFiles()
	 * @method \string requireFiles()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetFiles()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetFiles()
	 * @method \string fillFiles()
	 * @method \Bitrix\Main\EO_User getCreator()
	 * @method \Bitrix\Main\EO_User remindActualCreator()
	 * @method \Bitrix\Main\EO_User requireCreator()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setCreator(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetCreator()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetCreator()
	 * @method bool hasCreator()
	 * @method bool isCreatorFilled()
	 * @method bool isCreatorChanged()
	 * @method \Bitrix\Main\EO_User fillCreator()
	 * @method \Bitrix\Main\EO_User getResponsible()
	 * @method \Bitrix\Main\EO_User remindActualResponsible()
	 * @method \Bitrix\Main\EO_User requireResponsible()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setResponsible(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetResponsible()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetResponsible()
	 * @method bool hasResponsible()
	 * @method bool isResponsibleFilled()
	 * @method bool isResponsibleChanged()
	 * @method \Bitrix\Main\EO_User fillResponsible()
	 * @method \Bitrix\Tasks\Internals\Task\EO_TemplateUts getUtsObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_TemplateUts remindActualUtsObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_TemplateUts requireUtsObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setUtsObject(\Bitrix\Tasks\Internals\Task\EO_TemplateUts $object)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template resetUtsObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetUtsObject()
	 * @method bool hasUtsObject()
	 * @method bool isUtsObjectFilled()
	 * @method bool isUtsObjectChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_TemplateUts fillUtsObject()
	 * @method \string getUfCrmTask()
	 * @method \string remindActualUfCrmTask()
	 * @method \string requireUfCrmTask()
	 * @method bool hasUfCrmTask()
	 * @method bool isUfCrmTaskFilled()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetUfCrmTask()
	 * @method \string fillUfCrmTask()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setUfCrmTask(\string[] $ufCrmTask)
	 * @method bool isUfCrmTaskChanged()
	 * @method \string getUfTaskWebdavFiles()
	 * @method \string remindActualUfTaskWebdavFiles()
	 * @method \string requireUfTaskWebdavFiles()
	 * @method bool hasUfTaskWebdavFiles()
	 * @method bool isUfTaskWebdavFilesFilled()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetUfTaskWebdavFiles()
	 * @method \string fillUfTaskWebdavFiles()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setUfTaskWebdavFiles(\string[] $ufTaskWebdavFiles)
	 * @method bool isUfTaskWebdavFilesChanged()
	 * @method \float getUfAuto793378257947()
	 * @method \float remindActualUfAuto793378257947()
	 * @method \float requireUfAuto793378257947()
	 * @method bool hasUfAuto793378257947()
	 * @method bool isUfAuto793378257947Filled()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetUfAuto793378257947()
	 * @method \float fillUfAuto793378257947()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template setUfAuto793378257947(\float $ufAuto793378257947)
	 * @method bool isUfAuto793378257947Changed()
	 * @method \string getUfCrmTaskSingle()
	 * @method \string remindActualUfCrmTaskSingle()
	 * @method \string requireUfCrmTaskSingle()
	 * @method bool hasUfCrmTaskSingle()
	 * @method bool isUfCrmTaskSingleFilled()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetUfCrmTaskSingle()
	 * @method \string fillUfCrmTaskSingle()
	 * @method \int getUfTaskWebdavFilesSingle()
	 * @method \int remindActualUfTaskWebdavFilesSingle()
	 * @method \int requireUfTaskWebdavFilesSingle()
	 * @method bool hasUfTaskWebdavFilesSingle()
	 * @method bool isUfTaskWebdavFilesSingleFilled()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unsetUfTaskWebdavFilesSingle()
	 * @method \int fillUfTaskWebdavFilesSingle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Template wakeUp($data)
	 */
	class EO_Template {
		/* @var \Bitrix\Tasks\Internals\Task\TemplateTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\TemplateTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * EO_Template_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \boolean[] getDescriptionInBbcodeList()
	 * @method \boolean[] fillDescriptionInBbcode()
	 * @method \string[] getPriorityList()
	 * @method \string[] fillPriority()
	 * @method \string[] getStatusList()
	 * @method \string[] fillStatus()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getTimeEstimateList()
	 * @method \int[] fillTimeEstimate()
	 * @method \boolean[] getReplicateList()
	 * @method \boolean[] fillReplicate()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \boolean[] getAllowChangeDeadlineList()
	 * @method \boolean[] fillAllowChangeDeadline()
	 * @method \boolean[] getAllowTimeTrackingList()
	 * @method \boolean[] fillAllowTimeTracking()
	 * @method \boolean[] getTaskControlList()
	 * @method \boolean[] fillTaskControl()
	 * @method \boolean[] getAddInReportList()
	 * @method \boolean[] fillAddInReport()
	 * @method \boolean[] getMatchWorkTimeList()
	 * @method \boolean[] fillMatchWorkTime()
	 * @method \int[] getGroupIdList()
	 * @method \int[] fillGroupId()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \boolean[] getMultitaskList()
	 * @method \boolean[] fillMultitask()
	 * @method \string[] getSiteIdList()
	 * @method \string[] fillSiteId()
	 * @method \string[] getReplicateParamsList()
	 * @method \string[] fillReplicateParams()
	 * @method \string[] getTagsList()
	 * @method \string[] fillTags()
	 * @method \string[] getAccomplicesList()
	 * @method \string[] fillAccomplices()
	 * @method \string[] getAuditorsList()
	 * @method \string[] fillAuditors()
	 * @method \string[] getResponsiblesList()
	 * @method \string[] fillResponsibles()
	 * @method \string[] getDependsOnList()
	 * @method \string[] fillDependsOn()
	 * @method \int[] getDeadlineAfterList()
	 * @method \int[] fillDeadlineAfter()
	 * @method \int[] getStartDatePlanAfterList()
	 * @method \int[] fillStartDatePlanAfter()
	 * @method \int[] getEndDatePlanAfterList()
	 * @method \int[] fillEndDatePlanAfter()
	 * @method \int[] getTaskIdList()
	 * @method \int[] fillTaskId()
	 * @method \int[] getTparamTypeList()
	 * @method \int[] fillTparamType()
	 * @method \int[] getTparamReplicationCountList()
	 * @method \int[] fillTparamReplicationCount()
	 * @method \string[] getZombieList()
	 * @method \string[] fillZombie()
	 * @method \string[] getFilesList()
	 * @method \string[] fillFiles()
	 * @method \Bitrix\Main\EO_User[] getCreatorList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection getCreatorCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreator()
	 * @method \Bitrix\Main\EO_User[] getResponsibleList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection getResponsibleCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsible()
	 * @method \Bitrix\Tasks\Internals\Task\EO_TemplateUts[] getUtsObjectList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection getUtsObjectCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_TemplateUts_Collection fillUtsObject()
	 * @method \string[] getUfCrmTaskList()
	 * @method \string[] fillUfCrmTask()
	 * @method \string[] getUfTaskWebdavFilesList()
	 * @method \string[] fillUfTaskWebdavFiles()
	 * @method \float[] getUfAuto793378257947List()
	 * @method \float[] fillUfAuto793378257947()
	 * @method \string[] getUfCrmTaskSingleList()
	 * @method \string[] fillUfCrmTaskSingle()
	 * @method \int[] getUfTaskWebdavFilesSingleList()
	 * @method \int[] fillUfTaskWebdavFilesSingle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\EO_Template $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\EO_Template $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\EO_Template $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Template_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Template_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\TemplateTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\TemplateTable';
	}
}
namespace Bitrix\Tasks\Internals\Task {
	/**
	 * @method static EO_Template_Query query()
	 * @method static EO_Template_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Template_Result getById($id)
	 * @method static EO_Template_Result getList(array $parameters = array())
	 * @method static EO_Template_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Template createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Template_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Template wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\EO_Template_Collection wakeUpCollection($rows)
	 */
	class TemplateTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Template_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection fetchCollection()
	 */
	class EO_Template_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection fetchCollection()
	 */
	class EO_Template_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection wakeUpCollection($rows)
	 */
	class EO_Template_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\Template\DependenceTable */
namespace Bitrix\Tasks\Internals\Task\Template {
	/**
	 * EO_Dependence
	 * @see \Bitrix\Tasks\Internals\Task\Template\DependenceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getTemplateId()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setTemplateId(\int|\Bitrix\Main\DB\SqlExpression $templateId)
	 * @method bool hasTemplateId()
	 * @method bool isTemplateIdFilled()
	 * @method bool isTemplateIdChanged()
	 * @method \int getParentTemplateId()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setParentTemplateId(\int|\Bitrix\Main\DB\SqlExpression $parentTemplateId)
	 * @method bool hasParentTemplateId()
	 * @method bool isParentTemplateIdFilled()
	 * @method bool isParentTemplateIdChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template getTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template remindActualTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template requireTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setTemplate(\Bitrix\Tasks\Internals\Task\EO_Template $object)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence resetTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence unsetTemplate()
	 * @method bool hasTemplate()
	 * @method bool isTemplateFilled()
	 * @method bool isTemplateChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template fillTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template getParentTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template remindActualParentTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template requireParentTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setParentTemplate(\Bitrix\Tasks\Internals\Task\EO_Template $object)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence resetParentTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence unsetParentTemplate()
	 * @method bool hasParentTemplate()
	 * @method bool isParentTemplateFilled()
	 * @method bool isParentTemplateChanged()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template fillParentTemplate()
	 * @method \boolean getDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setDirect(\boolean|\Bitrix\Main\DB\SqlExpression $direct)
	 * @method bool hasDirect()
	 * @method bool isDirectFilled()
	 * @method bool isDirectChanged()
	 * @method \boolean remindActualDirect()
	 * @method \boolean requireDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence resetDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence unsetDirect()
	 * @method \boolean fillDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence getParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence remindActualParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence requireParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setParentNode(\Bitrix\Tasks\Internals\Task\Template\EO_Dependence $object)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence resetParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence unsetParentNode()
	 * @method bool hasParentNode()
	 * @method bool isParentNodeFilled()
	 * @method bool isParentNodeChanged()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence fillParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence getParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence remindActualParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence requireParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setParentNodes(\Bitrix\Tasks\Internals\Task\Template\EO_Dependence $object)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence resetParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence unsetParentNodes()
	 * @method bool hasParentNodes()
	 * @method bool isParentNodesFilled()
	 * @method bool isParentNodesChanged()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence fillParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence getChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence remindActualChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence requireChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setChildNodes(\Bitrix\Tasks\Internals\Task\Template\EO_Dependence $object)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence resetChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence unsetChildNodes()
	 * @method bool hasChildNodes()
	 * @method bool isChildNodesFilled()
	 * @method bool isChildNodesChanged()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence fillChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence getChildNodesDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence remindActualChildNodesDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence requireChildNodesDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence setChildNodesDirect(\Bitrix\Tasks\Internals\Task\Template\EO_Dependence $object)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence resetChildNodesDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence unsetChildNodesDirect()
	 * @method bool hasChildNodesDirect()
	 * @method bool isChildNodesDirectFilled()
	 * @method bool isChildNodesDirectChanged()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence fillChildNodesDirect()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_Dependence wakeUp($data)
	 */
	class EO_Dependence {
		/* @var \Bitrix\Tasks\Internals\Task\Template\DependenceTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\Template\DependenceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task\Template {
	/**
	 * EO_Dependence_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getTemplateIdList()
	 * @method \int[] getParentTemplateIdList()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template[] getTemplateList()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection getTemplateCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection fillTemplate()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template[] getParentTemplateList()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection getParentTemplateCollection()
	 * @method \Bitrix\Tasks\Internals\Task\EO_Template_Collection fillParentTemplate()
	 * @method \boolean[] getDirectList()
	 * @method \boolean[] fillDirect()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence[] getParentNodeList()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection getParentNodeCollection()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection fillParentNode()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence[] getParentNodesList()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection getParentNodesCollection()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection fillParentNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence[] getChildNodesList()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection getChildNodesCollection()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection fillChildNodes()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence[] getChildNodesDirectList()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection getChildNodesDirectCollection()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection fillChildNodesDirect()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\Template\EO_Dependence $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\Template\EO_Dependence $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\Template\EO_Dependence $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Dependence_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\Template\DependenceTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\Template\DependenceTable';
	}
}
namespace Bitrix\Tasks\Internals\Task\Template {
	/**
	 * @method static EO_Dependence_Query query()
	 * @method static EO_Dependence_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Dependence_Result getById($id)
	 * @method static EO_Dependence_Result getList(array $parameters = array())
	 * @method static EO_Dependence_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_Dependence createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_Dependence wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection wakeUpCollection($rows)
	 */
	class DependenceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Dependence_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection fetchCollection()
	 */
	class EO_Dependence_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection fetchCollection()
	 */
	class EO_Dependence_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_Dependence_Collection wakeUpCollection($rows)
	 */
	class EO_Dependence_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Task\Template\CheckListTable */
namespace Bitrix\Tasks\Internals\Task\Template {
	/**
	 * EO_CheckList
	 * @see \Bitrix\Tasks\Internals\Task\Template\CheckListTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTemplateId()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList setTemplateId(\int|\Bitrix\Main\DB\SqlExpression $templateId)
	 * @method bool hasTemplateId()
	 * @method bool isTemplateIdFilled()
	 * @method bool isTemplateIdChanged()
	 * @method \int remindActualTemplateId()
	 * @method \int requireTemplateId()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList resetTemplateId()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetTemplateId()
	 * @method \int fillTemplateId()
	 * @method \int getSort()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList resetSort()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetSort()
	 * @method \int fillSort()
	 * @method \string getTitle()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList resetTitle()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetTitle()
	 * @method \string fillTitle()
	 * @method \int getChecked()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList setChecked(\int|\Bitrix\Main\DB\SqlExpression $checked)
	 * @method bool hasChecked()
	 * @method bool isCheckedFilled()
	 * @method bool isCheckedChanged()
	 * @method \int remindActualChecked()
	 * @method \int requireChecked()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList resetChecked()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetChecked()
	 * @method \int fillChecked()
	 * @method \boolean getIsImportant()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList setIsImportant(\boolean|\Bitrix\Main\DB\SqlExpression $isImportant)
	 * @method bool hasIsImportant()
	 * @method bool isIsImportantFilled()
	 * @method bool isIsImportantChanged()
	 * @method \boolean remindActualIsImportant()
	 * @method \boolean requireIsImportant()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList resetIsImportant()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetIsImportant()
	 * @method \boolean fillIsImportant()
	 * @method \string getIsComplete()
	 * @method \string remindActualIsComplete()
	 * @method \string requireIsComplete()
	 * @method bool hasIsComplete()
	 * @method bool isIsCompleteFilled()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetIsComplete()
	 * @method \string fillIsComplete()
	 * @method \int getSortIndex()
	 * @method \int remindActualSortIndex()
	 * @method \int requireSortIndex()
	 * @method bool hasSortIndex()
	 * @method bool isSortIndexFilled()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetSortIndex()
	 * @method \int fillSortIndex()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckListUts getUtsObject()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckListUts remindActualUtsObject()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckListUts requireUtsObject()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList setUtsObject(\Bitrix\Tasks\Internals\Task\Template\EO_CheckListUts $object)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList resetUtsObject()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetUtsObject()
	 * @method bool hasUtsObject()
	 * @method bool isUtsObjectFilled()
	 * @method bool isUtsObjectChanged()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckListUts fillUtsObject()
	 * @method \string getUfChecklistFiles()
	 * @method \string remindActualUfChecklistFiles()
	 * @method \string requireUfChecklistFiles()
	 * @method bool hasUfChecklistFiles()
	 * @method bool isUfChecklistFilesFilled()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetUfChecklistFiles()
	 * @method \string fillUfChecklistFiles()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList setUfChecklistFiles(\string[] $ufChecklistFiles)
	 * @method bool isUfChecklistFilesChanged()
	 * @method \int getUfChecklistFilesSingle()
	 * @method \int remindActualUfChecklistFilesSingle()
	 * @method \int requireUfChecklistFilesSingle()
	 * @method bool hasUfChecklistFilesSingle()
	 * @method bool isUfChecklistFilesSingleFilled()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unsetUfChecklistFilesSingle()
	 * @method \int fillUfChecklistFilesSingle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_CheckList wakeUp($data)
	 */
	class EO_CheckList {
		/* @var \Bitrix\Tasks\Internals\Task\Template\CheckListTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\Template\CheckListTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Task\Template {
	/**
	 * EO_CheckList_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTemplateIdList()
	 * @method \int[] fillTemplateId()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \int[] getCheckedList()
	 * @method \int[] fillChecked()
	 * @method \boolean[] getIsImportantList()
	 * @method \boolean[] fillIsImportant()
	 * @method \string[] getIsCompleteList()
	 * @method \string[] fillIsComplete()
	 * @method \int[] getSortIndexList()
	 * @method \int[] fillSortIndex()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckListUts[] getUtsObjectList()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList_Collection getUtsObjectCollection()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckListUts_Collection fillUtsObject()
	 * @method \string[] getUfChecklistFilesList()
	 * @method \string[] fillUfChecklistFiles()
	 * @method \int[] getUfChecklistFilesSingleList()
	 * @method \int[] fillUfChecklistFilesSingle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Task\Template\EO_CheckList $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Task\Template\EO_CheckList $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Task\Template\EO_CheckList $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_CheckList_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CheckList_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Task\Template\CheckListTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Task\Template\CheckListTable';
	}
}
namespace Bitrix\Tasks\Internals\Task\Template {
	/**
	 * @method static EO_CheckList_Query query()
	 * @method static EO_CheckList_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CheckList_Result getById($id)
	 * @method static EO_CheckList_Result getList(array $parameters = array())
	 * @method static EO_CheckList_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_CheckList createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_CheckList_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_CheckList wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Task\Template\EO_CheckList_Collection wakeUpCollection($rows)
	 */
	class CheckListTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_CheckList_Result exec()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList_Collection fetchCollection()
	 */
	class EO_CheckList_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList fetchObject()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList_Collection fetchCollection()
	 */
	class EO_CheckList_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Task\Template\EO_CheckList_Collection wakeUpCollection($rows)
	 */
	class EO_CheckList_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Tasks\Internals\Notification\Task\ThrottleTable */
namespace Bitrix\Tasks\Internals\Notification\Task {
	/**
	 * EO_Throttle
	 * @see \Bitrix\Tasks\Internals\Notification\Task\ThrottleTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTaskId()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int remindActualTaskId()
	 * @method \int requireTaskId()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle resetTaskId()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle unsetTaskId()
	 * @method \int fillTaskId()
	 * @method \int getAuthorId()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle setAuthorId(\int|\Bitrix\Main\DB\SqlExpression $authorId)
	 * @method bool hasAuthorId()
	 * @method bool isAuthorIdFilled()
	 * @method bool isAuthorIdChanged()
	 * @method \int remindActualAuthorId()
	 * @method \int requireAuthorId()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle resetAuthorId()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle unsetAuthorId()
	 * @method \int fillAuthorId()
	 * @method \string getInformAuthor()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle setInformAuthor(\string|\Bitrix\Main\DB\SqlExpression $informAuthor)
	 * @method bool hasInformAuthor()
	 * @method bool isInformAuthorFilled()
	 * @method bool isInformAuthorChanged()
	 * @method \string remindActualInformAuthor()
	 * @method \string requireInformAuthor()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle resetInformAuthor()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle unsetInformAuthor()
	 * @method \string fillInformAuthor()
	 * @method \string getStateOrig()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle setStateOrig(\string|\Bitrix\Main\DB\SqlExpression $stateOrig)
	 * @method bool hasStateOrig()
	 * @method bool isStateOrigFilled()
	 * @method bool isStateOrigChanged()
	 * @method \string remindActualStateOrig()
	 * @method \string requireStateOrig()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle resetStateOrig()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle unsetStateOrig()
	 * @method \string fillStateOrig()
	 * @method \string getStateLast()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle setStateLast(\string|\Bitrix\Main\DB\SqlExpression $stateLast)
	 * @method bool hasStateLast()
	 * @method bool isStateLastFilled()
	 * @method bool isStateLastChanged()
	 * @method \string remindActualStateLast()
	 * @method \string requireStateLast()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle resetStateLast()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle unsetStateLast()
	 * @method \string fillStateLast()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle set($fieldName, $value)
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle reset($fieldName)
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle wakeUp($data)
	 */
	class EO_Throttle {
		/* @var \Bitrix\Tasks\Internals\Notification\Task\ThrottleTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Notification\Task\ThrottleTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Tasks\Internals\Notification\Task {
	/**
	 * EO_Throttle_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTaskIdList()
	 * @method \int[] fillTaskId()
	 * @method \int[] getAuthorIdList()
	 * @method \int[] fillAuthorId()
	 * @method \string[] getInformAuthorList()
	 * @method \string[] fillInformAuthor()
	 * @method \string[] getStateOrigList()
	 * @method \string[] fillStateOrig()
	 * @method \string[] getStateLastList()
	 * @method \string[] fillStateLast()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Tasks\Internals\Notification\Task\EO_Throttle $object)
	 * @method bool has(\Bitrix\Tasks\Internals\Notification\Task\EO_Throttle $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle getByPrimary($primary)
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle[] getAll()
	 * @method bool remove(\Bitrix\Tasks\Internals\Notification\Task\EO_Throttle $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Throttle_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Tasks\Internals\Notification\Task\ThrottleTable */
		static public $dataClass = '\Bitrix\Tasks\Internals\Notification\Task\ThrottleTable';
	}
}
namespace Bitrix\Tasks\Internals\Notification\Task {
	/**
	 * @method static EO_Throttle_Query query()
	 * @method static EO_Throttle_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Throttle_Result getById($id)
	 * @method static EO_Throttle_Result getList(array $parameters = array())
	 * @method static EO_Throttle_Entity getEntity()
	 * @method static \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle createObject($setDefaultValues = true)
	 * @method static \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle_Collection createCollection()
	 * @method static \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle wakeUpObject($row)
	 * @method static \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle_Collection wakeUpCollection($rows)
	 */
	class ThrottleTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Throttle_Result exec()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle fetchObject()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle_Collection fetchCollection()
	 */
	class EO_Throttle_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle fetchObject()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle_Collection fetchCollection()
	 */
	class EO_Throttle_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle createObject($setDefaultValues = true)
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle_Collection createCollection()
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle wakeUpObject($row)
	 * @method \Bitrix\Tasks\Internals\Notification\Task\EO_Throttle_Collection wakeUpCollection($rows)
	 */
	class EO_Throttle_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\SiteTable */
namespace Bitrix\Main {
	/**
	 * EO_Site
	 * @see \Bitrix\Main\SiteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getLid()
	 * @method \Bitrix\Main\EO_Site setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \int getSort()
	 * @method \Bitrix\Main\EO_Site setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Main\EO_Site resetSort()
	 * @method \Bitrix\Main\EO_Site unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getDef()
	 * @method \Bitrix\Main\EO_Site setDef(\boolean|\Bitrix\Main\DB\SqlExpression $def)
	 * @method bool hasDef()
	 * @method bool isDefFilled()
	 * @method bool isDefChanged()
	 * @method \boolean remindActualDef()
	 * @method \boolean requireDef()
	 * @method \Bitrix\Main\EO_Site resetDef()
	 * @method \Bitrix\Main\EO_Site unsetDef()
	 * @method \boolean fillDef()
	 * @method \boolean getActive()
	 * @method \Bitrix\Main\EO_Site setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Main\EO_Site resetActive()
	 * @method \Bitrix\Main\EO_Site unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getName()
	 * @method \Bitrix\Main\EO_Site setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\EO_Site resetName()
	 * @method \Bitrix\Main\EO_Site unsetName()
	 * @method \string fillName()
	 * @method \string getDir()
	 * @method \Bitrix\Main\EO_Site setDir(\string|\Bitrix\Main\DB\SqlExpression $dir)
	 * @method bool hasDir()
	 * @method bool isDirFilled()
	 * @method bool isDirChanged()
	 * @method \string remindActualDir()
	 * @method \string requireDir()
	 * @method \Bitrix\Main\EO_Site resetDir()
	 * @method \Bitrix\Main\EO_Site unsetDir()
	 * @method \string fillDir()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Main\EO_Site setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Main\EO_Site resetLanguageId()
	 * @method \Bitrix\Main\EO_Site unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \string getDocRoot()
	 * @method \Bitrix\Main\EO_Site setDocRoot(\string|\Bitrix\Main\DB\SqlExpression $docRoot)
	 * @method bool hasDocRoot()
	 * @method bool isDocRootFilled()
	 * @method bool isDocRootChanged()
	 * @method \string remindActualDocRoot()
	 * @method \string requireDocRoot()
	 * @method \Bitrix\Main\EO_Site resetDocRoot()
	 * @method \Bitrix\Main\EO_Site unsetDocRoot()
	 * @method \string fillDocRoot()
	 * @method \boolean getDomainLimited()
	 * @method \Bitrix\Main\EO_Site setDomainLimited(\boolean|\Bitrix\Main\DB\SqlExpression $domainLimited)
	 * @method bool hasDomainLimited()
	 * @method bool isDomainLimitedFilled()
	 * @method bool isDomainLimitedChanged()
	 * @method \boolean remindActualDomainLimited()
	 * @method \boolean requireDomainLimited()
	 * @method \Bitrix\Main\EO_Site resetDomainLimited()
	 * @method \Bitrix\Main\EO_Site unsetDomainLimited()
	 * @method \boolean fillDomainLimited()
	 * @method \string getServerName()
	 * @method \Bitrix\Main\EO_Site setServerName(\string|\Bitrix\Main\DB\SqlExpression $serverName)
	 * @method bool hasServerName()
	 * @method bool isServerNameFilled()
	 * @method bool isServerNameChanged()
	 * @method \string remindActualServerName()
	 * @method \string requireServerName()
	 * @method \Bitrix\Main\EO_Site resetServerName()
	 * @method \Bitrix\Main\EO_Site unsetServerName()
	 * @method \string fillServerName()
	 * @method \string getSiteName()
	 * @method \Bitrix\Main\EO_Site setSiteName(\string|\Bitrix\Main\DB\SqlExpression $siteName)
	 * @method bool hasSiteName()
	 * @method bool isSiteNameFilled()
	 * @method bool isSiteNameChanged()
	 * @method \string remindActualSiteName()
	 * @method \string requireSiteName()
	 * @method \Bitrix\Main\EO_Site resetSiteName()
	 * @method \Bitrix\Main\EO_Site unsetSiteName()
	 * @method \string fillSiteName()
	 * @method \string getEmail()
	 * @method \Bitrix\Main\EO_Site setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Bitrix\Main\EO_Site resetEmail()
	 * @method \Bitrix\Main\EO_Site unsetEmail()
	 * @method \string fillEmail()
	 * @method \int getCultureId()
	 * @method \Bitrix\Main\EO_Site setCultureId(\int|\Bitrix\Main\DB\SqlExpression $cultureId)
	 * @method bool hasCultureId()
	 * @method bool isCultureIdFilled()
	 * @method bool isCultureIdChanged()
	 * @method \int remindActualCultureId()
	 * @method \int requireCultureId()
	 * @method \Bitrix\Main\EO_Site resetCultureId()
	 * @method \Bitrix\Main\EO_Site unsetCultureId()
	 * @method \int fillCultureId()
	 * @method \Bitrix\Main\Context\Culture getCulture()
	 * @method \Bitrix\Main\Context\Culture remindActualCulture()
	 * @method \Bitrix\Main\Context\Culture requireCulture()
	 * @method \Bitrix\Main\EO_Site setCulture(\Bitrix\Main\Context\Culture $object)
	 * @method \Bitrix\Main\EO_Site resetCulture()
	 * @method \Bitrix\Main\EO_Site unsetCulture()
	 * @method bool hasCulture()
	 * @method bool isCultureFilled()
	 * @method bool isCultureChanged()
	 * @method \Bitrix\Main\Context\Culture fillCulture()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_Site set($fieldName, $value)
	 * @method \Bitrix\Main\EO_Site reset($fieldName)
	 * @method \Bitrix\Main\EO_Site unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_Site wakeUp($data)
	 */
	class EO_Site {
		/* @var \Bitrix\Main\SiteTable */
		static public $dataClass = '\Bitrix\Main\SiteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_Site_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getLidList()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getDefList()
	 * @method \boolean[] fillDef()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDirList()
	 * @method \string[] fillDir()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \string[] getDocRootList()
	 * @method \string[] fillDocRoot()
	 * @method \boolean[] getDomainLimitedList()
	 * @method \boolean[] fillDomainLimited()
	 * @method \string[] getServerNameList()
	 * @method \string[] fillServerName()
	 * @method \string[] getSiteNameList()
	 * @method \string[] fillSiteName()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \int[] getCultureIdList()
	 * @method \int[] fillCultureId()
	 * @method \Bitrix\Main\Context\Culture[] getCultureList()
	 * @method \Bitrix\Main\EO_Site_Collection getCultureCollection()
	 * @method \Bitrix\Main\Localization\EO_Culture_Collection fillCulture()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_Site $object)
	 * @method bool has(\Bitrix\Main\EO_Site $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_Site getByPrimary($primary)
	 * @method \Bitrix\Main\EO_Site[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_Site $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_Site_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_Site current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Site_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\SiteTable */
		static public $dataClass = '\Bitrix\Main\SiteTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_Site_Query query()
	 * @method static EO_Site_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Site_Result getById($id)
	 * @method static EO_Site_Result getList(array $parameters = array())
	 * @method static EO_Site_Entity getEntity()
	 * @method static \Bitrix\Main\EO_Site createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_Site_Collection createCollection()
	 * @method static \Bitrix\Main\EO_Site wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_Site_Collection wakeUpCollection($rows)
	 */
	class SiteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Site_Result exec()
	 * @method \Bitrix\Main\EO_Site fetchObject()
	 * @method \Bitrix\Main\EO_Site_Collection fetchCollection()
	 */
	class EO_Site_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_Site fetchObject()
	 * @method \Bitrix\Main\EO_Site_Collection fetchCollection()
	 */
	class EO_Site_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_Site createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_Site_Collection createCollection()
	 * @method \Bitrix\Main\EO_Site wakeUpObject($row)
	 * @method \Bitrix\Main\EO_Site_Collection wakeUpCollection($rows)
	 */
	class EO_Site_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Socialservices\ApTable */
namespace Bitrix\Socialservices {
	/**
	 * EO_Ap
	 * @see \Bitrix\Socialservices\ApTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Socialservices\EO_Ap setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Socialservices\EO_Ap setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Socialservices\EO_Ap resetTimestampX()
	 * @method \Bitrix\Socialservices\EO_Ap unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getUserId()
	 * @method \Bitrix\Socialservices\EO_Ap setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Socialservices\EO_Ap resetUserId()
	 * @method \Bitrix\Socialservices\EO_Ap unsetUserId()
	 * @method \int fillUserId()
	 * @method \string getDomain()
	 * @method \Bitrix\Socialservices\EO_Ap setDomain(\string|\Bitrix\Main\DB\SqlExpression $domain)
	 * @method bool hasDomain()
	 * @method bool isDomainFilled()
	 * @method bool isDomainChanged()
	 * @method \string remindActualDomain()
	 * @method \string requireDomain()
	 * @method \Bitrix\Socialservices\EO_Ap resetDomain()
	 * @method \Bitrix\Socialservices\EO_Ap unsetDomain()
	 * @method \string fillDomain()
	 * @method \string getEndpoint()
	 * @method \Bitrix\Socialservices\EO_Ap setEndpoint(\string|\Bitrix\Main\DB\SqlExpression $endpoint)
	 * @method bool hasEndpoint()
	 * @method bool isEndpointFilled()
	 * @method bool isEndpointChanged()
	 * @method \string remindActualEndpoint()
	 * @method \string requireEndpoint()
	 * @method \Bitrix\Socialservices\EO_Ap resetEndpoint()
	 * @method \Bitrix\Socialservices\EO_Ap unsetEndpoint()
	 * @method \string fillEndpoint()
	 * @method \string getLogin()
	 * @method \Bitrix\Socialservices\EO_Ap setLogin(\string|\Bitrix\Main\DB\SqlExpression $login)
	 * @method bool hasLogin()
	 * @method bool isLoginFilled()
	 * @method bool isLoginChanged()
	 * @method \string remindActualLogin()
	 * @method \string requireLogin()
	 * @method \Bitrix\Socialservices\EO_Ap resetLogin()
	 * @method \Bitrix\Socialservices\EO_Ap unsetLogin()
	 * @method \string fillLogin()
	 * @method \string getPassword()
	 * @method \Bitrix\Socialservices\EO_Ap setPassword(\string|\Bitrix\Main\DB\SqlExpression $password)
	 * @method bool hasPassword()
	 * @method bool isPasswordFilled()
	 * @method bool isPasswordChanged()
	 * @method \string remindActualPassword()
	 * @method \string requirePassword()
	 * @method \Bitrix\Socialservices\EO_Ap resetPassword()
	 * @method \Bitrix\Socialservices\EO_Ap unsetPassword()
	 * @method \string fillPassword()
	 * @method \Bitrix\Main\Type\DateTime getLastAuthorize()
	 * @method \Bitrix\Socialservices\EO_Ap setLastAuthorize(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastAuthorize)
	 * @method bool hasLastAuthorize()
	 * @method bool isLastAuthorizeFilled()
	 * @method bool isLastAuthorizeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastAuthorize()
	 * @method \Bitrix\Main\Type\DateTime requireLastAuthorize()
	 * @method \Bitrix\Socialservices\EO_Ap resetLastAuthorize()
	 * @method \Bitrix\Socialservices\EO_Ap unsetLastAuthorize()
	 * @method \Bitrix\Main\Type\DateTime fillLastAuthorize()
	 * @method \string getSettings()
	 * @method \Bitrix\Socialservices\EO_Ap setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Socialservices\EO_Ap resetSettings()
	 * @method \Bitrix\Socialservices\EO_Ap unsetSettings()
	 * @method \string fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Socialservices\EO_Ap set($fieldName, $value)
	 * @method \Bitrix\Socialservices\EO_Ap reset($fieldName)
	 * @method \Bitrix\Socialservices\EO_Ap unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Socialservices\EO_Ap wakeUp($data)
	 */
	class EO_Ap {
		/* @var \Bitrix\Socialservices\ApTable */
		static public $dataClass = '\Bitrix\Socialservices\ApTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Socialservices {
	/**
	 * EO_Ap_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \string[] getDomainList()
	 * @method \string[] fillDomain()
	 * @method \string[] getEndpointList()
	 * @method \string[] fillEndpoint()
	 * @method \string[] getLoginList()
	 * @method \string[] fillLogin()
	 * @method \string[] getPasswordList()
	 * @method \string[] fillPassword()
	 * @method \Bitrix\Main\Type\DateTime[] getLastAuthorizeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastAuthorize()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Socialservices\EO_Ap $object)
	 * @method bool has(\Bitrix\Socialservices\EO_Ap $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Socialservices\EO_Ap getByPrimary($primary)
	 * @method \Bitrix\Socialservices\EO_Ap[] getAll()
	 * @method bool remove(\Bitrix\Socialservices\EO_Ap $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Socialservices\EO_Ap_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Socialservices\EO_Ap current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Ap_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Socialservices\ApTable */
		static public $dataClass = '\Bitrix\Socialservices\ApTable';
	}
}
namespace Bitrix\Socialservices {
	/**
	 * @method static EO_Ap_Query query()
	 * @method static EO_Ap_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Ap_Result getById($id)
	 * @method static EO_Ap_Result getList(array $parameters = array())
	 * @method static EO_Ap_Entity getEntity()
	 * @method static \Bitrix\Socialservices\EO_Ap createObject($setDefaultValues = true)
	 * @method static \Bitrix\Socialservices\EO_Ap_Collection createCollection()
	 * @method static \Bitrix\Socialservices\EO_Ap wakeUpObject($row)
	 * @method static \Bitrix\Socialservices\EO_Ap_Collection wakeUpCollection($rows)
	 */
	class ApTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Ap_Result exec()
	 * @method \Bitrix\Socialservices\EO_Ap fetchObject()
	 * @method \Bitrix\Socialservices\EO_Ap_Collection fetchCollection()
	 */
	class EO_Ap_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Socialservices\EO_Ap fetchObject()
	 * @method \Bitrix\Socialservices\EO_Ap_Collection fetchCollection()
	 */
	class EO_Ap_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Socialservices\EO_Ap createObject($setDefaultValues = true)
	 * @method \Bitrix\Socialservices\EO_Ap_Collection createCollection()
	 * @method \Bitrix\Socialservices\EO_Ap wakeUpObject($row)
	 * @method \Bitrix\Socialservices\EO_Ap_Collection wakeUpCollection($rows)
	 */
	class EO_Ap_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\GroupTable */
namespace Bitrix\Main {
	/**
	 * EO_Group
	 * @see \Bitrix\Main\GroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_Group setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Main\EO_Group setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Main\EO_Group resetTimestampX()
	 * @method \Bitrix\Main\EO_Group unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \boolean getActive()
	 * @method \Bitrix\Main\EO_Group setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Main\EO_Group resetActive()
	 * @method \Bitrix\Main\EO_Group unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getCSort()
	 * @method \Bitrix\Main\EO_Group setCSort(\int|\Bitrix\Main\DB\SqlExpression $cSort)
	 * @method bool hasCSort()
	 * @method bool isCSortFilled()
	 * @method bool isCSortChanged()
	 * @method \int remindActualCSort()
	 * @method \int requireCSort()
	 * @method \Bitrix\Main\EO_Group resetCSort()
	 * @method \Bitrix\Main\EO_Group unsetCSort()
	 * @method \int fillCSort()
	 * @method \boolean getIsSystem()
	 * @method \Bitrix\Main\EO_Group setIsSystem(\boolean|\Bitrix\Main\DB\SqlExpression $isSystem)
	 * @method bool hasIsSystem()
	 * @method bool isIsSystemFilled()
	 * @method bool isIsSystemChanged()
	 * @method \boolean remindActualIsSystem()
	 * @method \boolean requireIsSystem()
	 * @method \Bitrix\Main\EO_Group resetIsSystem()
	 * @method \Bitrix\Main\EO_Group unsetIsSystem()
	 * @method \boolean fillIsSystem()
	 * @method \boolean getAnonymous()
	 * @method \Bitrix\Main\EO_Group setAnonymous(\boolean|\Bitrix\Main\DB\SqlExpression $anonymous)
	 * @method bool hasAnonymous()
	 * @method bool isAnonymousFilled()
	 * @method bool isAnonymousChanged()
	 * @method \boolean remindActualAnonymous()
	 * @method \boolean requireAnonymous()
	 * @method \Bitrix\Main\EO_Group resetAnonymous()
	 * @method \Bitrix\Main\EO_Group unsetAnonymous()
	 * @method \boolean fillAnonymous()
	 * @method \string getName()
	 * @method \Bitrix\Main\EO_Group setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\EO_Group resetName()
	 * @method \Bitrix\Main\EO_Group unsetName()
	 * @method \string fillName()
	 * @method \string getDescription()
	 * @method \Bitrix\Main\EO_Group setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Main\EO_Group resetDescription()
	 * @method \Bitrix\Main\EO_Group unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getStringId()
	 * @method \Bitrix\Main\EO_Group setStringId(\string|\Bitrix\Main\DB\SqlExpression $stringId)
	 * @method bool hasStringId()
	 * @method bool isStringIdFilled()
	 * @method bool isStringIdChanged()
	 * @method \string remindActualStringId()
	 * @method \string requireStringId()
	 * @method \Bitrix\Main\EO_Group resetStringId()
	 * @method \Bitrix\Main\EO_Group unsetStringId()
	 * @method \string fillStringId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_Group set($fieldName, $value)
	 * @method \Bitrix\Main\EO_Group reset($fieldName)
	 * @method \Bitrix\Main\EO_Group unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_Group wakeUp($data)
	 */
	class EO_Group {
		/* @var \Bitrix\Main\GroupTable */
		static public $dataClass = '\Bitrix\Main\GroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_Group_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getCSortList()
	 * @method \int[] fillCSort()
	 * @method \boolean[] getIsSystemList()
	 * @method \boolean[] fillIsSystem()
	 * @method \boolean[] getAnonymousList()
	 * @method \boolean[] fillAnonymous()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getStringIdList()
	 * @method \string[] fillStringId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_Group $object)
	 * @method bool has(\Bitrix\Main\EO_Group $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_Group getByPrimary($primary)
	 * @method \Bitrix\Main\EO_Group[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_Group $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_Group_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_Group current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Group_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\GroupTable */
		static public $dataClass = '\Bitrix\Main\GroupTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_Group_Query query()
	 * @method static EO_Group_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Group_Result getById($id)
	 * @method static EO_Group_Result getList(array $parameters = array())
	 * @method static EO_Group_Entity getEntity()
	 * @method static \Bitrix\Main\EO_Group createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_Group_Collection createCollection()
	 * @method static \Bitrix\Main\EO_Group wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_Group_Collection wakeUpCollection($rows)
	 */
	class GroupTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Group_Result exec()
	 * @method \Bitrix\Main\EO_Group fetchObject()
	 * @method \Bitrix\Main\EO_Group_Collection fetchCollection()
	 */
	class EO_Group_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_Group fetchObject()
	 * @method \Bitrix\Main\EO_Group_Collection fetchCollection()
	 */
	class EO_Group_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_Group createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_Group_Collection createCollection()
	 * @method \Bitrix\Main\EO_Group wakeUpObject($row)
	 * @method \Bitrix\Main\EO_Group_Collection wakeUpCollection($rows)
	 */
	class EO_Group_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\OperationTable */
namespace Bitrix\Main {
	/**
	 * EO_Operation
	 * @see \Bitrix\Main\OperationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_Operation setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Main\EO_Operation setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\EO_Operation resetName()
	 * @method \Bitrix\Main\EO_Operation unsetName()
	 * @method \string fillName()
	 * @method \string getModuleId()
	 * @method \Bitrix\Main\EO_Operation setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Main\EO_Operation resetModuleId()
	 * @method \Bitrix\Main\EO_Operation unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getDescription()
	 * @method \Bitrix\Main\EO_Operation setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Main\EO_Operation resetDescription()
	 * @method \Bitrix\Main\EO_Operation unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getBinding()
	 * @method \Bitrix\Main\EO_Operation setBinding(\string|\Bitrix\Main\DB\SqlExpression $binding)
	 * @method bool hasBinding()
	 * @method bool isBindingFilled()
	 * @method bool isBindingChanged()
	 * @method \string remindActualBinding()
	 * @method \string requireBinding()
	 * @method \Bitrix\Main\EO_Operation resetBinding()
	 * @method \Bitrix\Main\EO_Operation unsetBinding()
	 * @method \string fillBinding()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_Operation set($fieldName, $value)
	 * @method \Bitrix\Main\EO_Operation reset($fieldName)
	 * @method \Bitrix\Main\EO_Operation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_Operation wakeUp($data)
	 */
	class EO_Operation {
		/* @var \Bitrix\Main\OperationTable */
		static public $dataClass = '\Bitrix\Main\OperationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_Operation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getBindingList()
	 * @method \string[] fillBinding()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_Operation $object)
	 * @method bool has(\Bitrix\Main\EO_Operation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_Operation getByPrimary($primary)
	 * @method \Bitrix\Main\EO_Operation[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_Operation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_Operation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_Operation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Operation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\OperationTable */
		static public $dataClass = '\Bitrix\Main\OperationTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_Operation_Query query()
	 * @method static EO_Operation_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Operation_Result getById($id)
	 * @method static EO_Operation_Result getList(array $parameters = array())
	 * @method static EO_Operation_Entity getEntity()
	 * @method static \Bitrix\Main\EO_Operation createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_Operation_Collection createCollection()
	 * @method static \Bitrix\Main\EO_Operation wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_Operation_Collection wakeUpCollection($rows)
	 */
	class OperationTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Operation_Result exec()
	 * @method \Bitrix\Main\EO_Operation fetchObject()
	 * @method \Bitrix\Main\EO_Operation_Collection fetchCollection()
	 */
	class EO_Operation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_Operation fetchObject()
	 * @method \Bitrix\Main\EO_Operation_Collection fetchCollection()
	 */
	class EO_Operation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_Operation createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_Operation_Collection createCollection()
	 * @method \Bitrix\Main\EO_Operation wakeUpObject($row)
	 * @method \Bitrix\Main\EO_Operation_Collection wakeUpCollection($rows)
	 */
	class EO_Operation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\SiteTemplateTable */
namespace Bitrix\Main {
	/**
	 * EO_SiteTemplate
	 * @see \Bitrix\Main\SiteTemplateTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_SiteTemplate setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getSiteId()
	 * @method \Bitrix\Main\EO_SiteTemplate setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \string remindActualSiteId()
	 * @method \string requireSiteId()
	 * @method \Bitrix\Main\EO_SiteTemplate resetSiteId()
	 * @method \Bitrix\Main\EO_SiteTemplate unsetSiteId()
	 * @method \string fillSiteId()
	 * @method \string getCondition()
	 * @method \Bitrix\Main\EO_SiteTemplate setCondition(\string|\Bitrix\Main\DB\SqlExpression $condition)
	 * @method bool hasCondition()
	 * @method bool isConditionFilled()
	 * @method bool isConditionChanged()
	 * @method \string remindActualCondition()
	 * @method \string requireCondition()
	 * @method \Bitrix\Main\EO_SiteTemplate resetCondition()
	 * @method \Bitrix\Main\EO_SiteTemplate unsetCondition()
	 * @method \string fillCondition()
	 * @method \int getSort()
	 * @method \Bitrix\Main\EO_SiteTemplate setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Main\EO_SiteTemplate resetSort()
	 * @method \Bitrix\Main\EO_SiteTemplate unsetSort()
	 * @method \int fillSort()
	 * @method \string getTemplate()
	 * @method \Bitrix\Main\EO_SiteTemplate setTemplate(\string|\Bitrix\Main\DB\SqlExpression $template)
	 * @method bool hasTemplate()
	 * @method bool isTemplateFilled()
	 * @method bool isTemplateChanged()
	 * @method \string remindActualTemplate()
	 * @method \string requireTemplate()
	 * @method \Bitrix\Main\EO_SiteTemplate resetTemplate()
	 * @method \Bitrix\Main\EO_SiteTemplate unsetTemplate()
	 * @method \string fillTemplate()
	 * @method \Bitrix\Main\EO_Site getSite()
	 * @method \Bitrix\Main\EO_Site remindActualSite()
	 * @method \Bitrix\Main\EO_Site requireSite()
	 * @method \Bitrix\Main\EO_SiteTemplate setSite(\Bitrix\Main\EO_Site $object)
	 * @method \Bitrix\Main\EO_SiteTemplate resetSite()
	 * @method \Bitrix\Main\EO_SiteTemplate unsetSite()
	 * @method bool hasSite()
	 * @method bool isSiteFilled()
	 * @method bool isSiteChanged()
	 * @method \Bitrix\Main\EO_Site fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_SiteTemplate set($fieldName, $value)
	 * @method \Bitrix\Main\EO_SiteTemplate reset($fieldName)
	 * @method \Bitrix\Main\EO_SiteTemplate unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_SiteTemplate wakeUp($data)
	 */
	class EO_SiteTemplate {
		/* @var \Bitrix\Main\SiteTemplateTable */
		static public $dataClass = '\Bitrix\Main\SiteTemplateTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_SiteTemplate_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getSiteIdList()
	 * @method \string[] fillSiteId()
	 * @method \string[] getConditionList()
	 * @method \string[] fillCondition()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getTemplateList()
	 * @method \string[] fillTemplate()
	 * @method \Bitrix\Main\EO_Site[] getSiteList()
	 * @method \Bitrix\Main\EO_SiteTemplate_Collection getSiteCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_SiteTemplate $object)
	 * @method bool has(\Bitrix\Main\EO_SiteTemplate $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_SiteTemplate getByPrimary($primary)
	 * @method \Bitrix\Main\EO_SiteTemplate[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_SiteTemplate $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_SiteTemplate_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_SiteTemplate current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SiteTemplate_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\SiteTemplateTable */
		static public $dataClass = '\Bitrix\Main\SiteTemplateTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_SiteTemplate_Query query()
	 * @method static EO_SiteTemplate_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SiteTemplate_Result getById($id)
	 * @method static EO_SiteTemplate_Result getList(array $parameters = array())
	 * @method static EO_SiteTemplate_Entity getEntity()
	 * @method static \Bitrix\Main\EO_SiteTemplate createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_SiteTemplate_Collection createCollection()
	 * @method static \Bitrix\Main\EO_SiteTemplate wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_SiteTemplate_Collection wakeUpCollection($rows)
	 */
	class SiteTemplateTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_SiteTemplate_Result exec()
	 * @method \Bitrix\Main\EO_SiteTemplate fetchObject()
	 * @method \Bitrix\Main\EO_SiteTemplate_Collection fetchCollection()
	 */
	class EO_SiteTemplate_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_SiteTemplate fetchObject()
	 * @method \Bitrix\Main\EO_SiteTemplate_Collection fetchCollection()
	 */
	class EO_SiteTemplate_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_SiteTemplate createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_SiteTemplate_Collection createCollection()
	 * @method \Bitrix\Main\EO_SiteTemplate wakeUpObject($row)
	 * @method \Bitrix\Main\EO_SiteTemplate_Collection wakeUpCollection($rows)
	 */
	class EO_SiteTemplate_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Analytics\CounterDataTable */
namespace Bitrix\Main\Analytics {
	/**
	 * EO_CounterData
	 * @see \Bitrix\Main\Analytics\CounterDataTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getId()
	 * @method \Bitrix\Main\Analytics\EO_CounterData setId(\string|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getType()
	 * @method \Bitrix\Main\Analytics\EO_CounterData setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Main\Analytics\EO_CounterData resetType()
	 * @method \Bitrix\Main\Analytics\EO_CounterData unsetType()
	 * @method \string fillType()
	 * @method \string getData()
	 * @method \Bitrix\Main\Analytics\EO_CounterData setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Main\Analytics\EO_CounterData resetData()
	 * @method \Bitrix\Main\Analytics\EO_CounterData unsetData()
	 * @method \string fillData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Analytics\EO_CounterData set($fieldName, $value)
	 * @method \Bitrix\Main\Analytics\EO_CounterData reset($fieldName)
	 * @method \Bitrix\Main\Analytics\EO_CounterData unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Analytics\EO_CounterData wakeUp($data)
	 */
	class EO_CounterData {
		/* @var \Bitrix\Main\Analytics\CounterDataTable */
		static public $dataClass = '\Bitrix\Main\Analytics\CounterDataTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Analytics {
	/**
	 * EO_CounterData_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getIdList()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Analytics\EO_CounterData $object)
	 * @method bool has(\Bitrix\Main\Analytics\EO_CounterData $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Analytics\EO_CounterData getByPrimary($primary)
	 * @method \Bitrix\Main\Analytics\EO_CounterData[] getAll()
	 * @method bool remove(\Bitrix\Main\Analytics\EO_CounterData $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Analytics\EO_CounterData_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Analytics\EO_CounterData current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CounterData_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Analytics\CounterDataTable */
		static public $dataClass = '\Bitrix\Main\Analytics\CounterDataTable';
	}
}
namespace Bitrix\Main\Analytics {
	/**
	 * @method static EO_CounterData_Query query()
	 * @method static EO_CounterData_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CounterData_Result getById($id)
	 * @method static EO_CounterData_Result getList(array $parameters = array())
	 * @method static EO_CounterData_Entity getEntity()
	 * @method static \Bitrix\Main\Analytics\EO_CounterData createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Analytics\EO_CounterData_Collection createCollection()
	 * @method static \Bitrix\Main\Analytics\EO_CounterData wakeUpObject($row)
	 * @method static \Bitrix\Main\Analytics\EO_CounterData_Collection wakeUpCollection($rows)
	 */
	class CounterDataTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_CounterData_Result exec()
	 * @method \Bitrix\Main\Analytics\EO_CounterData fetchObject()
	 * @method \Bitrix\Main\Analytics\EO_CounterData_Collection fetchCollection()
	 */
	class EO_CounterData_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Analytics\EO_CounterData fetchObject()
	 * @method \Bitrix\Main\Analytics\EO_CounterData_Collection fetchCollection()
	 */
	class EO_CounterData_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Analytics\EO_CounterData createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Analytics\EO_CounterData_Collection createCollection()
	 * @method \Bitrix\Main\Analytics\EO_CounterData wakeUpObject($row)
	 * @method \Bitrix\Main\Analytics\EO_CounterData_Collection wakeUpCollection($rows)
	 */
	class EO_CounterData_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Test\Typography\BookTable */
namespace Bitrix\Main\Test\Typography {
	/**
	 * Book
	 * @see \Bitrix\Main\Test\Typography\BookTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Test\Typography\Book setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Main\Test\Typography\Book setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Main\Test\Typography\Book resetTitle()
	 * @method \Bitrix\Main\Test\Typography\Book unsetTitle()
	 * @method \string fillTitle()
	 * @method \int getPublisherId()
	 * @method \Bitrix\Main\Test\Typography\Book setPublisherId(\int|\Bitrix\Main\DB\SqlExpression $publisherId)
	 * @method bool hasPublisherId()
	 * @method bool isPublisherIdFilled()
	 * @method bool isPublisherIdChanged()
	 * @method \int remindActualPublisherId()
	 * @method \int requirePublisherId()
	 * @method \Bitrix\Main\Test\Typography\Book resetPublisherId()
	 * @method \Bitrix\Main\Test\Typography\Book unsetPublisherId()
	 * @method \int fillPublisherId()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher getPublisher()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher remindActualPublisher()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher requirePublisher()
	 * @method \Bitrix\Main\Test\Typography\Book setPublisher(\Bitrix\Main\Test\Typography\EO_Publisher $object)
	 * @method \Bitrix\Main\Test\Typography\Book resetPublisher()
	 * @method \Bitrix\Main\Test\Typography\Book unsetPublisher()
	 * @method bool hasPublisher()
	 * @method bool isPublisherFilled()
	 * @method bool isPublisherChanged()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher fillPublisher()
	 * @method \string getIsbn()
	 * @method \Bitrix\Main\Test\Typography\Book setIsbn(\string|\Bitrix\Main\DB\SqlExpression $isbn)
	 * @method bool hasIsbn()
	 * @method bool isIsbnFilled()
	 * @method bool isIsbnChanged()
	 * @method \string remindActualIsbn()
	 * @method \string requireIsbn()
	 * @method \Bitrix\Main\Test\Typography\Book resetIsbn()
	 * @method \Bitrix\Main\Test\Typography\Book unsetIsbn()
	 * @method \string fillIsbn()
	 * @method \boolean getIsArchived()
	 * @method \Bitrix\Main\Test\Typography\Book setIsArchived(\boolean|\Bitrix\Main\DB\SqlExpression $isArchived)
	 * @method bool hasIsArchived()
	 * @method bool isIsArchivedFilled()
	 * @method bool isIsArchivedChanged()
	 * @method \boolean remindActualIsArchived()
	 * @method \boolean requireIsArchived()
	 * @method \Bitrix\Main\Test\Typography\Book resetIsArchived()
	 * @method \Bitrix\Main\Test\Typography\Book unsetIsArchived()
	 * @method \boolean fillIsArchived()
	 * @method array getQuotes()
	 * @method \Bitrix\Main\Test\Typography\Book setQuotes(array|\Bitrix\Main\DB\SqlExpression $quotes)
	 * @method bool hasQuotes()
	 * @method bool isQuotesFilled()
	 * @method bool isQuotesChanged()
	 * @method array remindActualQuotes()
	 * @method array requireQuotes()
	 * @method \Bitrix\Main\Test\Typography\Book resetQuotes()
	 * @method \Bitrix\Main\Test\Typography\Book unsetQuotes()
	 * @method array fillQuotes()
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection getAuthors()
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection requireAuthors()
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection fillAuthors()
	 * @method bool hasAuthors()
	 * @method bool isAuthorsFilled()
	 * @method bool isAuthorsChanged()
	 * @method void addToAuthors(\Bitrix\Main\Test\Typography\EO_Author $author)
	 * @method void removeFromAuthors(\Bitrix\Main\Test\Typography\EO_Author $author)
	 * @method void removeAllAuthors()
	 * @method \Bitrix\Main\Test\Typography\Book resetAuthors()
	 * @method \Bitrix\Main\Test\Typography\Book unsetAuthors()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection getStoreItems()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection requireStoreItems()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection fillStoreItems()
	 * @method bool hasStoreItems()
	 * @method bool isStoreItemsFilled()
	 * @method bool isStoreItemsChanged()
	 * @method void addToStoreItems(\Bitrix\Main\Test\Typography\EO_StoreBook $storeBook)
	 * @method void removeFromStoreItems(\Bitrix\Main\Test\Typography\EO_StoreBook $storeBook)
	 * @method void removeAllStoreItems()
	 * @method \Bitrix\Main\Test\Typography\Book resetStoreItems()
	 * @method \Bitrix\Main\Test\Typography\Book unsetStoreItems()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Test\Typography\Book set($fieldName, $value)
	 * @method \Bitrix\Main\Test\Typography\Book reset($fieldName)
	 * @method \Bitrix\Main\Test\Typography\Book unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Test\Typography\Book wakeUp($data)
	 */
	class EO_Book {
		/* @var \Bitrix\Main\Test\Typography\BookTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\BookTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * Books
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \int[] getPublisherIdList()
	 * @method \int[] fillPublisherId()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher[] getPublisherList()
	 * @method \Bitrix\Main\Test\Typography\Books getPublisherCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher_Collection fillPublisher()
	 * @method \string[] getIsbnList()
	 * @method \string[] fillIsbn()
	 * @method \boolean[] getIsArchivedList()
	 * @method \boolean[] fillIsArchived()
	 * @method array[] getQuotesList()
	 * @method array[] fillQuotes()
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection[] getAuthorsList()
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection getAuthorsCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection fillAuthors()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection[] getStoreItemsList()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection getStoreItemsCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection fillStoreItems()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Test\Typography\Book $object)
	 * @method bool has(\Bitrix\Main\Test\Typography\Book $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\Book getByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\Book[] getAll()
	 * @method bool remove(\Bitrix\Main\Test\Typography\Book $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Test\Typography\Books wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Test\Typography\Book current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Book_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Test\Typography\BookTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\BookTable';
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * @method static EO_Book_Query query()
	 * @method static EO_Book_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Book_Result getById($id)
	 * @method static EO_Book_Result getList(array $parameters = array())
	 * @method static EO_Book_Entity getEntity()
	 * @method static \Bitrix\Main\Test\Typography\Book createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Test\Typography\Books createCollection()
	 * @method static \Bitrix\Main\Test\Typography\Book wakeUpObject($row)
	 * @method static \Bitrix\Main\Test\Typography\Books wakeUpCollection($rows)
	 */
	class BookTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Book_Result exec()
	 * @method \Bitrix\Main\Test\Typography\Book fetchObject()
	 * @method \Bitrix\Main\Test\Typography\Books fetchCollection()
	 */
	class EO_Book_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Test\Typography\Book fetchObject()
	 * @method \Bitrix\Main\Test\Typography\Books fetchCollection()
	 */
	class EO_Book_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Test\Typography\Book createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Test\Typography\Books createCollection()
	 * @method \Bitrix\Main\Test\Typography\Book wakeUpObject($row)
	 * @method \Bitrix\Main\Test\Typography\Books wakeUpCollection($rows)
	 */
	class EO_Book_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Test\Typography\StoreTable */
namespace Bitrix\Main\Test\Typography {
	/**
	 * EO_Store
	 * @see \Bitrix\Main\Test\Typography\StoreTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Test\Typography\EO_Store setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getAddress()
	 * @method \Bitrix\Main\Test\Typography\EO_Store setAddress(\string|\Bitrix\Main\DB\SqlExpression $address)
	 * @method bool hasAddress()
	 * @method bool isAddressFilled()
	 * @method bool isAddressChanged()
	 * @method \string remindActualAddress()
	 * @method \string requireAddress()
	 * @method \Bitrix\Main\Test\Typography\EO_Store resetAddress()
	 * @method \Bitrix\Main\Test\Typography\EO_Store unsetAddress()
	 * @method \string fillAddress()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection getBookItems()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection requireBookItems()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection fillBookItems()
	 * @method bool hasBookItems()
	 * @method bool isBookItemsFilled()
	 * @method bool isBookItemsChanged()
	 * @method void addToBookItems(\Bitrix\Main\Test\Typography\EO_StoreBook $storeBook)
	 * @method void removeFromBookItems(\Bitrix\Main\Test\Typography\EO_StoreBook $storeBook)
	 * @method void removeAllBookItems()
	 * @method \Bitrix\Main\Test\Typography\EO_Store resetBookItems()
	 * @method \Bitrix\Main\Test\Typography\EO_Store unsetBookItems()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Test\Typography\EO_Store set($fieldName, $value)
	 * @method \Bitrix\Main\Test\Typography\EO_Store reset($fieldName)
	 * @method \Bitrix\Main\Test\Typography\EO_Store unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Test\Typography\EO_Store wakeUp($data)
	 */
	class EO_Store {
		/* @var \Bitrix\Main\Test\Typography\StoreTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\StoreTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * EO_Store_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getAddressList()
	 * @method \string[] fillAddress()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection[] getBookItemsList()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection getBookItemsCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection fillBookItems()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Test\Typography\EO_Store $object)
	 * @method bool has(\Bitrix\Main\Test\Typography\EO_Store $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\EO_Store getByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\EO_Store[] getAll()
	 * @method bool remove(\Bitrix\Main\Test\Typography\EO_Store $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Test\Typography\EO_Store_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Test\Typography\EO_Store current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Store_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Test\Typography\StoreTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\StoreTable';
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * @method static EO_Store_Query query()
	 * @method static EO_Store_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Store_Result getById($id)
	 * @method static EO_Store_Result getList(array $parameters = array())
	 * @method static EO_Store_Entity getEntity()
	 * @method static \Bitrix\Main\Test\Typography\EO_Store createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Test\Typography\EO_Store_Collection createCollection()
	 * @method static \Bitrix\Main\Test\Typography\EO_Store wakeUpObject($row)
	 * @method static \Bitrix\Main\Test\Typography\EO_Store_Collection wakeUpCollection($rows)
	 */
	class StoreTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Store_Result exec()
	 * @method \Bitrix\Main\Test\Typography\EO_Store fetchObject()
	 * @method \Bitrix\Main\Test\Typography\EO_Store_Collection fetchCollection()
	 */
	class EO_Store_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Test\Typography\EO_Store fetchObject()
	 * @method \Bitrix\Main\Test\Typography\EO_Store_Collection fetchCollection()
	 */
	class EO_Store_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Test\Typography\EO_Store createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Test\Typography\EO_Store_Collection createCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_Store wakeUpObject($row)
	 * @method \Bitrix\Main\Test\Typography\EO_Store_Collection wakeUpCollection($rows)
	 */
	class EO_Store_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Test\Typography\StoreBookTable */
namespace Bitrix\Main\Test\Typography {
	/**
	 * EO_StoreBook
	 * @see \Bitrix\Main\Test\Typography\StoreBookTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getStoreId()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook setStoreId(\int|\Bitrix\Main\DB\SqlExpression $storeId)
	 * @method bool hasStoreId()
	 * @method bool isStoreIdFilled()
	 * @method bool isStoreIdChanged()
	 * @method \Bitrix\Main\Test\Typography\EO_Store getStore()
	 * @method \Bitrix\Main\Test\Typography\EO_Store remindActualStore()
	 * @method \Bitrix\Main\Test\Typography\EO_Store requireStore()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook setStore(\Bitrix\Main\Test\Typography\EO_Store $object)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook resetStore()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook unsetStore()
	 * @method bool hasStore()
	 * @method bool isStoreFilled()
	 * @method bool isStoreChanged()
	 * @method \Bitrix\Main\Test\Typography\EO_Store fillStore()
	 * @method \int getBookId()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook setBookId(\int|\Bitrix\Main\DB\SqlExpression $bookId)
	 * @method bool hasBookId()
	 * @method bool isBookIdFilled()
	 * @method bool isBookIdChanged()
	 * @method \Bitrix\Main\Test\Typography\Book getBook()
	 * @method \Bitrix\Main\Test\Typography\Book remindActualBook()
	 * @method \Bitrix\Main\Test\Typography\Book requireBook()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook setBook(\Bitrix\Main\Test\Typography\Book $object)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook resetBook()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook unsetBook()
	 * @method bool hasBook()
	 * @method bool isBookFilled()
	 * @method bool isBookChanged()
	 * @method \Bitrix\Main\Test\Typography\Book fillBook()
	 * @method \int getQuantity()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook setQuantity(\int|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \int remindActualQuantity()
	 * @method \int requireQuantity()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook resetQuantity()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook unsetQuantity()
	 * @method \int fillQuantity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook set($fieldName, $value)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook reset($fieldName)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Test\Typography\EO_StoreBook wakeUp($data)
	 */
	class EO_StoreBook {
		/* @var \Bitrix\Main\Test\Typography\StoreBookTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\StoreBookTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * EO_StoreBook_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getStoreIdList()
	 * @method \Bitrix\Main\Test\Typography\EO_Store[] getStoreList()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection getStoreCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_Store_Collection fillStore()
	 * @method \int[] getBookIdList()
	 * @method \Bitrix\Main\Test\Typography\Book[] getBookList()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection getBookCollection()
	 * @method \Bitrix\Main\Test\Typography\Books fillBook()
	 * @method \int[] getQuantityList()
	 * @method \int[] fillQuantity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Test\Typography\EO_StoreBook $object)
	 * @method bool has(\Bitrix\Main\Test\Typography\EO_StoreBook $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook getByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook[] getAll()
	 * @method bool remove(\Bitrix\Main\Test\Typography\EO_StoreBook $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Test\Typography\EO_StoreBook_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_StoreBook_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Test\Typography\StoreBookTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\StoreBookTable';
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * @method static EO_StoreBook_Query query()
	 * @method static EO_StoreBook_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_StoreBook_Result getById($id)
	 * @method static EO_StoreBook_Result getList(array $parameters = array())
	 * @method static EO_StoreBook_Entity getEntity()
	 * @method static \Bitrix\Main\Test\Typography\EO_StoreBook createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Test\Typography\EO_StoreBook_Collection createCollection()
	 * @method static \Bitrix\Main\Test\Typography\EO_StoreBook wakeUpObject($row)
	 * @method static \Bitrix\Main\Test\Typography\EO_StoreBook_Collection wakeUpCollection($rows)
	 */
	class StoreBookTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_StoreBook_Result exec()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook fetchObject()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection fetchCollection()
	 */
	class EO_StoreBook_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook fetchObject()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection fetchCollection()
	 */
	class EO_StoreBook_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection createCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook wakeUpObject($row)
	 * @method \Bitrix\Main\Test\Typography\EO_StoreBook_Collection wakeUpCollection($rows)
	 */
	class EO_StoreBook_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Test\Typography\AuthorTable */
namespace Bitrix\Main\Test\Typography {
	/**
	 * EO_Author
	 * @see \Bitrix\Main\Test\Typography\AuthorTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Test\Typography\EO_Author setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Main\Test\Typography\EO_Author setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\Test\Typography\EO_Author resetName()
	 * @method \Bitrix\Main\Test\Typography\EO_Author unsetName()
	 * @method \string fillName()
	 * @method \string getLastName()
	 * @method \Bitrix\Main\Test\Typography\EO_Author setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Bitrix\Main\Test\Typography\EO_Author resetLastName()
	 * @method \Bitrix\Main\Test\Typography\EO_Author unsetLastName()
	 * @method \string fillLastName()
	 * @method \Bitrix\Main\Test\Typography\Books getBooks()
	 * @method \Bitrix\Main\Test\Typography\Books requireBooks()
	 * @method \Bitrix\Main\Test\Typography\Books fillBooks()
	 * @method bool hasBooks()
	 * @method bool isBooksFilled()
	 * @method bool isBooksChanged()
	 * @method void addToBooks(\Bitrix\Main\Test\Typography\Book $book)
	 * @method void removeFromBooks(\Bitrix\Main\Test\Typography\Book $book)
	 * @method void removeAllBooks()
	 * @method \Bitrix\Main\Test\Typography\EO_Author resetBooks()
	 * @method \Bitrix\Main\Test\Typography\EO_Author unsetBooks()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Test\Typography\EO_Author set($fieldName, $value)
	 * @method \Bitrix\Main\Test\Typography\EO_Author reset($fieldName)
	 * @method \Bitrix\Main\Test\Typography\EO_Author unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Test\Typography\EO_Author wakeUp($data)
	 */
	class EO_Author {
		/* @var \Bitrix\Main\Test\Typography\AuthorTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\AuthorTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * EO_Author_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \Bitrix\Main\Test\Typography\Books[] getBooksList()
	 * @method \Bitrix\Main\Test\Typography\Books getBooksCollection()
	 * @method \Bitrix\Main\Test\Typography\Books fillBooks()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Test\Typography\EO_Author $object)
	 * @method bool has(\Bitrix\Main\Test\Typography\EO_Author $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\EO_Author getByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\EO_Author[] getAll()
	 * @method bool remove(\Bitrix\Main\Test\Typography\EO_Author $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Test\Typography\EO_Author_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Test\Typography\EO_Author current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Author_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Test\Typography\AuthorTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\AuthorTable';
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * @method static EO_Author_Query query()
	 * @method static EO_Author_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Author_Result getById($id)
	 * @method static EO_Author_Result getList(array $parameters = array())
	 * @method static EO_Author_Entity getEntity()
	 * @method static \Bitrix\Main\Test\Typography\EO_Author createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Test\Typography\EO_Author_Collection createCollection()
	 * @method static \Bitrix\Main\Test\Typography\EO_Author wakeUpObject($row)
	 * @method static \Bitrix\Main\Test\Typography\EO_Author_Collection wakeUpCollection($rows)
	 */
	class AuthorTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Author_Result exec()
	 * @method \Bitrix\Main\Test\Typography\EO_Author fetchObject()
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection fetchCollection()
	 */
	class EO_Author_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Test\Typography\EO_Author fetchObject()
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection fetchCollection()
	 */
	class EO_Author_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Test\Typography\EO_Author createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection createCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_Author wakeUpObject($row)
	 * @method \Bitrix\Main\Test\Typography\EO_Author_Collection wakeUpCollection($rows)
	 */
	class EO_Author_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Test\Typography\PublisherTable */
namespace Bitrix\Main\Test\Typography {
	/**
	 * EO_Publisher
	 * @see \Bitrix\Main\Test\Typography\PublisherTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher resetTitle()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher unsetTitle()
	 * @method \string fillTitle()
	 * @method \int getBooksCount()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher setBooksCount(\int|\Bitrix\Main\DB\SqlExpression $booksCount)
	 * @method bool hasBooksCount()
	 * @method bool isBooksCountFilled()
	 * @method bool isBooksCountChanged()
	 * @method \int remindActualBooksCount()
	 * @method \int requireBooksCount()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher resetBooksCount()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher unsetBooksCount()
	 * @method \int fillBooksCount()
	 * @method \Bitrix\Main\Test\Typography\Books getBooks()
	 * @method \Bitrix\Main\Test\Typography\Books requireBooks()
	 * @method \Bitrix\Main\Test\Typography\Books fillBooks()
	 * @method bool hasBooks()
	 * @method bool isBooksFilled()
	 * @method bool isBooksChanged()
	 * @method void addToBooks(\Bitrix\Main\Test\Typography\Book $book)
	 * @method void removeFromBooks(\Bitrix\Main\Test\Typography\Book $book)
	 * @method void removeAllBooks()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher resetBooks()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher unsetBooks()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher set($fieldName, $value)
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher reset($fieldName)
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Test\Typography\EO_Publisher wakeUp($data)
	 */
	class EO_Publisher {
		/* @var \Bitrix\Main\Test\Typography\PublisherTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\PublisherTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * EO_Publisher_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \int[] getBooksCountList()
	 * @method \int[] fillBooksCount()
	 * @method \Bitrix\Main\Test\Typography\Books[] getBooksList()
	 * @method \Bitrix\Main\Test\Typography\Books getBooksCollection()
	 * @method \Bitrix\Main\Test\Typography\Books fillBooks()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Test\Typography\EO_Publisher $object)
	 * @method bool has(\Bitrix\Main\Test\Typography\EO_Publisher $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher getByPrimary($primary)
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher[] getAll()
	 * @method bool remove(\Bitrix\Main\Test\Typography\EO_Publisher $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Test\Typography\EO_Publisher_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Publisher_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Test\Typography\PublisherTable */
		static public $dataClass = '\Bitrix\Main\Test\Typography\PublisherTable';
	}
}
namespace Bitrix\Main\Test\Typography {
	/**
	 * @method static EO_Publisher_Query query()
	 * @method static EO_Publisher_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Publisher_Result getById($id)
	 * @method static EO_Publisher_Result getList(array $parameters = array())
	 * @method static EO_Publisher_Entity getEntity()
	 * @method static \Bitrix\Main\Test\Typography\EO_Publisher createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Test\Typography\EO_Publisher_Collection createCollection()
	 * @method static \Bitrix\Main\Test\Typography\EO_Publisher wakeUpObject($row)
	 * @method static \Bitrix\Main\Test\Typography\EO_Publisher_Collection wakeUpCollection($rows)
	 */
	class PublisherTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Publisher_Result exec()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher fetchObject()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher_Collection fetchCollection()
	 */
	class EO_Publisher_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher fetchObject()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher_Collection fetchCollection()
	 */
	class EO_Publisher_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher_Collection createCollection()
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher wakeUpObject($row)
	 * @method \Bitrix\Main\Test\Typography\EO_Publisher_Collection wakeUpCollection($rows)
	 */
	class EO_Publisher_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserPhoneAuthTable */
namespace Bitrix\Main {
	/**
	 * EO_UserPhoneAuth
	 * @see \Bitrix\Main\UserPhoneAuthTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserPhoneAuth setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getPhoneNumber()
	 * @method \Bitrix\Main\EO_UserPhoneAuth setPhoneNumber(\string|\Bitrix\Main\DB\SqlExpression $phoneNumber)
	 * @method bool hasPhoneNumber()
	 * @method bool isPhoneNumberFilled()
	 * @method bool isPhoneNumberChanged()
	 * @method \string remindActualPhoneNumber()
	 * @method \string requirePhoneNumber()
	 * @method \Bitrix\Main\EO_UserPhoneAuth resetPhoneNumber()
	 * @method \Bitrix\Main\EO_UserPhoneAuth unsetPhoneNumber()
	 * @method \string fillPhoneNumber()
	 * @method \string getOtpSecret()
	 * @method \Bitrix\Main\EO_UserPhoneAuth setOtpSecret(\string|\Bitrix\Main\DB\SqlExpression $otpSecret)
	 * @method bool hasOtpSecret()
	 * @method bool isOtpSecretFilled()
	 * @method bool isOtpSecretChanged()
	 * @method \string remindActualOtpSecret()
	 * @method \string requireOtpSecret()
	 * @method \Bitrix\Main\EO_UserPhoneAuth resetOtpSecret()
	 * @method \Bitrix\Main\EO_UserPhoneAuth unsetOtpSecret()
	 * @method \string fillOtpSecret()
	 * @method \int getAttempts()
	 * @method \Bitrix\Main\EO_UserPhoneAuth setAttempts(\int|\Bitrix\Main\DB\SqlExpression $attempts)
	 * @method bool hasAttempts()
	 * @method bool isAttemptsFilled()
	 * @method bool isAttemptsChanged()
	 * @method \int remindActualAttempts()
	 * @method \int requireAttempts()
	 * @method \Bitrix\Main\EO_UserPhoneAuth resetAttempts()
	 * @method \Bitrix\Main\EO_UserPhoneAuth unsetAttempts()
	 * @method \int fillAttempts()
	 * @method \boolean getConfirmed()
	 * @method \Bitrix\Main\EO_UserPhoneAuth setConfirmed(\boolean|\Bitrix\Main\DB\SqlExpression $confirmed)
	 * @method bool hasConfirmed()
	 * @method bool isConfirmedFilled()
	 * @method bool isConfirmedChanged()
	 * @method \boolean remindActualConfirmed()
	 * @method \boolean requireConfirmed()
	 * @method \Bitrix\Main\EO_UserPhoneAuth resetConfirmed()
	 * @method \Bitrix\Main\EO_UserPhoneAuth unsetConfirmed()
	 * @method \boolean fillConfirmed()
	 * @method \Bitrix\Main\Type\DateTime getDateSent()
	 * @method \Bitrix\Main\EO_UserPhoneAuth setDateSent(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateSent)
	 * @method bool hasDateSent()
	 * @method bool isDateSentFilled()
	 * @method bool isDateSentChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateSent()
	 * @method \Bitrix\Main\Type\DateTime requireDateSent()
	 * @method \Bitrix\Main\EO_UserPhoneAuth resetDateSent()
	 * @method \Bitrix\Main\EO_UserPhoneAuth unsetDateSent()
	 * @method \Bitrix\Main\Type\DateTime fillDateSent()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Main\EO_UserPhoneAuth setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\EO_UserPhoneAuth resetUser()
	 * @method \Bitrix\Main\EO_UserPhoneAuth unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserPhoneAuth set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserPhoneAuth reset($fieldName)
	 * @method \Bitrix\Main\EO_UserPhoneAuth unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserPhoneAuth wakeUp($data)
	 */
	class EO_UserPhoneAuth {
		/* @var \Bitrix\Main\UserPhoneAuthTable */
		static public $dataClass = '\Bitrix\Main\UserPhoneAuthTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserPhoneAuth_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \string[] getPhoneNumberList()
	 * @method \string[] fillPhoneNumber()
	 * @method \string[] getOtpSecretList()
	 * @method \string[] fillOtpSecret()
	 * @method \int[] getAttemptsList()
	 * @method \int[] fillAttempts()
	 * @method \boolean[] getConfirmedList()
	 * @method \boolean[] fillConfirmed()
	 * @method \Bitrix\Main\Type\DateTime[] getDateSentList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateSent()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserPhoneAuth $object)
	 * @method bool has(\Bitrix\Main\EO_UserPhoneAuth $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserPhoneAuth getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserPhoneAuth[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserPhoneAuth $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserPhoneAuth_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserPhoneAuth current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserPhoneAuth_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserPhoneAuthTable */
		static public $dataClass = '\Bitrix\Main\UserPhoneAuthTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserPhoneAuth_Query query()
	 * @method static EO_UserPhoneAuth_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserPhoneAuth_Result getById($id)
	 * @method static EO_UserPhoneAuth_Result getList(array $parameters = array())
	 * @method static EO_UserPhoneAuth_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserPhoneAuth createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserPhoneAuth_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserPhoneAuth wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserPhoneAuth_Collection wakeUpCollection($rows)
	 */
	class UserPhoneAuthTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserPhoneAuth_Result exec()
	 * @method \Bitrix\Main\EO_UserPhoneAuth fetchObject()
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection fetchCollection()
	 */
	class EO_UserPhoneAuth_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserPhoneAuth fetchObject()
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection fetchCollection()
	 */
	class EO_UserPhoneAuth_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserPhoneAuth createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserPhoneAuth wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserPhoneAuth_Collection wakeUpCollection($rows)
	 */
	class EO_UserPhoneAuth_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Rating\RatingTable */
namespace Bitrix\Main\Rating {
	/**
	 * EO_Rating
	 * @see \Bitrix\Main\Rating\RatingTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Rating\EO_Rating setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getActive()
	 * @method \Bitrix\Main\Rating\EO_Rating setActive(\string|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \string remindActualActive()
	 * @method \string requireActive()
	 * @method \Bitrix\Main\Rating\EO_Rating resetActive()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetActive()
	 * @method \string fillActive()
	 * @method \string getName()
	 * @method \Bitrix\Main\Rating\EO_Rating setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\Rating\EO_Rating resetName()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetName()
	 * @method \string fillName()
	 * @method \string getEntityId()
	 * @method \Bitrix\Main\Rating\EO_Rating setEntityId(\string|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \string remindActualEntityId()
	 * @method \string requireEntityId()
	 * @method \Bitrix\Main\Rating\EO_Rating resetEntityId()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetEntityId()
	 * @method \string fillEntityId()
	 * @method \string getCalculationMethod()
	 * @method \Bitrix\Main\Rating\EO_Rating setCalculationMethod(\string|\Bitrix\Main\DB\SqlExpression $calculationMethod)
	 * @method bool hasCalculationMethod()
	 * @method bool isCalculationMethodFilled()
	 * @method bool isCalculationMethodChanged()
	 * @method \string remindActualCalculationMethod()
	 * @method \string requireCalculationMethod()
	 * @method \Bitrix\Main\Rating\EO_Rating resetCalculationMethod()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetCalculationMethod()
	 * @method \string fillCalculationMethod()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Main\Rating\EO_Rating setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Main\Rating\EO_Rating resetCreated()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \Bitrix\Main\Type\DateTime getLastModified()
	 * @method \Bitrix\Main\Rating\EO_Rating setLastModified(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastModified)
	 * @method bool hasLastModified()
	 * @method bool isLastModifiedFilled()
	 * @method bool isLastModifiedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastModified()
	 * @method \Bitrix\Main\Type\DateTime requireLastModified()
	 * @method \Bitrix\Main\Rating\EO_Rating resetLastModified()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetLastModified()
	 * @method \Bitrix\Main\Type\DateTime fillLastModified()
	 * @method \Bitrix\Main\Type\DateTime getLastCalculated()
	 * @method \Bitrix\Main\Rating\EO_Rating setLastCalculated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastCalculated)
	 * @method bool hasLastCalculated()
	 * @method bool isLastCalculatedFilled()
	 * @method bool isLastCalculatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastCalculated()
	 * @method \Bitrix\Main\Type\DateTime requireLastCalculated()
	 * @method \Bitrix\Main\Rating\EO_Rating resetLastCalculated()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetLastCalculated()
	 * @method \Bitrix\Main\Type\DateTime fillLastCalculated()
	 * @method \boolean getPosition()
	 * @method \Bitrix\Main\Rating\EO_Rating setPosition(\boolean|\Bitrix\Main\DB\SqlExpression $position)
	 * @method bool hasPosition()
	 * @method bool isPositionFilled()
	 * @method bool isPositionChanged()
	 * @method \boolean remindActualPosition()
	 * @method \boolean requirePosition()
	 * @method \Bitrix\Main\Rating\EO_Rating resetPosition()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetPosition()
	 * @method \boolean fillPosition()
	 * @method \boolean getAuthority()
	 * @method \Bitrix\Main\Rating\EO_Rating setAuthority(\boolean|\Bitrix\Main\DB\SqlExpression $authority)
	 * @method bool hasAuthority()
	 * @method bool isAuthorityFilled()
	 * @method bool isAuthorityChanged()
	 * @method \boolean remindActualAuthority()
	 * @method \boolean requireAuthority()
	 * @method \Bitrix\Main\Rating\EO_Rating resetAuthority()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetAuthority()
	 * @method \boolean fillAuthority()
	 * @method \boolean getCalculated()
	 * @method \Bitrix\Main\Rating\EO_Rating setCalculated(\boolean|\Bitrix\Main\DB\SqlExpression $calculated)
	 * @method bool hasCalculated()
	 * @method bool isCalculatedFilled()
	 * @method bool isCalculatedChanged()
	 * @method \boolean remindActualCalculated()
	 * @method \boolean requireCalculated()
	 * @method \Bitrix\Main\Rating\EO_Rating resetCalculated()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetCalculated()
	 * @method \boolean fillCalculated()
	 * @method \string getConfigs()
	 * @method \Bitrix\Main\Rating\EO_Rating setConfigs(\string|\Bitrix\Main\DB\SqlExpression $configs)
	 * @method bool hasConfigs()
	 * @method bool isConfigsFilled()
	 * @method bool isConfigsChanged()
	 * @method \string remindActualConfigs()
	 * @method \string requireConfigs()
	 * @method \Bitrix\Main\Rating\EO_Rating resetConfigs()
	 * @method \Bitrix\Main\Rating\EO_Rating unsetConfigs()
	 * @method \string fillConfigs()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Rating\EO_Rating set($fieldName, $value)
	 * @method \Bitrix\Main\Rating\EO_Rating reset($fieldName)
	 * @method \Bitrix\Main\Rating\EO_Rating unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Rating\EO_Rating wakeUp($data)
	 */
	class EO_Rating {
		/* @var \Bitrix\Main\Rating\RatingTable */
		static public $dataClass = '\Bitrix\Main\Rating\RatingTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Rating {
	/**
	 * EO_Rating_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getActiveList()
	 * @method \string[] fillActive()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getEntityIdList()
	 * @method \string[] fillEntityId()
	 * @method \string[] getCalculationMethodList()
	 * @method \string[] fillCalculationMethod()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \Bitrix\Main\Type\DateTime[] getLastModifiedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastModified()
	 * @method \Bitrix\Main\Type\DateTime[] getLastCalculatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastCalculated()
	 * @method \boolean[] getPositionList()
	 * @method \boolean[] fillPosition()
	 * @method \boolean[] getAuthorityList()
	 * @method \boolean[] fillAuthority()
	 * @method \boolean[] getCalculatedList()
	 * @method \boolean[] fillCalculated()
	 * @method \string[] getConfigsList()
	 * @method \string[] fillConfigs()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Rating\EO_Rating $object)
	 * @method bool has(\Bitrix\Main\Rating\EO_Rating $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Rating\EO_Rating getByPrimary($primary)
	 * @method \Bitrix\Main\Rating\EO_Rating[] getAll()
	 * @method bool remove(\Bitrix\Main\Rating\EO_Rating $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Rating\EO_Rating_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Rating\EO_Rating current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Rating_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Rating\RatingTable */
		static public $dataClass = '\Bitrix\Main\Rating\RatingTable';
	}
}
namespace Bitrix\Main\Rating {
	/**
	 * @method static EO_Rating_Query query()
	 * @method static EO_Rating_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Rating_Result getById($id)
	 * @method static EO_Rating_Result getList(array $parameters = array())
	 * @method static EO_Rating_Entity getEntity()
	 * @method static \Bitrix\Main\Rating\EO_Rating createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Rating\EO_Rating_Collection createCollection()
	 * @method static \Bitrix\Main\Rating\EO_Rating wakeUpObject($row)
	 * @method static \Bitrix\Main\Rating\EO_Rating_Collection wakeUpCollection($rows)
	 */
	class RatingTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Rating_Result exec()
	 * @method \Bitrix\Main\Rating\EO_Rating fetchObject()
	 * @method \Bitrix\Main\Rating\EO_Rating_Collection fetchCollection()
	 */
	class EO_Rating_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Rating\EO_Rating fetchObject()
	 * @method \Bitrix\Main\Rating\EO_Rating_Collection fetchCollection()
	 */
	class EO_Rating_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Rating\EO_Rating createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Rating\EO_Rating_Collection createCollection()
	 * @method \Bitrix\Main\Rating\EO_Rating wakeUpObject($row)
	 * @method \Bitrix\Main\Rating\EO_Rating_Collection wakeUpCollection($rows)
	 */
	class EO_Rating_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Rating\ResultsTable */
namespace Bitrix\Main\Rating {
	/**
	 * EO_Results
	 * @see \Bitrix\Main\Rating\ResultsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Rating\EO_Results setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getRatingId()
	 * @method \Bitrix\Main\Rating\EO_Results setRatingId(\int|\Bitrix\Main\DB\SqlExpression $ratingId)
	 * @method bool hasRatingId()
	 * @method bool isRatingIdFilled()
	 * @method bool isRatingIdChanged()
	 * @method \int remindActualRatingId()
	 * @method \int requireRatingId()
	 * @method \Bitrix\Main\Rating\EO_Results resetRatingId()
	 * @method \Bitrix\Main\Rating\EO_Results unsetRatingId()
	 * @method \int fillRatingId()
	 * @method \string getEntityTypeId()
	 * @method \Bitrix\Main\Rating\EO_Results setEntityTypeId(\string|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \string remindActualEntityTypeId()
	 * @method \string requireEntityTypeId()
	 * @method \Bitrix\Main\Rating\EO_Results resetEntityTypeId()
	 * @method \Bitrix\Main\Rating\EO_Results unsetEntityTypeId()
	 * @method \string fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Main\Rating\EO_Results setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Main\Rating\EO_Results resetEntityId()
	 * @method \Bitrix\Main\Rating\EO_Results unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \float getCurrentValue()
	 * @method \Bitrix\Main\Rating\EO_Results setCurrentValue(\float|\Bitrix\Main\DB\SqlExpression $currentValue)
	 * @method bool hasCurrentValue()
	 * @method bool isCurrentValueFilled()
	 * @method bool isCurrentValueChanged()
	 * @method \float remindActualCurrentValue()
	 * @method \float requireCurrentValue()
	 * @method \Bitrix\Main\Rating\EO_Results resetCurrentValue()
	 * @method \Bitrix\Main\Rating\EO_Results unsetCurrentValue()
	 * @method \float fillCurrentValue()
	 * @method \float getPreviousValue()
	 * @method \Bitrix\Main\Rating\EO_Results setPreviousValue(\float|\Bitrix\Main\DB\SqlExpression $previousValue)
	 * @method bool hasPreviousValue()
	 * @method bool isPreviousValueFilled()
	 * @method bool isPreviousValueChanged()
	 * @method \float remindActualPreviousValue()
	 * @method \float requirePreviousValue()
	 * @method \Bitrix\Main\Rating\EO_Results resetPreviousValue()
	 * @method \Bitrix\Main\Rating\EO_Results unsetPreviousValue()
	 * @method \float fillPreviousValue()
	 * @method \int getCurrentPosition()
	 * @method \Bitrix\Main\Rating\EO_Results setCurrentPosition(\int|\Bitrix\Main\DB\SqlExpression $currentPosition)
	 * @method bool hasCurrentPosition()
	 * @method bool isCurrentPositionFilled()
	 * @method bool isCurrentPositionChanged()
	 * @method \int remindActualCurrentPosition()
	 * @method \int requireCurrentPosition()
	 * @method \Bitrix\Main\Rating\EO_Results resetCurrentPosition()
	 * @method \Bitrix\Main\Rating\EO_Results unsetCurrentPosition()
	 * @method \int fillCurrentPosition()
	 * @method \int getPreviousPosition()
	 * @method \Bitrix\Main\Rating\EO_Results setPreviousPosition(\int|\Bitrix\Main\DB\SqlExpression $previousPosition)
	 * @method bool hasPreviousPosition()
	 * @method bool isPreviousPositionFilled()
	 * @method bool isPreviousPositionChanged()
	 * @method \int remindActualPreviousPosition()
	 * @method \int requirePreviousPosition()
	 * @method \Bitrix\Main\Rating\EO_Results resetPreviousPosition()
	 * @method \Bitrix\Main\Rating\EO_Results unsetPreviousPosition()
	 * @method \int fillPreviousPosition()
	 * @method \Bitrix\Main\Rating\EO_Rating getRating()
	 * @method \Bitrix\Main\Rating\EO_Rating remindActualRating()
	 * @method \Bitrix\Main\Rating\EO_Rating requireRating()
	 * @method \Bitrix\Main\Rating\EO_Results setRating(\Bitrix\Main\Rating\EO_Rating $object)
	 * @method \Bitrix\Main\Rating\EO_Results resetRating()
	 * @method \Bitrix\Main\Rating\EO_Results unsetRating()
	 * @method bool hasRating()
	 * @method bool isRatingFilled()
	 * @method bool isRatingChanged()
	 * @method \Bitrix\Main\Rating\EO_Rating fillRating()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Rating\EO_Results set($fieldName, $value)
	 * @method \Bitrix\Main\Rating\EO_Results reset($fieldName)
	 * @method \Bitrix\Main\Rating\EO_Results unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Rating\EO_Results wakeUp($data)
	 */
	class EO_Results {
		/* @var \Bitrix\Main\Rating\ResultsTable */
		static public $dataClass = '\Bitrix\Main\Rating\ResultsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Rating {
	/**
	 * EO_Results_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getRatingIdList()
	 * @method \int[] fillRatingId()
	 * @method \string[] getEntityTypeIdList()
	 * @method \string[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \float[] getCurrentValueList()
	 * @method \float[] fillCurrentValue()
	 * @method \float[] getPreviousValueList()
	 * @method \float[] fillPreviousValue()
	 * @method \int[] getCurrentPositionList()
	 * @method \int[] fillCurrentPosition()
	 * @method \int[] getPreviousPositionList()
	 * @method \int[] fillPreviousPosition()
	 * @method \Bitrix\Main\Rating\EO_Rating[] getRatingList()
	 * @method \Bitrix\Main\Rating\EO_Results_Collection getRatingCollection()
	 * @method \Bitrix\Main\Rating\EO_Rating_Collection fillRating()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Rating\EO_Results $object)
	 * @method bool has(\Bitrix\Main\Rating\EO_Results $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Rating\EO_Results getByPrimary($primary)
	 * @method \Bitrix\Main\Rating\EO_Results[] getAll()
	 * @method bool remove(\Bitrix\Main\Rating\EO_Results $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Rating\EO_Results_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Rating\EO_Results current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Results_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Rating\ResultsTable */
		static public $dataClass = '\Bitrix\Main\Rating\ResultsTable';
	}
}
namespace Bitrix\Main\Rating {
	/**
	 * @method static EO_Results_Query query()
	 * @method static EO_Results_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Results_Result getById($id)
	 * @method static EO_Results_Result getList(array $parameters = array())
	 * @method static EO_Results_Entity getEntity()
	 * @method static \Bitrix\Main\Rating\EO_Results createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Rating\EO_Results_Collection createCollection()
	 * @method static \Bitrix\Main\Rating\EO_Results wakeUpObject($row)
	 * @method static \Bitrix\Main\Rating\EO_Results_Collection wakeUpCollection($rows)
	 */
	class ResultsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Results_Result exec()
	 * @method \Bitrix\Main\Rating\EO_Results fetchObject()
	 * @method \Bitrix\Main\Rating\EO_Results_Collection fetchCollection()
	 */
	class EO_Results_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Rating\EO_Results fetchObject()
	 * @method \Bitrix\Main\Rating\EO_Results_Collection fetchCollection()
	 */
	class EO_Results_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Rating\EO_Results createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Rating\EO_Results_Collection createCollection()
	 * @method \Bitrix\Main\Rating\EO_Results wakeUpObject($row)
	 * @method \Bitrix\Main\Rating\EO_Results_Collection wakeUpCollection($rows)
	 */
	class EO_Results_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UrlPreview\RouteTable */
namespace Bitrix\Main\UrlPreview {
	/**
	 * EO_Route
	 * @see \Bitrix\Main\UrlPreview\RouteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\UrlPreview\EO_Route setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getRoute()
	 * @method \Bitrix\Main\UrlPreview\EO_Route setRoute(\string|\Bitrix\Main\DB\SqlExpression $route)
	 * @method bool hasRoute()
	 * @method bool isRouteFilled()
	 * @method bool isRouteChanged()
	 * @method \string remindActualRoute()
	 * @method \string requireRoute()
	 * @method \Bitrix\Main\UrlPreview\EO_Route resetRoute()
	 * @method \Bitrix\Main\UrlPreview\EO_Route unsetRoute()
	 * @method \string fillRoute()
	 * @method \string getModule()
	 * @method \Bitrix\Main\UrlPreview\EO_Route setModule(\string|\Bitrix\Main\DB\SqlExpression $module)
	 * @method bool hasModule()
	 * @method bool isModuleFilled()
	 * @method bool isModuleChanged()
	 * @method \string remindActualModule()
	 * @method \string requireModule()
	 * @method \Bitrix\Main\UrlPreview\EO_Route resetModule()
	 * @method \Bitrix\Main\UrlPreview\EO_Route unsetModule()
	 * @method \string fillModule()
	 * @method \string getClass()
	 * @method \Bitrix\Main\UrlPreview\EO_Route setClass(\string|\Bitrix\Main\DB\SqlExpression $class)
	 * @method bool hasClass()
	 * @method bool isClassFilled()
	 * @method bool isClassChanged()
	 * @method \string remindActualClass()
	 * @method \string requireClass()
	 * @method \Bitrix\Main\UrlPreview\EO_Route resetClass()
	 * @method \Bitrix\Main\UrlPreview\EO_Route unsetClass()
	 * @method \string fillClass()
	 * @method \string getParameters()
	 * @method \Bitrix\Main\UrlPreview\EO_Route setParameters(\string|\Bitrix\Main\DB\SqlExpression $parameters)
	 * @method bool hasParameters()
	 * @method bool isParametersFilled()
	 * @method bool isParametersChanged()
	 * @method \string remindActualParameters()
	 * @method \string requireParameters()
	 * @method \Bitrix\Main\UrlPreview\EO_Route resetParameters()
	 * @method \Bitrix\Main\UrlPreview\EO_Route unsetParameters()
	 * @method \string fillParameters()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\UrlPreview\EO_Route set($fieldName, $value)
	 * @method \Bitrix\Main\UrlPreview\EO_Route reset($fieldName)
	 * @method \Bitrix\Main\UrlPreview\EO_Route unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\UrlPreview\EO_Route wakeUp($data)
	 */
	class EO_Route {
		/* @var \Bitrix\Main\UrlPreview\RouteTable */
		static public $dataClass = '\Bitrix\Main\UrlPreview\RouteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\UrlPreview {
	/**
	 * EO_Route_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getRouteList()
	 * @method \string[] fillRoute()
	 * @method \string[] getModuleList()
	 * @method \string[] fillModule()
	 * @method \string[] getClassList()
	 * @method \string[] fillClass()
	 * @method \string[] getParametersList()
	 * @method \string[] fillParameters()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\UrlPreview\EO_Route $object)
	 * @method bool has(\Bitrix\Main\UrlPreview\EO_Route $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\UrlPreview\EO_Route getByPrimary($primary)
	 * @method \Bitrix\Main\UrlPreview\EO_Route[] getAll()
	 * @method bool remove(\Bitrix\Main\UrlPreview\EO_Route $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\UrlPreview\EO_Route_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\UrlPreview\EO_Route current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Route_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UrlPreview\RouteTable */
		static public $dataClass = '\Bitrix\Main\UrlPreview\RouteTable';
	}
}
namespace Bitrix\Main\UrlPreview {
	/**
	 * @method static EO_Route_Query query()
	 * @method static EO_Route_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Route_Result getById($id)
	 * @method static EO_Route_Result getList(array $parameters = array())
	 * @method static EO_Route_Entity getEntity()
	 * @method static \Bitrix\Main\UrlPreview\EO_Route createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\UrlPreview\EO_Route_Collection createCollection()
	 * @method static \Bitrix\Main\UrlPreview\EO_Route wakeUpObject($row)
	 * @method static \Bitrix\Main\UrlPreview\EO_Route_Collection wakeUpCollection($rows)
	 */
	class RouteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Route_Result exec()
	 * @method \Bitrix\Main\UrlPreview\EO_Route fetchObject()
	 * @method \Bitrix\Main\UrlPreview\EO_Route_Collection fetchCollection()
	 */
	class EO_Route_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\UrlPreview\EO_Route fetchObject()
	 * @method \Bitrix\Main\UrlPreview\EO_Route_Collection fetchCollection()
	 */
	class EO_Route_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\UrlPreview\EO_Route createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\UrlPreview\EO_Route_Collection createCollection()
	 * @method \Bitrix\Main\UrlPreview\EO_Route wakeUpObject($row)
	 * @method \Bitrix\Main\UrlPreview\EO_Route_Collection wakeUpCollection($rows)
	 */
	class EO_Route_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UrlPreview\UrlMetadataTable */
namespace Bitrix\Main\UrlPreview {
	/**
	 * EO_UrlMetadata
	 * @see \Bitrix\Main\UrlPreview\UrlMetadataTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getUrl()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setUrl(\string|\Bitrix\Main\DB\SqlExpression $url)
	 * @method bool hasUrl()
	 * @method bool isUrlFilled()
	 * @method bool isUrlChanged()
	 * @method \string remindActualUrl()
	 * @method \string requireUrl()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetUrl()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetUrl()
	 * @method \string fillUrl()
	 * @method \string getType()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetType()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetType()
	 * @method \string fillType()
	 * @method \string getTitle()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetTitle()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getDescription()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetDescription()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetDescription()
	 * @method \string fillDescription()
	 * @method \int getImageId()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setImageId(\int|\Bitrix\Main\DB\SqlExpression $imageId)
	 * @method bool hasImageId()
	 * @method bool isImageIdFilled()
	 * @method bool isImageIdChanged()
	 * @method \int remindActualImageId()
	 * @method \int requireImageId()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetImageId()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetImageId()
	 * @method \int fillImageId()
	 * @method \string getImage()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setImage(\string|\Bitrix\Main\DB\SqlExpression $image)
	 * @method bool hasImage()
	 * @method bool isImageFilled()
	 * @method bool isImageChanged()
	 * @method \string remindActualImage()
	 * @method \string requireImage()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetImage()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetImage()
	 * @method \string fillImage()
	 * @method \string getEmbed()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setEmbed(\string|\Bitrix\Main\DB\SqlExpression $embed)
	 * @method bool hasEmbed()
	 * @method bool isEmbedFilled()
	 * @method bool isEmbedChanged()
	 * @method \string remindActualEmbed()
	 * @method \string requireEmbed()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetEmbed()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetEmbed()
	 * @method \string fillEmbed()
	 * @method \string getExtra()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setExtra(\string|\Bitrix\Main\DB\SqlExpression $extra)
	 * @method bool hasExtra()
	 * @method bool isExtraFilled()
	 * @method bool isExtraChanged()
	 * @method \string remindActualExtra()
	 * @method \string requireExtra()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetExtra()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetExtra()
	 * @method \string fillExtra()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetDateInsert()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateExpire()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata setDateExpire(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateExpire)
	 * @method bool hasDateExpire()
	 * @method bool isDateExpireFilled()
	 * @method bool isDateExpireChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateExpire()
	 * @method \Bitrix\Main\Type\DateTime requireDateExpire()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata resetDateExpire()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unsetDateExpire()
	 * @method \Bitrix\Main\Type\DateTime fillDateExpire()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata set($fieldName, $value)
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata reset($fieldName)
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\UrlPreview\EO_UrlMetadata wakeUp($data)
	 */
	class EO_UrlMetadata {
		/* @var \Bitrix\Main\UrlPreview\UrlMetadataTable */
		static public $dataClass = '\Bitrix\Main\UrlPreview\UrlMetadataTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\UrlPreview {
	/**
	 * EO_UrlMetadata_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getUrlList()
	 * @method \string[] fillUrl()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \int[] getImageIdList()
	 * @method \int[] fillImageId()
	 * @method \string[] getImageList()
	 * @method \string[] fillImage()
	 * @method \string[] getEmbedList()
	 * @method \string[] fillEmbed()
	 * @method \string[] getExtraList()
	 * @method \string[] fillExtra()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateExpireList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateExpire()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\UrlPreview\EO_UrlMetadata $object)
	 * @method bool has(\Bitrix\Main\UrlPreview\EO_UrlMetadata $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata getByPrimary($primary)
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata[] getAll()
	 * @method bool remove(\Bitrix\Main\UrlPreview\EO_UrlMetadata $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\UrlPreview\EO_UrlMetadata_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UrlMetadata_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UrlPreview\UrlMetadataTable */
		static public $dataClass = '\Bitrix\Main\UrlPreview\UrlMetadataTable';
	}
}
namespace Bitrix\Main\UrlPreview {
	/**
	 * @method static EO_UrlMetadata_Query query()
	 * @method static EO_UrlMetadata_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UrlMetadata_Result getById($id)
	 * @method static EO_UrlMetadata_Result getList(array $parameters = array())
	 * @method static EO_UrlMetadata_Entity getEntity()
	 * @method static \Bitrix\Main\UrlPreview\EO_UrlMetadata createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\UrlPreview\EO_UrlMetadata_Collection createCollection()
	 * @method static \Bitrix\Main\UrlPreview\EO_UrlMetadata wakeUpObject($row)
	 * @method static \Bitrix\Main\UrlPreview\EO_UrlMetadata_Collection wakeUpCollection($rows)
	 */
	class UrlMetadataTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UrlMetadata_Result exec()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata fetchObject()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata_Collection fetchCollection()
	 */
	class EO_UrlMetadata_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata fetchObject()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata_Collection fetchCollection()
	 */
	class EO_UrlMetadata_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata_Collection createCollection()
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata wakeUpObject($row)
	 * @method \Bitrix\Main\UrlPreview\EO_UrlMetadata_Collection wakeUpCollection($rows)
	 */
	class EO_UrlMetadata_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Sms\TemplateTable */
namespace Bitrix\Main\Sms {
	/**
	 * Template
	 * @see \Bitrix\Main\Sms\TemplateTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Sms\Template setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getEventName()
	 * @method \Bitrix\Main\Sms\Template setEventName(\string|\Bitrix\Main\DB\SqlExpression $eventName)
	 * @method bool hasEventName()
	 * @method bool isEventNameFilled()
	 * @method bool isEventNameChanged()
	 * @method \string remindActualEventName()
	 * @method \string requireEventName()
	 * @method \Bitrix\Main\Sms\Template resetEventName()
	 * @method \Bitrix\Main\Sms\Template unsetEventName()
	 * @method \string fillEventName()
	 * @method \boolean getActive()
	 * @method \Bitrix\Main\Sms\Template setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Main\Sms\Template resetActive()
	 * @method \Bitrix\Main\Sms\Template unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getSender()
	 * @method \Bitrix\Main\Sms\Template setSender(\string|\Bitrix\Main\DB\SqlExpression $sender)
	 * @method bool hasSender()
	 * @method bool isSenderFilled()
	 * @method bool isSenderChanged()
	 * @method \string remindActualSender()
	 * @method \string requireSender()
	 * @method \Bitrix\Main\Sms\Template resetSender()
	 * @method \Bitrix\Main\Sms\Template unsetSender()
	 * @method \string fillSender()
	 * @method \string getReceiver()
	 * @method \Bitrix\Main\Sms\Template setReceiver(\string|\Bitrix\Main\DB\SqlExpression $receiver)
	 * @method bool hasReceiver()
	 * @method bool isReceiverFilled()
	 * @method bool isReceiverChanged()
	 * @method \string remindActualReceiver()
	 * @method \string requireReceiver()
	 * @method \Bitrix\Main\Sms\Template resetReceiver()
	 * @method \Bitrix\Main\Sms\Template unsetReceiver()
	 * @method \string fillReceiver()
	 * @method \string getMessage()
	 * @method \Bitrix\Main\Sms\Template setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Main\Sms\Template resetMessage()
	 * @method \Bitrix\Main\Sms\Template unsetMessage()
	 * @method \string fillMessage()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Main\Sms\Template setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Main\Sms\Template resetLanguageId()
	 * @method \Bitrix\Main\Sms\Template unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \Bitrix\Main\EO_Site_Collection getSites()
	 * @method \Bitrix\Main\EO_Site_Collection requireSites()
	 * @method \Bitrix\Main\EO_Site_Collection fillSites()
	 * @method bool hasSites()
	 * @method bool isSitesFilled()
	 * @method bool isSitesChanged()
	 * @method void addToSites(\Bitrix\Main\EO_Site $site)
	 * @method void removeFromSites(\Bitrix\Main\EO_Site $site)
	 * @method void removeAllSites()
	 * @method \Bitrix\Main\Sms\Template resetSites()
	 * @method \Bitrix\Main\Sms\Template unsetSites()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Sms\Template set($fieldName, $value)
	 * @method \Bitrix\Main\Sms\Template reset($fieldName)
	 * @method \Bitrix\Main\Sms\Template unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Sms\Template wakeUp($data)
	 */
	class EO_Template {
		/* @var \Bitrix\Main\Sms\TemplateTable */
		static public $dataClass = '\Bitrix\Main\Sms\TemplateTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Sms {
	/**
	 * EO_Template_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getEventNameList()
	 * @method \string[] fillEventName()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getSenderList()
	 * @method \string[] fillSender()
	 * @method \string[] getReceiverList()
	 * @method \string[] fillReceiver()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \Bitrix\Main\EO_Site_Collection[] getSitesList()
	 * @method \Bitrix\Main\EO_Site_Collection getSitesCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSites()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Sms\Template $object)
	 * @method bool has(\Bitrix\Main\Sms\Template $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Sms\Template getByPrimary($primary)
	 * @method \Bitrix\Main\Sms\Template[] getAll()
	 * @method bool remove(\Bitrix\Main\Sms\Template $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Sms\EO_Template_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Sms\Template current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Template_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Sms\TemplateTable */
		static public $dataClass = '\Bitrix\Main\Sms\TemplateTable';
	}
}
namespace Bitrix\Main\Sms {
	/**
	 * @method static EO_Template_Query query()
	 * @method static EO_Template_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Template_Result getById($id)
	 * @method static EO_Template_Result getList(array $parameters = array())
	 * @method static EO_Template_Entity getEntity()
	 * @method static \Bitrix\Main\Sms\Template createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Sms\EO_Template_Collection createCollection()
	 * @method static \Bitrix\Main\Sms\Template wakeUpObject($row)
	 * @method static \Bitrix\Main\Sms\EO_Template_Collection wakeUpCollection($rows)
	 */
	class TemplateTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Template_Result exec()
	 * @method \Bitrix\Main\Sms\Template fetchObject()
	 * @method \Bitrix\Main\Sms\EO_Template_Collection fetchCollection()
	 */
	class EO_Template_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Sms\Template fetchObject()
	 * @method \Bitrix\Main\Sms\EO_Template_Collection fetchCollection()
	 */
	class EO_Template_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Sms\Template createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Sms\EO_Template_Collection createCollection()
	 * @method \Bitrix\Main\Sms\Template wakeUpObject($row)
	 * @method \Bitrix\Main\Sms\EO_Template_Collection wakeUpCollection($rows)
	 */
	class EO_Template_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserAuthCodeTable */
namespace Bitrix\Main {
	/**
	 * EO_UserAuthCode
	 * @see \Bitrix\Main\UserAuthCodeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserAuthCode setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getCodeType()
	 * @method \Bitrix\Main\EO_UserAuthCode setCodeType(\string|\Bitrix\Main\DB\SqlExpression $codeType)
	 * @method bool hasCodeType()
	 * @method bool isCodeTypeFilled()
	 * @method bool isCodeTypeChanged()
	 * @method \string getOtpSecret()
	 * @method \Bitrix\Main\EO_UserAuthCode setOtpSecret(\string|\Bitrix\Main\DB\SqlExpression $otpSecret)
	 * @method bool hasOtpSecret()
	 * @method bool isOtpSecretFilled()
	 * @method bool isOtpSecretChanged()
	 * @method \string remindActualOtpSecret()
	 * @method \string requireOtpSecret()
	 * @method \Bitrix\Main\EO_UserAuthCode resetOtpSecret()
	 * @method \Bitrix\Main\EO_UserAuthCode unsetOtpSecret()
	 * @method \string fillOtpSecret()
	 * @method \int getAttempts()
	 * @method \Bitrix\Main\EO_UserAuthCode setAttempts(\int|\Bitrix\Main\DB\SqlExpression $attempts)
	 * @method bool hasAttempts()
	 * @method bool isAttemptsFilled()
	 * @method bool isAttemptsChanged()
	 * @method \int remindActualAttempts()
	 * @method \int requireAttempts()
	 * @method \Bitrix\Main\EO_UserAuthCode resetAttempts()
	 * @method \Bitrix\Main\EO_UserAuthCode unsetAttempts()
	 * @method \int fillAttempts()
	 * @method \Bitrix\Main\Type\DateTime getDateSent()
	 * @method \Bitrix\Main\EO_UserAuthCode setDateSent(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateSent)
	 * @method bool hasDateSent()
	 * @method bool isDateSentFilled()
	 * @method bool isDateSentChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateSent()
	 * @method \Bitrix\Main\Type\DateTime requireDateSent()
	 * @method \Bitrix\Main\EO_UserAuthCode resetDateSent()
	 * @method \Bitrix\Main\EO_UserAuthCode unsetDateSent()
	 * @method \Bitrix\Main\Type\DateTime fillDateSent()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Main\EO_UserAuthCode setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\EO_UserAuthCode resetUser()
	 * @method \Bitrix\Main\EO_UserAuthCode unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserAuthCode set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserAuthCode reset($fieldName)
	 * @method \Bitrix\Main\EO_UserAuthCode unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserAuthCode wakeUp($data)
	 */
	class EO_UserAuthCode {
		/* @var \Bitrix\Main\UserAuthCodeTable */
		static public $dataClass = '\Bitrix\Main\UserAuthCodeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserAuthCode_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \string[] getCodeTypeList()
	 * @method \string[] getOtpSecretList()
	 * @method \string[] fillOtpSecret()
	 * @method \int[] getAttemptsList()
	 * @method \int[] fillAttempts()
	 * @method \Bitrix\Main\Type\DateTime[] getDateSentList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateSent()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Main\EO_UserAuthCode_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserAuthCode $object)
	 * @method bool has(\Bitrix\Main\EO_UserAuthCode $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserAuthCode getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserAuthCode[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserAuthCode $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserAuthCode_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserAuthCode current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserAuthCode_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserAuthCodeTable */
		static public $dataClass = '\Bitrix\Main\UserAuthCodeTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserAuthCode_Query query()
	 * @method static EO_UserAuthCode_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserAuthCode_Result getById($id)
	 * @method static EO_UserAuthCode_Result getList(array $parameters = array())
	 * @method static EO_UserAuthCode_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserAuthCode createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserAuthCode_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserAuthCode wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserAuthCode_Collection wakeUpCollection($rows)
	 */
	class UserAuthCodeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserAuthCode_Result exec()
	 * @method \Bitrix\Main\EO_UserAuthCode fetchObject()
	 * @method \Bitrix\Main\EO_UserAuthCode_Collection fetchCollection()
	 */
	class EO_UserAuthCode_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserAuthCode fetchObject()
	 * @method \Bitrix\Main\EO_UserAuthCode_Collection fetchCollection()
	 */
	class EO_UserAuthCode_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserAuthCode createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserAuthCode_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserAuthCode wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserAuthCode_Collection wakeUpCollection($rows)
	 */
	class EO_UserAuthCode_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Numerator\Model\NumeratorSequenceTable */
namespace Bitrix\Main\Numerator\Model {
	/**
	 * EO_NumeratorSequence
	 * @see \Bitrix\Main\Numerator\Model\NumeratorSequenceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getNumeratorId()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence setNumeratorId(\int|\Bitrix\Main\DB\SqlExpression $numeratorId)
	 * @method bool hasNumeratorId()
	 * @method bool isNumeratorIdFilled()
	 * @method bool isNumeratorIdChanged()
	 * @method \string getKey()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence setKey(\string|\Bitrix\Main\DB\SqlExpression $key)
	 * @method bool hasKey()
	 * @method bool isKeyFilled()
	 * @method bool isKeyChanged()
	 * @method \string getTextKey()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence setTextKey(\string|\Bitrix\Main\DB\SqlExpression $textKey)
	 * @method bool hasTextKey()
	 * @method bool isTextKeyFilled()
	 * @method bool isTextKeyChanged()
	 * @method \string remindActualTextKey()
	 * @method \string requireTextKey()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence resetTextKey()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence unsetTextKey()
	 * @method \string fillTextKey()
	 * @method \int getNextNumber()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence setNextNumber(\int|\Bitrix\Main\DB\SqlExpression $nextNumber)
	 * @method bool hasNextNumber()
	 * @method bool isNextNumberFilled()
	 * @method bool isNextNumberChanged()
	 * @method \int remindActualNextNumber()
	 * @method \int requireNextNumber()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence resetNextNumber()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence unsetNextNumber()
	 * @method \int fillNextNumber()
	 * @method \int getLastInvocationTime()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence setLastInvocationTime(\int|\Bitrix\Main\DB\SqlExpression $lastInvocationTime)
	 * @method bool hasLastInvocationTime()
	 * @method bool isLastInvocationTimeFilled()
	 * @method bool isLastInvocationTimeChanged()
	 * @method \int remindActualLastInvocationTime()
	 * @method \int requireLastInvocationTime()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence resetLastInvocationTime()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence unsetLastInvocationTime()
	 * @method \int fillLastInvocationTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence set($fieldName, $value)
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence reset($fieldName)
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Numerator\Model\EO_NumeratorSequence wakeUp($data)
	 */
	class EO_NumeratorSequence {
		/* @var \Bitrix\Main\Numerator\Model\NumeratorSequenceTable */
		static public $dataClass = '\Bitrix\Main\Numerator\Model\NumeratorSequenceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Numerator\Model {
	/**
	 * EO_NumeratorSequence_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getNumeratorIdList()
	 * @method \string[] getKeyList()
	 * @method \string[] getTextKeyList()
	 * @method \string[] fillTextKey()
	 * @method \int[] getNextNumberList()
	 * @method \int[] fillNextNumber()
	 * @method \int[] getLastInvocationTimeList()
	 * @method \int[] fillLastInvocationTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Numerator\Model\EO_NumeratorSequence $object)
	 * @method bool has(\Bitrix\Main\Numerator\Model\EO_NumeratorSequence $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence getByPrimary($primary)
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence[] getAll()
	 * @method bool remove(\Bitrix\Main\Numerator\Model\EO_NumeratorSequence $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Numerator\Model\EO_NumeratorSequence_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_NumeratorSequence_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Numerator\Model\NumeratorSequenceTable */
		static public $dataClass = '\Bitrix\Main\Numerator\Model\NumeratorSequenceTable';
	}
}
namespace Bitrix\Main\Numerator\Model {
	/**
	 * @method static EO_NumeratorSequence_Query query()
	 * @method static EO_NumeratorSequence_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_NumeratorSequence_Result getById($id)
	 * @method static EO_NumeratorSequence_Result getList(array $parameters = array())
	 * @method static EO_NumeratorSequence_Entity getEntity()
	 * @method static \Bitrix\Main\Numerator\Model\EO_NumeratorSequence createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Numerator\Model\EO_NumeratorSequence_Collection createCollection()
	 * @method static \Bitrix\Main\Numerator\Model\EO_NumeratorSequence wakeUpObject($row)
	 * @method static \Bitrix\Main\Numerator\Model\EO_NumeratorSequence_Collection wakeUpCollection($rows)
	 */
	class NumeratorSequenceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_NumeratorSequence_Result exec()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence fetchObject()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence_Collection fetchCollection()
	 */
	class EO_NumeratorSequence_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence fetchObject()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence_Collection fetchCollection()
	 */
	class EO_NumeratorSequence_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence_Collection createCollection()
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence wakeUpObject($row)
	 * @method \Bitrix\Main\Numerator\Model\EO_NumeratorSequence_Collection wakeUpCollection($rows)
	 */
	class EO_NumeratorSequence_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Numerator\Model\NumeratorTable */
namespace Bitrix\Main\Numerator\Model {
	/**
	 * EO_Numerator
	 * @see \Bitrix\Main\Numerator\Model\NumeratorTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator resetName()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unsetName()
	 * @method \string fillName()
	 * @method \string getTemplate()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setTemplate(\string|\Bitrix\Main\DB\SqlExpression $template)
	 * @method bool hasTemplate()
	 * @method bool isTemplateFilled()
	 * @method bool isTemplateChanged()
	 * @method \string remindActualTemplate()
	 * @method \string requireTemplate()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator resetTemplate()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unsetTemplate()
	 * @method \string fillTemplate()
	 * @method \string getSettings()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator resetSettings()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unsetSettings()
	 * @method \string fillSettings()
	 * @method \string getType()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator resetType()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unsetType()
	 * @method \string fillType()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator resetCreatedAt()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator resetCreatedBy()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \Bitrix\Main\Type\DateTime getUpdatedAt()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setUpdatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $updatedAt)
	 * @method bool hasUpdatedAt()
	 * @method bool isUpdatedAtFilled()
	 * @method bool isUpdatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireUpdatedAt()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator resetUpdatedAt()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unsetUpdatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillUpdatedAt()
	 * @method \int getUpdatedBy()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator setUpdatedBy(\int|\Bitrix\Main\DB\SqlExpression $updatedBy)
	 * @method bool hasUpdatedBy()
	 * @method bool isUpdatedByFilled()
	 * @method bool isUpdatedByChanged()
	 * @method \int remindActualUpdatedBy()
	 * @method \int requireUpdatedBy()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator resetUpdatedBy()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unsetUpdatedBy()
	 * @method \int fillUpdatedBy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator set($fieldName, $value)
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator reset($fieldName)
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Numerator\Model\EO_Numerator wakeUp($data)
	 */
	class EO_Numerator {
		/* @var \Bitrix\Main\Numerator\Model\NumeratorTable */
		static public $dataClass = '\Bitrix\Main\Numerator\Model\NumeratorTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Numerator\Model {
	/**
	 * EO_Numerator_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getTemplateList()
	 * @method \string[] fillTemplate()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getUpdatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillUpdatedAt()
	 * @method \int[] getUpdatedByList()
	 * @method \int[] fillUpdatedBy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Numerator\Model\EO_Numerator $object)
	 * @method bool has(\Bitrix\Main\Numerator\Model\EO_Numerator $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator getByPrimary($primary)
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator[] getAll()
	 * @method bool remove(\Bitrix\Main\Numerator\Model\EO_Numerator $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Numerator\Model\EO_Numerator_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Numerator_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Numerator\Model\NumeratorTable */
		static public $dataClass = '\Bitrix\Main\Numerator\Model\NumeratorTable';
	}
}
namespace Bitrix\Main\Numerator\Model {
	/**
	 * @method static EO_Numerator_Query query()
	 * @method static EO_Numerator_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Numerator_Result getById($id)
	 * @method static EO_Numerator_Result getList(array $parameters = array())
	 * @method static EO_Numerator_Entity getEntity()
	 * @method static \Bitrix\Main\Numerator\Model\EO_Numerator createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Numerator\Model\EO_Numerator_Collection createCollection()
	 * @method static \Bitrix\Main\Numerator\Model\EO_Numerator wakeUpObject($row)
	 * @method static \Bitrix\Main\Numerator\Model\EO_Numerator_Collection wakeUpCollection($rows)
	 */
	class NumeratorTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Numerator_Result exec()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator fetchObject()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator_Collection fetchCollection()
	 */
	class EO_Numerator_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator fetchObject()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator_Collection fetchCollection()
	 */
	class EO_Numerator_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator_Collection createCollection()
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator wakeUpObject($row)
	 * @method \Bitrix\Main\Numerator\Model\EO_Numerator_Collection wakeUpCollection($rows)
	 */
	class EO_Numerator_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserFieldLangTable */
namespace Bitrix\Main {
	/**
	 * EO_UserFieldLang
	 * @see \Bitrix\Main\UserFieldLangTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserFieldId()
	 * @method \Bitrix\Main\EO_UserFieldLang setUserFieldId(\int|\Bitrix\Main\DB\SqlExpression $userFieldId)
	 * @method bool hasUserFieldId()
	 * @method bool isUserFieldIdFilled()
	 * @method bool isUserFieldIdChanged()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Main\EO_UserFieldLang setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string getEditFormLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang setEditFormLabel(\string|\Bitrix\Main\DB\SqlExpression $editFormLabel)
	 * @method bool hasEditFormLabel()
	 * @method bool isEditFormLabelFilled()
	 * @method bool isEditFormLabelChanged()
	 * @method \string remindActualEditFormLabel()
	 * @method \string requireEditFormLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang resetEditFormLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang unsetEditFormLabel()
	 * @method \string fillEditFormLabel()
	 * @method \string getListColumnLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang setListColumnLabel(\string|\Bitrix\Main\DB\SqlExpression $listColumnLabel)
	 * @method bool hasListColumnLabel()
	 * @method bool isListColumnLabelFilled()
	 * @method bool isListColumnLabelChanged()
	 * @method \string remindActualListColumnLabel()
	 * @method \string requireListColumnLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang resetListColumnLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang unsetListColumnLabel()
	 * @method \string fillListColumnLabel()
	 * @method \string getListFilterLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang setListFilterLabel(\string|\Bitrix\Main\DB\SqlExpression $listFilterLabel)
	 * @method bool hasListFilterLabel()
	 * @method bool isListFilterLabelFilled()
	 * @method bool isListFilterLabelChanged()
	 * @method \string remindActualListFilterLabel()
	 * @method \string requireListFilterLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang resetListFilterLabel()
	 * @method \Bitrix\Main\EO_UserFieldLang unsetListFilterLabel()
	 * @method \string fillListFilterLabel()
	 * @method \string getErrorMessage()
	 * @method \Bitrix\Main\EO_UserFieldLang setErrorMessage(\string|\Bitrix\Main\DB\SqlExpression $errorMessage)
	 * @method bool hasErrorMessage()
	 * @method bool isErrorMessageFilled()
	 * @method bool isErrorMessageChanged()
	 * @method \string remindActualErrorMessage()
	 * @method \string requireErrorMessage()
	 * @method \Bitrix\Main\EO_UserFieldLang resetErrorMessage()
	 * @method \Bitrix\Main\EO_UserFieldLang unsetErrorMessage()
	 * @method \string fillErrorMessage()
	 * @method \string getHelpMessage()
	 * @method \Bitrix\Main\EO_UserFieldLang setHelpMessage(\string|\Bitrix\Main\DB\SqlExpression $helpMessage)
	 * @method bool hasHelpMessage()
	 * @method bool isHelpMessageFilled()
	 * @method bool isHelpMessageChanged()
	 * @method \string remindActualHelpMessage()
	 * @method \string requireHelpMessage()
	 * @method \Bitrix\Main\EO_UserFieldLang resetHelpMessage()
	 * @method \Bitrix\Main\EO_UserFieldLang unsetHelpMessage()
	 * @method \string fillHelpMessage()
	 * @method \Bitrix\Main\EO_UserField getUserField()
	 * @method \Bitrix\Main\EO_UserField remindActualUserField()
	 * @method \Bitrix\Main\EO_UserField requireUserField()
	 * @method \Bitrix\Main\EO_UserFieldLang setUserField(\Bitrix\Main\EO_UserField $object)
	 * @method \Bitrix\Main\EO_UserFieldLang resetUserField()
	 * @method \Bitrix\Main\EO_UserFieldLang unsetUserField()
	 * @method bool hasUserField()
	 * @method bool isUserFieldFilled()
	 * @method bool isUserFieldChanged()
	 * @method \Bitrix\Main\EO_UserField fillUserField()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserFieldLang set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserFieldLang reset($fieldName)
	 * @method \Bitrix\Main\EO_UserFieldLang unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserFieldLang wakeUp($data)
	 */
	class EO_UserFieldLang {
		/* @var \Bitrix\Main\UserFieldLangTable */
		static public $dataClass = '\Bitrix\Main\UserFieldLangTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserFieldLang_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserFieldIdList()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] getEditFormLabelList()
	 * @method \string[] fillEditFormLabel()
	 * @method \string[] getListColumnLabelList()
	 * @method \string[] fillListColumnLabel()
	 * @method \string[] getListFilterLabelList()
	 * @method \string[] fillListFilterLabel()
	 * @method \string[] getErrorMessageList()
	 * @method \string[] fillErrorMessage()
	 * @method \string[] getHelpMessageList()
	 * @method \string[] fillHelpMessage()
	 * @method \Bitrix\Main\EO_UserField[] getUserFieldList()
	 * @method \Bitrix\Main\EO_UserFieldLang_Collection getUserFieldCollection()
	 * @method \Bitrix\Main\EO_UserField_Collection fillUserField()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserFieldLang $object)
	 * @method bool has(\Bitrix\Main\EO_UserFieldLang $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserFieldLang getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserFieldLang[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserFieldLang $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserFieldLang_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserFieldLang current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserFieldLang_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserFieldLangTable */
		static public $dataClass = '\Bitrix\Main\UserFieldLangTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserFieldLang_Query query()
	 * @method static EO_UserFieldLang_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserFieldLang_Result getById($id)
	 * @method static EO_UserFieldLang_Result getList(array $parameters = array())
	 * @method static EO_UserFieldLang_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserFieldLang createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserFieldLang_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserFieldLang wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserFieldLang_Collection wakeUpCollection($rows)
	 */
	class UserFieldLangTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserFieldLang_Result exec()
	 * @method \Bitrix\Main\EO_UserFieldLang fetchObject()
	 * @method \Bitrix\Main\EO_UserFieldLang_Collection fetchCollection()
	 */
	class EO_UserFieldLang_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserFieldLang fetchObject()
	 * @method \Bitrix\Main\EO_UserFieldLang_Collection fetchCollection()
	 */
	class EO_UserFieldLang_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserFieldLang createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserFieldLang_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserFieldLang wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserFieldLang_Collection wakeUpCollection($rows)
	 */
	class EO_UserFieldLang_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserGroupTable */
namespace Bitrix\Main {
	/**
	 * EO_UserGroup
	 * @see \Bitrix\Main\UserGroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserGroup setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Main\EO_UserGroup setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\EO_UserGroup resetUser()
	 * @method \Bitrix\Main\EO_UserGroup unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \int getGroupId()
	 * @method \Bitrix\Main\EO_UserGroup setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \Bitrix\Main\EO_Group getGroup()
	 * @method \Bitrix\Main\EO_Group remindActualGroup()
	 * @method \Bitrix\Main\EO_Group requireGroup()
	 * @method \Bitrix\Main\EO_UserGroup setGroup(\Bitrix\Main\EO_Group $object)
	 * @method \Bitrix\Main\EO_UserGroup resetGroup()
	 * @method \Bitrix\Main\EO_UserGroup unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Main\EO_Group fillGroup()
	 * @method \Bitrix\Main\Type\DateTime getDateActiveFrom()
	 * @method \Bitrix\Main\EO_UserGroup setDateActiveFrom(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateActiveFrom)
	 * @method bool hasDateActiveFrom()
	 * @method bool isDateActiveFromFilled()
	 * @method bool isDateActiveFromChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime requireDateActiveFrom()
	 * @method \Bitrix\Main\EO_UserGroup resetDateActiveFrom()
	 * @method \Bitrix\Main\EO_UserGroup unsetDateActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime fillDateActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime getDateActiveTo()
	 * @method \Bitrix\Main\EO_UserGroup setDateActiveTo(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateActiveTo)
	 * @method bool hasDateActiveTo()
	 * @method bool isDateActiveToFilled()
	 * @method bool isDateActiveToChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateActiveTo()
	 * @method \Bitrix\Main\Type\DateTime requireDateActiveTo()
	 * @method \Bitrix\Main\EO_UserGroup resetDateActiveTo()
	 * @method \Bitrix\Main\EO_UserGroup unsetDateActiveTo()
	 * @method \Bitrix\Main\Type\DateTime fillDateActiveTo()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserGroup set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserGroup reset($fieldName)
	 * @method \Bitrix\Main\EO_UserGroup unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserGroup wakeUp($data)
	 */
	class EO_UserGroup {
		/* @var \Bitrix\Main\UserGroupTable */
		static public $dataClass = '\Bitrix\Main\UserGroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserGroup_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \int[] getGroupIdList()
	 * @method \Bitrix\Main\EO_Group[] getGroupList()
	 * @method \Bitrix\Main\EO_UserGroup_Collection getGroupCollection()
	 * @method \Bitrix\Main\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Main\Type\DateTime[] getDateActiveFromList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime[] getDateActiveToList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateActiveTo()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserGroup $object)
	 * @method bool has(\Bitrix\Main\EO_UserGroup $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserGroup getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserGroup[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserGroup $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserGroup_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserGroup current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserGroup_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserGroupTable */
		static public $dataClass = '\Bitrix\Main\UserGroupTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserGroup_Query query()
	 * @method static EO_UserGroup_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserGroup_Result getById($id)
	 * @method static EO_UserGroup_Result getList(array $parameters = array())
	 * @method static EO_UserGroup_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserGroup createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserGroup_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserGroup wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserGroup_Collection wakeUpCollection($rows)
	 */
	class UserGroupTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserGroup_Result exec()
	 * @method \Bitrix\Main\EO_UserGroup fetchObject()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fetchCollection()
	 */
	class EO_UserGroup_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserGroup fetchObject()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fetchCollection()
	 */
	class EO_UserGroup_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserGroup createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserGroup_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserGroup wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserGroup_Collection wakeUpCollection($rows)
	 */
	class EO_UserGroup_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Authentication\ApplicationPasswordTable */
namespace Bitrix\Main\Authentication {
	/**
	 * EO_ApplicationPassword
	 * @see \Bitrix\Main\Authentication\ApplicationPasswordTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetUserId()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetUserId()
	 * @method \int fillUserId()
	 * @method \string getApplicationId()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setApplicationId(\string|\Bitrix\Main\DB\SqlExpression $applicationId)
	 * @method bool hasApplicationId()
	 * @method bool isApplicationIdFilled()
	 * @method bool isApplicationIdChanged()
	 * @method \string remindActualApplicationId()
	 * @method \string requireApplicationId()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetApplicationId()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetApplicationId()
	 * @method \string fillApplicationId()
	 * @method \string getPassword()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setPassword(\string|\Bitrix\Main\DB\SqlExpression $password)
	 * @method bool hasPassword()
	 * @method bool isPasswordFilled()
	 * @method bool isPasswordChanged()
	 * @method \string remindActualPassword()
	 * @method \string requirePassword()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetPassword()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetPassword()
	 * @method \string fillPassword()
	 * @method \string getDigestPassword()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setDigestPassword(\string|\Bitrix\Main\DB\SqlExpression $digestPassword)
	 * @method bool hasDigestPassword()
	 * @method bool isDigestPasswordFilled()
	 * @method bool isDigestPasswordChanged()
	 * @method \string remindActualDigestPassword()
	 * @method \string requireDigestPassword()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetDigestPassword()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetDigestPassword()
	 * @method \string fillDigestPassword()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetDateCreate()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateLogin()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setDateLogin(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateLogin)
	 * @method bool hasDateLogin()
	 * @method bool isDateLoginFilled()
	 * @method bool isDateLoginChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateLogin()
	 * @method \Bitrix\Main\Type\DateTime requireDateLogin()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetDateLogin()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetDateLogin()
	 * @method \Bitrix\Main\Type\DateTime fillDateLogin()
	 * @method \string getLastIp()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setLastIp(\string|\Bitrix\Main\DB\SqlExpression $lastIp)
	 * @method bool hasLastIp()
	 * @method bool isLastIpFilled()
	 * @method bool isLastIpChanged()
	 * @method \string remindActualLastIp()
	 * @method \string requireLastIp()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetLastIp()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetLastIp()
	 * @method \string fillLastIp()
	 * @method \string getComment()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setComment(\string|\Bitrix\Main\DB\SqlExpression $comment)
	 * @method bool hasComment()
	 * @method bool isCommentFilled()
	 * @method bool isCommentChanged()
	 * @method \string remindActualComment()
	 * @method \string requireComment()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetComment()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetComment()
	 * @method \string fillComment()
	 * @method \string getSyscomment()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setSyscomment(\string|\Bitrix\Main\DB\SqlExpression $syscomment)
	 * @method bool hasSyscomment()
	 * @method bool isSyscommentFilled()
	 * @method bool isSyscommentChanged()
	 * @method \string remindActualSyscomment()
	 * @method \string requireSyscomment()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetSyscomment()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetSyscomment()
	 * @method \string fillSyscomment()
	 * @method \string getCode()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetCode()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetCode()
	 * @method \string fillCode()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword resetUser()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword set($fieldName, $value)
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword reset($fieldName)
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Authentication\EO_ApplicationPassword wakeUp($data)
	 */
	class EO_ApplicationPassword {
		/* @var \Bitrix\Main\Authentication\ApplicationPasswordTable */
		static public $dataClass = '\Bitrix\Main\Authentication\ApplicationPasswordTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Authentication {
	/**
	 * EO_ApplicationPassword_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \string[] getApplicationIdList()
	 * @method \string[] fillApplicationId()
	 * @method \string[] getPasswordList()
	 * @method \string[] fillPassword()
	 * @method \string[] getDigestPasswordList()
	 * @method \string[] fillDigestPassword()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateLoginList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateLogin()
	 * @method \string[] getLastIpList()
	 * @method \string[] fillLastIp()
	 * @method \string[] getCommentList()
	 * @method \string[] fillComment()
	 * @method \string[] getSyscommentList()
	 * @method \string[] fillSyscomment()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Authentication\EO_ApplicationPassword $object)
	 * @method bool has(\Bitrix\Main\Authentication\EO_ApplicationPassword $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword getByPrimary($primary)
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword[] getAll()
	 * @method bool remove(\Bitrix\Main\Authentication\EO_ApplicationPassword $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Authentication\EO_ApplicationPassword_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ApplicationPassword_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Authentication\ApplicationPasswordTable */
		static public $dataClass = '\Bitrix\Main\Authentication\ApplicationPasswordTable';
	}
}
namespace Bitrix\Main\Authentication {
	/**
	 * @method static EO_ApplicationPassword_Query query()
	 * @method static EO_ApplicationPassword_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ApplicationPassword_Result getById($id)
	 * @method static EO_ApplicationPassword_Result getList(array $parameters = array())
	 * @method static EO_ApplicationPassword_Entity getEntity()
	 * @method static \Bitrix\Main\Authentication\EO_ApplicationPassword createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Authentication\EO_ApplicationPassword_Collection createCollection()
	 * @method static \Bitrix\Main\Authentication\EO_ApplicationPassword wakeUpObject($row)
	 * @method static \Bitrix\Main\Authentication\EO_ApplicationPassword_Collection wakeUpCollection($rows)
	 */
	class ApplicationPasswordTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_ApplicationPassword_Result exec()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword fetchObject()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword_Collection fetchCollection()
	 */
	class EO_ApplicationPassword_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword fetchObject()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword_Collection fetchCollection()
	 */
	class EO_ApplicationPassword_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword_Collection createCollection()
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword wakeUpObject($row)
	 * @method \Bitrix\Main\Authentication\EO_ApplicationPassword_Collection wakeUpCollection($rows)
	 */
	class EO_ApplicationPassword_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\TaskOperationTable */
namespace Bitrix\Main {
	/**
	 * EO_TaskOperation
	 * @see \Bitrix\Main\TaskOperationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getTaskId()
	 * @method \Bitrix\Main\EO_TaskOperation setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \int getOperationId()
	 * @method \Bitrix\Main\EO_TaskOperation setOperationId(\int|\Bitrix\Main\DB\SqlExpression $operationId)
	 * @method bool hasOperationId()
	 * @method bool isOperationIdFilled()
	 * @method bool isOperationIdChanged()
	 * @method \Bitrix\Main\EO_Operation getOperation()
	 * @method \Bitrix\Main\EO_Operation remindActualOperation()
	 * @method \Bitrix\Main\EO_Operation requireOperation()
	 * @method \Bitrix\Main\EO_TaskOperation setOperation(\Bitrix\Main\EO_Operation $object)
	 * @method \Bitrix\Main\EO_TaskOperation resetOperation()
	 * @method \Bitrix\Main\EO_TaskOperation unsetOperation()
	 * @method bool hasOperation()
	 * @method bool isOperationFilled()
	 * @method bool isOperationChanged()
	 * @method \Bitrix\Main\EO_Operation fillOperation()
	 * @method \Bitrix\Main\EO_Task getTask()
	 * @method \Bitrix\Main\EO_Task remindActualTask()
	 * @method \Bitrix\Main\EO_Task requireTask()
	 * @method \Bitrix\Main\EO_TaskOperation setTask(\Bitrix\Main\EO_Task $object)
	 * @method \Bitrix\Main\EO_TaskOperation resetTask()
	 * @method \Bitrix\Main\EO_TaskOperation unsetTask()
	 * @method bool hasTask()
	 * @method bool isTaskFilled()
	 * @method bool isTaskChanged()
	 * @method \Bitrix\Main\EO_Task fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_TaskOperation set($fieldName, $value)
	 * @method \Bitrix\Main\EO_TaskOperation reset($fieldName)
	 * @method \Bitrix\Main\EO_TaskOperation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_TaskOperation wakeUp($data)
	 */
	class EO_TaskOperation {
		/* @var \Bitrix\Main\TaskOperationTable */
		static public $dataClass = '\Bitrix\Main\TaskOperationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_TaskOperation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getTaskIdList()
	 * @method \int[] getOperationIdList()
	 * @method \Bitrix\Main\EO_Operation[] getOperationList()
	 * @method \Bitrix\Main\EO_TaskOperation_Collection getOperationCollection()
	 * @method \Bitrix\Main\EO_Operation_Collection fillOperation()
	 * @method \Bitrix\Main\EO_Task[] getTaskList()
	 * @method \Bitrix\Main\EO_TaskOperation_Collection getTaskCollection()
	 * @method \Bitrix\Main\EO_Task_Collection fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_TaskOperation $object)
	 * @method bool has(\Bitrix\Main\EO_TaskOperation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_TaskOperation getByPrimary($primary)
	 * @method \Bitrix\Main\EO_TaskOperation[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_TaskOperation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_TaskOperation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_TaskOperation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TaskOperation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\TaskOperationTable */
		static public $dataClass = '\Bitrix\Main\TaskOperationTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_TaskOperation_Query query()
	 * @method static EO_TaskOperation_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TaskOperation_Result getById($id)
	 * @method static EO_TaskOperation_Result getList(array $parameters = array())
	 * @method static EO_TaskOperation_Entity getEntity()
	 * @method static \Bitrix\Main\EO_TaskOperation createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_TaskOperation_Collection createCollection()
	 * @method static \Bitrix\Main\EO_TaskOperation wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_TaskOperation_Collection wakeUpCollection($rows)
	 */
	class TaskOperationTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_TaskOperation_Result exec()
	 * @method \Bitrix\Main\EO_TaskOperation fetchObject()
	 * @method \Bitrix\Main\EO_TaskOperation_Collection fetchCollection()
	 */
	class EO_TaskOperation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_TaskOperation fetchObject()
	 * @method \Bitrix\Main\EO_TaskOperation_Collection fetchCollection()
	 */
	class EO_TaskOperation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_TaskOperation createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_TaskOperation_Collection createCollection()
	 * @method \Bitrix\Main\EO_TaskOperation wakeUpObject($row)
	 * @method \Bitrix\Main\EO_TaskOperation_Collection wakeUpCollection($rows)
	 */
	class EO_TaskOperation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Localization\LanguageTable */
namespace Bitrix\Main\Localization {
	/**
	 * EO_Language
	 * @see \Bitrix\Main\Localization\LanguageTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getLid()
	 * @method \Bitrix\Main\Localization\EO_Language setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string getId()
	 * @method \string remindActualId()
	 * @method \string requireId()
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method \Bitrix\Main\Localization\EO_Language unsetId()
	 * @method \string fillId()
	 * @method \string getLanguageId()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method \Bitrix\Main\Localization\EO_Language unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \int getSort()
	 * @method \Bitrix\Main\Localization\EO_Language setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Main\Localization\EO_Language resetSort()
	 * @method \Bitrix\Main\Localization\EO_Language unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getDef()
	 * @method \Bitrix\Main\Localization\EO_Language setDef(\boolean|\Bitrix\Main\DB\SqlExpression $def)
	 * @method bool hasDef()
	 * @method bool isDefFilled()
	 * @method bool isDefChanged()
	 * @method \boolean remindActualDef()
	 * @method \boolean requireDef()
	 * @method \Bitrix\Main\Localization\EO_Language resetDef()
	 * @method \Bitrix\Main\Localization\EO_Language unsetDef()
	 * @method \boolean fillDef()
	 * @method \boolean getActive()
	 * @method \Bitrix\Main\Localization\EO_Language setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Main\Localization\EO_Language resetActive()
	 * @method \Bitrix\Main\Localization\EO_Language unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getName()
	 * @method \Bitrix\Main\Localization\EO_Language setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\Localization\EO_Language resetName()
	 * @method \Bitrix\Main\Localization\EO_Language unsetName()
	 * @method \string fillName()
	 * @method \int getCultureId()
	 * @method \Bitrix\Main\Localization\EO_Language setCultureId(\int|\Bitrix\Main\DB\SqlExpression $cultureId)
	 * @method bool hasCultureId()
	 * @method bool isCultureIdFilled()
	 * @method bool isCultureIdChanged()
	 * @method \int remindActualCultureId()
	 * @method \int requireCultureId()
	 * @method \Bitrix\Main\Localization\EO_Language resetCultureId()
	 * @method \Bitrix\Main\Localization\EO_Language unsetCultureId()
	 * @method \int fillCultureId()
	 * @method \Bitrix\Main\Context\Culture getCulture()
	 * @method \Bitrix\Main\Context\Culture remindActualCulture()
	 * @method \Bitrix\Main\Context\Culture requireCulture()
	 * @method \Bitrix\Main\Localization\EO_Language setCulture(\Bitrix\Main\Context\Culture $object)
	 * @method \Bitrix\Main\Localization\EO_Language resetCulture()
	 * @method \Bitrix\Main\Localization\EO_Language unsetCulture()
	 * @method bool hasCulture()
	 * @method bool isCultureFilled()
	 * @method bool isCultureChanged()
	 * @method \Bitrix\Main\Context\Culture fillCulture()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Localization\EO_Language set($fieldName, $value)
	 * @method \Bitrix\Main\Localization\EO_Language reset($fieldName)
	 * @method \Bitrix\Main\Localization\EO_Language unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Localization\EO_Language wakeUp($data)
	 */
	class EO_Language {
		/* @var \Bitrix\Main\Localization\LanguageTable */
		static public $dataClass = '\Bitrix\Main\Localization\LanguageTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Localization {
	/**
	 * EO_Language_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getLidList()
	 * @method \string[] getIdList()
	 * @method \string[] fillId()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getDefList()
	 * @method \boolean[] fillDef()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getCultureIdList()
	 * @method \int[] fillCultureId()
	 * @method \Bitrix\Main\Context\Culture[] getCultureList()
	 * @method \Bitrix\Main\Localization\EO_Language_Collection getCultureCollection()
	 * @method \Bitrix\Main\Localization\EO_Culture_Collection fillCulture()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Localization\EO_Language $object)
	 * @method bool has(\Bitrix\Main\Localization\EO_Language $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Localization\EO_Language getByPrimary($primary)
	 * @method \Bitrix\Main\Localization\EO_Language[] getAll()
	 * @method bool remove(\Bitrix\Main\Localization\EO_Language $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Localization\EO_Language_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Localization\EO_Language current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Language_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Localization\LanguageTable */
		static public $dataClass = '\Bitrix\Main\Localization\LanguageTable';
	}
}
namespace Bitrix\Main\Localization {
	/**
	 * @method static EO_Language_Query query()
	 * @method static EO_Language_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Language_Result getById($id)
	 * @method static EO_Language_Result getList(array $parameters = array())
	 * @method static EO_Language_Entity getEntity()
	 * @method static \Bitrix\Main\Localization\EO_Language createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Localization\EO_Language_Collection createCollection()
	 * @method static \Bitrix\Main\Localization\EO_Language wakeUpObject($row)
	 * @method static \Bitrix\Main\Localization\EO_Language_Collection wakeUpCollection($rows)
	 */
	class LanguageTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Language_Result exec()
	 * @method \Bitrix\Main\Localization\EO_Language fetchObject()
	 * @method \Bitrix\Main\Localization\EO_Language_Collection fetchCollection()
	 */
	class EO_Language_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Localization\EO_Language fetchObject()
	 * @method \Bitrix\Main\Localization\EO_Language_Collection fetchCollection()
	 */
	class EO_Language_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Localization\EO_Language createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Localization\EO_Language_Collection createCollection()
	 * @method \Bitrix\Main\Localization\EO_Language wakeUpObject($row)
	 * @method \Bitrix\Main\Localization\EO_Language_Collection wakeUpCollection($rows)
	 */
	class EO_Language_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\TaskTable */
namespace Bitrix\Main {
	/**
	 * EO_Task
	 * @see \Bitrix\Main\TaskTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_Task setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Main\EO_Task setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\EO_Task resetName()
	 * @method \Bitrix\Main\EO_Task unsetName()
	 * @method \string fillName()
	 * @method \string getLetter()
	 * @method \Bitrix\Main\EO_Task setLetter(\string|\Bitrix\Main\DB\SqlExpression $letter)
	 * @method bool hasLetter()
	 * @method bool isLetterFilled()
	 * @method bool isLetterChanged()
	 * @method \string remindActualLetter()
	 * @method \string requireLetter()
	 * @method \Bitrix\Main\EO_Task resetLetter()
	 * @method \Bitrix\Main\EO_Task unsetLetter()
	 * @method \string fillLetter()
	 * @method \string getModuleId()
	 * @method \Bitrix\Main\EO_Task setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Main\EO_Task resetModuleId()
	 * @method \Bitrix\Main\EO_Task unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getSys()
	 * @method \Bitrix\Main\EO_Task setSys(\string|\Bitrix\Main\DB\SqlExpression $sys)
	 * @method bool hasSys()
	 * @method bool isSysFilled()
	 * @method bool isSysChanged()
	 * @method \string remindActualSys()
	 * @method \string requireSys()
	 * @method \Bitrix\Main\EO_Task resetSys()
	 * @method \Bitrix\Main\EO_Task unsetSys()
	 * @method \string fillSys()
	 * @method \string getDescription()
	 * @method \Bitrix\Main\EO_Task setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Main\EO_Task resetDescription()
	 * @method \Bitrix\Main\EO_Task unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getBinding()
	 * @method \Bitrix\Main\EO_Task setBinding(\string|\Bitrix\Main\DB\SqlExpression $binding)
	 * @method bool hasBinding()
	 * @method bool isBindingFilled()
	 * @method bool isBindingChanged()
	 * @method \string remindActualBinding()
	 * @method \string requireBinding()
	 * @method \Bitrix\Main\EO_Task resetBinding()
	 * @method \Bitrix\Main\EO_Task unsetBinding()
	 * @method \string fillBinding()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_Task set($fieldName, $value)
	 * @method \Bitrix\Main\EO_Task reset($fieldName)
	 * @method \Bitrix\Main\EO_Task unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_Task wakeUp($data)
	 */
	class EO_Task {
		/* @var \Bitrix\Main\TaskTable */
		static public $dataClass = '\Bitrix\Main\TaskTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_Task_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLetterList()
	 * @method \string[] fillLetter()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getSysList()
	 * @method \string[] fillSys()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getBindingList()
	 * @method \string[] fillBinding()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_Task $object)
	 * @method bool has(\Bitrix\Main\EO_Task $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_Task getByPrimary($primary)
	 * @method \Bitrix\Main\EO_Task[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_Task $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_Task_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_Task current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Task_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\TaskTable */
		static public $dataClass = '\Bitrix\Main\TaskTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_Task_Query query()
	 * @method static EO_Task_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Task_Result getById($id)
	 * @method static EO_Task_Result getList(array $parameters = array())
	 * @method static EO_Task_Entity getEntity()
	 * @method static \Bitrix\Main\EO_Task createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_Task_Collection createCollection()
	 * @method static \Bitrix\Main\EO_Task wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_Task_Collection wakeUpCollection($rows)
	 */
	class TaskTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Task_Result exec()
	 * @method \Bitrix\Main\EO_Task fetchObject()
	 * @method \Bitrix\Main\EO_Task_Collection fetchCollection()
	 */
	class EO_Task_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_Task fetchObject()
	 * @method \Bitrix\Main\EO_Task_Collection fetchCollection()
	 */
	class EO_Task_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_Task createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_Task_Collection createCollection()
	 * @method \Bitrix\Main\EO_Task wakeUpObject($row)
	 * @method \Bitrix\Main\EO_Task_Collection wakeUpCollection($rows)
	 */
	class EO_Task_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserProfileHistoryTable */
namespace Bitrix\Main {
	/**
	 * EO_UserProfileHistory
	 * @see \Bitrix\Main\UserProfileHistoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_UserProfileHistory setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserProfileHistory setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\EO_UserProfileHistory resetUserId()
	 * @method \Bitrix\Main\EO_UserProfileHistory unsetUserId()
	 * @method \int fillUserId()
	 * @method \int getEventType()
	 * @method \Bitrix\Main\EO_UserProfileHistory setEventType(\int|\Bitrix\Main\DB\SqlExpression $eventType)
	 * @method bool hasEventType()
	 * @method bool isEventTypeFilled()
	 * @method bool isEventTypeChanged()
	 * @method \int remindActualEventType()
	 * @method \int requireEventType()
	 * @method \Bitrix\Main\EO_UserProfileHistory resetEventType()
	 * @method \Bitrix\Main\EO_UserProfileHistory unsetEventType()
	 * @method \int fillEventType()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Main\EO_UserProfileHistory setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Main\EO_UserProfileHistory resetDateInsert()
	 * @method \Bitrix\Main\EO_UserProfileHistory unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \string getRemoteAddr()
	 * @method \Bitrix\Main\EO_UserProfileHistory setRemoteAddr(\string|\Bitrix\Main\DB\SqlExpression $remoteAddr)
	 * @method bool hasRemoteAddr()
	 * @method bool isRemoteAddrFilled()
	 * @method bool isRemoteAddrChanged()
	 * @method \string remindActualRemoteAddr()
	 * @method \string requireRemoteAddr()
	 * @method \Bitrix\Main\EO_UserProfileHistory resetRemoteAddr()
	 * @method \Bitrix\Main\EO_UserProfileHistory unsetRemoteAddr()
	 * @method \string fillRemoteAddr()
	 * @method \string getUserAgent()
	 * @method \Bitrix\Main\EO_UserProfileHistory setUserAgent(\string|\Bitrix\Main\DB\SqlExpression $userAgent)
	 * @method bool hasUserAgent()
	 * @method bool isUserAgentFilled()
	 * @method bool isUserAgentChanged()
	 * @method \string remindActualUserAgent()
	 * @method \string requireUserAgent()
	 * @method \Bitrix\Main\EO_UserProfileHistory resetUserAgent()
	 * @method \Bitrix\Main\EO_UserProfileHistory unsetUserAgent()
	 * @method \string fillUserAgent()
	 * @method \string getRequestUri()
	 * @method \Bitrix\Main\EO_UserProfileHistory setRequestUri(\string|\Bitrix\Main\DB\SqlExpression $requestUri)
	 * @method bool hasRequestUri()
	 * @method bool isRequestUriFilled()
	 * @method bool isRequestUriChanged()
	 * @method \string remindActualRequestUri()
	 * @method \string requireRequestUri()
	 * @method \Bitrix\Main\EO_UserProfileHistory resetRequestUri()
	 * @method \Bitrix\Main\EO_UserProfileHistory unsetRequestUri()
	 * @method \string fillRequestUri()
	 * @method \int getUpdatedById()
	 * @method \Bitrix\Main\EO_UserProfileHistory setUpdatedById(\int|\Bitrix\Main\DB\SqlExpression $updatedById)
	 * @method bool hasUpdatedById()
	 * @method bool isUpdatedByIdFilled()
	 * @method bool isUpdatedByIdChanged()
	 * @method \int remindActualUpdatedById()
	 * @method \int requireUpdatedById()
	 * @method \Bitrix\Main\EO_UserProfileHistory resetUpdatedById()
	 * @method \Bitrix\Main\EO_UserProfileHistory unsetUpdatedById()
	 * @method \int fillUpdatedById()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserProfileHistory set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserProfileHistory reset($fieldName)
	 * @method \Bitrix\Main\EO_UserProfileHistory unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserProfileHistory wakeUp($data)
	 */
	class EO_UserProfileHistory {
		/* @var \Bitrix\Main\UserProfileHistoryTable */
		static public $dataClass = '\Bitrix\Main\UserProfileHistoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserProfileHistory_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \int[] getEventTypeList()
	 * @method \int[] fillEventType()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \string[] getRemoteAddrList()
	 * @method \string[] fillRemoteAddr()
	 * @method \string[] getUserAgentList()
	 * @method \string[] fillUserAgent()
	 * @method \string[] getRequestUriList()
	 * @method \string[] fillRequestUri()
	 * @method \int[] getUpdatedByIdList()
	 * @method \int[] fillUpdatedById()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserProfileHistory $object)
	 * @method bool has(\Bitrix\Main\EO_UserProfileHistory $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserProfileHistory getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserProfileHistory[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserProfileHistory $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserProfileHistory_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserProfileHistory current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserProfileHistory_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserProfileHistoryTable */
		static public $dataClass = '\Bitrix\Main\UserProfileHistoryTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserProfileHistory_Query query()
	 * @method static EO_UserProfileHistory_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserProfileHistory_Result getById($id)
	 * @method static EO_UserProfileHistory_Result getList(array $parameters = array())
	 * @method static EO_UserProfileHistory_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserProfileHistory createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserProfileHistory_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserProfileHistory wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserProfileHistory_Collection wakeUpCollection($rows)
	 */
	class UserProfileHistoryTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserProfileHistory_Result exec()
	 * @method \Bitrix\Main\EO_UserProfileHistory fetchObject()
	 * @method \Bitrix\Main\EO_UserProfileHistory_Collection fetchCollection()
	 */
	class EO_UserProfileHistory_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserProfileHistory fetchObject()
	 * @method \Bitrix\Main\EO_UserProfileHistory_Collection fetchCollection()
	 */
	class EO_UserProfileHistory_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserProfileHistory createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserProfileHistory_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserProfileHistory wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserProfileHistory_Collection wakeUpCollection($rows)
	 */
	class EO_UserProfileHistory_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\GroupTaskTable */
namespace Bitrix\Main {
	/**
	 * EO_GroupTask
	 * @see \Bitrix\Main\GroupTaskTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getGroupId()
	 * @method \Bitrix\Main\EO_GroupTask setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \int getTaskId()
	 * @method \Bitrix\Main\EO_GroupTask setTaskId(\int|\Bitrix\Main\DB\SqlExpression $taskId)
	 * @method bool hasTaskId()
	 * @method bool isTaskIdFilled()
	 * @method bool isTaskIdChanged()
	 * @method \string getExternalId()
	 * @method \Bitrix\Main\EO_GroupTask setExternalId(\string|\Bitrix\Main\DB\SqlExpression $externalId)
	 * @method bool hasExternalId()
	 * @method bool isExternalIdFilled()
	 * @method bool isExternalIdChanged()
	 * @method \string remindActualExternalId()
	 * @method \string requireExternalId()
	 * @method \Bitrix\Main\EO_GroupTask resetExternalId()
	 * @method \Bitrix\Main\EO_GroupTask unsetExternalId()
	 * @method \string fillExternalId()
	 * @method \Bitrix\Main\EO_Group getGroup()
	 * @method \Bitrix\Main\EO_Group remindActualGroup()
	 * @method \Bitrix\Main\EO_Group requireGroup()
	 * @method \Bitrix\Main\EO_GroupTask setGroup(\Bitrix\Main\EO_Group $object)
	 * @method \Bitrix\Main\EO_GroupTask resetGroup()
	 * @method \Bitrix\Main\EO_GroupTask unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Main\EO_Group fillGroup()
	 * @method \Bitrix\Main\EO_Task getTask()
	 * @method \Bitrix\Main\EO_Task remindActualTask()
	 * @method \Bitrix\Main\EO_Task requireTask()
	 * @method \Bitrix\Main\EO_GroupTask setTask(\Bitrix\Main\EO_Task $object)
	 * @method \Bitrix\Main\EO_GroupTask resetTask()
	 * @method \Bitrix\Main\EO_GroupTask unsetTask()
	 * @method bool hasTask()
	 * @method bool isTaskFilled()
	 * @method bool isTaskChanged()
	 * @method \Bitrix\Main\EO_Task fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_GroupTask set($fieldName, $value)
	 * @method \Bitrix\Main\EO_GroupTask reset($fieldName)
	 * @method \Bitrix\Main\EO_GroupTask unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_GroupTask wakeUp($data)
	 */
	class EO_GroupTask {
		/* @var \Bitrix\Main\GroupTaskTable */
		static public $dataClass = '\Bitrix\Main\GroupTaskTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_GroupTask_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getGroupIdList()
	 * @method \int[] getTaskIdList()
	 * @method \string[] getExternalIdList()
	 * @method \string[] fillExternalId()
	 * @method \Bitrix\Main\EO_Group[] getGroupList()
	 * @method \Bitrix\Main\EO_GroupTask_Collection getGroupCollection()
	 * @method \Bitrix\Main\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Main\EO_Task[] getTaskList()
	 * @method \Bitrix\Main\EO_GroupTask_Collection getTaskCollection()
	 * @method \Bitrix\Main\EO_Task_Collection fillTask()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_GroupTask $object)
	 * @method bool has(\Bitrix\Main\EO_GroupTask $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_GroupTask getByPrimary($primary)
	 * @method \Bitrix\Main\EO_GroupTask[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_GroupTask $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_GroupTask_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_GroupTask current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_GroupTask_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\GroupTaskTable */
		static public $dataClass = '\Bitrix\Main\GroupTaskTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_GroupTask_Query query()
	 * @method static EO_GroupTask_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_GroupTask_Result getById($id)
	 * @method static EO_GroupTask_Result getList(array $parameters = array())
	 * @method static EO_GroupTask_Entity getEntity()
	 * @method static \Bitrix\Main\EO_GroupTask createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_GroupTask_Collection createCollection()
	 * @method static \Bitrix\Main\EO_GroupTask wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_GroupTask_Collection wakeUpCollection($rows)
	 */
	class GroupTaskTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_GroupTask_Result exec()
	 * @method \Bitrix\Main\EO_GroupTask fetchObject()
	 * @method \Bitrix\Main\EO_GroupTask_Collection fetchCollection()
	 */
	class EO_GroupTask_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_GroupTask fetchObject()
	 * @method \Bitrix\Main\EO_GroupTask_Collection fetchCollection()
	 */
	class EO_GroupTask_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_GroupTask createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_GroupTask_Collection createCollection()
	 * @method \Bitrix\Main\EO_GroupTask wakeUpObject($row)
	 * @method \Bitrix\Main\EO_GroupTask_Collection wakeUpCollection($rows)
	 */
	class EO_GroupTask_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\EventLog\Internal\LogNotificationActionTable */
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * EO_LogNotificationAction
	 * @see \Bitrix\Main\EventLog\Internal\LogNotificationActionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getNotificationId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction setNotificationId(\int|\Bitrix\Main\DB\SqlExpression $notificationId)
	 * @method bool hasNotificationId()
	 * @method bool isNotificationIdFilled()
	 * @method bool isNotificationIdChanged()
	 * @method \int remindActualNotificationId()
	 * @method \int requireNotificationId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction resetNotificationId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction unsetNotificationId()
	 * @method \int fillNotificationId()
	 * @method \string getNotificationType()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction setNotificationType(\string|\Bitrix\Main\DB\SqlExpression $notificationType)
	 * @method bool hasNotificationType()
	 * @method bool isNotificationTypeFilled()
	 * @method bool isNotificationTypeChanged()
	 * @method \string remindActualNotificationType()
	 * @method \string requireNotificationType()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction resetNotificationType()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction unsetNotificationType()
	 * @method \string fillNotificationType()
	 * @method \string getRecipient()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction setRecipient(\string|\Bitrix\Main\DB\SqlExpression $recipient)
	 * @method bool hasRecipient()
	 * @method bool isRecipientFilled()
	 * @method bool isRecipientChanged()
	 * @method \string remindActualRecipient()
	 * @method \string requireRecipient()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction resetRecipient()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction unsetRecipient()
	 * @method \string fillRecipient()
	 * @method \string getAdditionalText()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction setAdditionalText(\string|\Bitrix\Main\DB\SqlExpression $additionalText)
	 * @method bool hasAdditionalText()
	 * @method bool isAdditionalTextFilled()
	 * @method bool isAdditionalTextChanged()
	 * @method \string remindActualAdditionalText()
	 * @method \string requireAdditionalText()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction resetAdditionalText()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction unsetAdditionalText()
	 * @method \string fillAdditionalText()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification getNotification()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification remindActualNotification()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification requireNotification()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction setNotification(\Bitrix\Main\EventLog\Internal\EO_LogNotification $object)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction resetNotification()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction unsetNotification()
	 * @method bool hasNotification()
	 * @method bool isNotificationFilled()
	 * @method bool isNotificationChanged()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification fillNotification()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction set($fieldName, $value)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction reset($fieldName)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction wakeUp($data)
	 */
	class EO_LogNotificationAction {
		/* @var \Bitrix\Main\EventLog\Internal\LogNotificationActionTable */
		static public $dataClass = '\Bitrix\Main\EventLog\Internal\LogNotificationActionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * EO_LogNotificationAction_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getNotificationIdList()
	 * @method \int[] fillNotificationId()
	 * @method \string[] getNotificationTypeList()
	 * @method \string[] fillNotificationType()
	 * @method \string[] getRecipientList()
	 * @method \string[] fillRecipient()
	 * @method \string[] getAdditionalTextList()
	 * @method \string[] fillAdditionalText()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification[] getNotificationList()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection getNotificationCollection()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification_Collection fillNotification()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EventLog\Internal\EO_LogNotificationAction $object)
	 * @method bool has(\Bitrix\Main\EventLog\Internal\EO_LogNotificationAction $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction getByPrimary($primary)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction[] getAll()
	 * @method bool remove(\Bitrix\Main\EventLog\Internal\EO_LogNotificationAction $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LogNotificationAction_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\EventLog\Internal\LogNotificationActionTable */
		static public $dataClass = '\Bitrix\Main\EventLog\Internal\LogNotificationActionTable';
	}
}
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * @method static EO_LogNotificationAction_Query query()
	 * @method static EO_LogNotificationAction_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LogNotificationAction_Result getById($id)
	 * @method static EO_LogNotificationAction_Result getList(array $parameters = array())
	 * @method static EO_LogNotificationAction_Entity getEntity()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection createCollection()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction wakeUpObject($row)
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection wakeUpCollection($rows)
	 */
	class LogNotificationActionTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_LogNotificationAction_Result exec()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction fetchObject()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection fetchCollection()
	 */
	class EO_LogNotificationAction_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction fetchObject()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection fetchCollection()
	 */
	class EO_LogNotificationAction_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection createCollection()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction wakeUpObject($row)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection wakeUpCollection($rows)
	 */
	class EO_LogNotificationAction_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\EventLog\Internal\EventLogTable */
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * EO_EventLog
	 * @see \Bitrix\Main\EventLog\Internal\EventLogTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetTimestampX()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getSeverity()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setSeverity(\string|\Bitrix\Main\DB\SqlExpression $severity)
	 * @method bool hasSeverity()
	 * @method bool isSeverityFilled()
	 * @method bool isSeverityChanged()
	 * @method \string remindActualSeverity()
	 * @method \string requireSeverity()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetSeverity()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetSeverity()
	 * @method \string fillSeverity()
	 * @method \string getAuditTypeId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setAuditTypeId(\string|\Bitrix\Main\DB\SqlExpression $auditTypeId)
	 * @method bool hasAuditTypeId()
	 * @method bool isAuditTypeIdFilled()
	 * @method bool isAuditTypeIdChanged()
	 * @method \string remindActualAuditTypeId()
	 * @method \string requireAuditTypeId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetAuditTypeId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetAuditTypeId()
	 * @method \string fillAuditTypeId()
	 * @method \string getModuleId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetModuleId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getItemId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setItemId(\string|\Bitrix\Main\DB\SqlExpression $itemId)
	 * @method bool hasItemId()
	 * @method bool isItemIdFilled()
	 * @method bool isItemIdChanged()
	 * @method \string remindActualItemId()
	 * @method \string requireItemId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetItemId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetItemId()
	 * @method \string fillItemId()
	 * @method \string getRemoteAddr()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setRemoteAddr(\string|\Bitrix\Main\DB\SqlExpression $remoteAddr)
	 * @method bool hasRemoteAddr()
	 * @method bool isRemoteAddrFilled()
	 * @method bool isRemoteAddrChanged()
	 * @method \string remindActualRemoteAddr()
	 * @method \string requireRemoteAddr()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetRemoteAddr()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetRemoteAddr()
	 * @method \string fillRemoteAddr()
	 * @method \string getUserAgent()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setUserAgent(\string|\Bitrix\Main\DB\SqlExpression $userAgent)
	 * @method bool hasUserAgent()
	 * @method bool isUserAgentFilled()
	 * @method bool isUserAgentChanged()
	 * @method \string remindActualUserAgent()
	 * @method \string requireUserAgent()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetUserAgent()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetUserAgent()
	 * @method \string fillUserAgent()
	 * @method \string getRequestUri()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setRequestUri(\string|\Bitrix\Main\DB\SqlExpression $requestUri)
	 * @method bool hasRequestUri()
	 * @method bool isRequestUriFilled()
	 * @method bool isRequestUriChanged()
	 * @method \string remindActualRequestUri()
	 * @method \string requireRequestUri()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetRequestUri()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetRequestUri()
	 * @method \string fillRequestUri()
	 * @method \string getSiteId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \string remindActualSiteId()
	 * @method \string requireSiteId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetSiteId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetSiteId()
	 * @method \string fillSiteId()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetUserId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetUserId()
	 * @method \int fillUserId()
	 * @method \int getGuestId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setGuestId(\int|\Bitrix\Main\DB\SqlExpression $guestId)
	 * @method bool hasGuestId()
	 * @method bool isGuestIdFilled()
	 * @method bool isGuestIdChanged()
	 * @method \int remindActualGuestId()
	 * @method \int requireGuestId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetGuestId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetGuestId()
	 * @method \int fillGuestId()
	 * @method \string getDescription()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog resetDescription()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unsetDescription()
	 * @method \string fillDescription()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog set($fieldName, $value)
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog reset($fieldName)
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_EventLog wakeUp($data)
	 */
	class EO_EventLog {
		/* @var \Bitrix\Main\EventLog\Internal\EventLogTable */
		static public $dataClass = '\Bitrix\Main\EventLog\Internal\EventLogTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * EO_EventLog_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getSeverityList()
	 * @method \string[] fillSeverity()
	 * @method \string[] getAuditTypeIdList()
	 * @method \string[] fillAuditTypeId()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getItemIdList()
	 * @method \string[] fillItemId()
	 * @method \string[] getRemoteAddrList()
	 * @method \string[] fillRemoteAddr()
	 * @method \string[] getUserAgentList()
	 * @method \string[] fillUserAgent()
	 * @method \string[] getRequestUriList()
	 * @method \string[] fillRequestUri()
	 * @method \string[] getSiteIdList()
	 * @method \string[] fillSiteId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \int[] getGuestIdList()
	 * @method \int[] fillGuestId()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EventLog\Internal\EO_EventLog $object)
	 * @method bool has(\Bitrix\Main\EventLog\Internal\EO_EventLog $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog getByPrimary($primary)
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog[] getAll()
	 * @method bool remove(\Bitrix\Main\EventLog\Internal\EO_EventLog $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EventLog\Internal\EO_EventLog_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EventLog_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\EventLog\Internal\EventLogTable */
		static public $dataClass = '\Bitrix\Main\EventLog\Internal\EventLogTable';
	}
}
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * @method static EO_EventLog_Query query()
	 * @method static EO_EventLog_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EventLog_Result getById($id)
	 * @method static EO_EventLog_Result getList(array $parameters = array())
	 * @method static EO_EventLog_Entity getEntity()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_EventLog createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EventLog\Internal\EO_EventLog_Collection createCollection()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_EventLog wakeUpObject($row)
	 * @method static \Bitrix\Main\EventLog\Internal\EO_EventLog_Collection wakeUpCollection($rows)
	 */
	class EventLogTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_EventLog_Result exec()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog fetchObject()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog_Collection fetchCollection()
	 */
	class EO_EventLog_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog fetchObject()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog_Collection fetchCollection()
	 */
	class EO_EventLog_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog_Collection createCollection()
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog wakeUpObject($row)
	 * @method \Bitrix\Main\EventLog\Internal\EO_EventLog_Collection wakeUpCollection($rows)
	 */
	class EO_EventLog_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\EventLog\Internal\LogNotificationTable */
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * EO_LogNotification
	 * @see \Bitrix\Main\EventLog\Internal\LogNotificationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \boolean getActive()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetActive()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getName()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetName()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetName()
	 * @method \string fillName()
	 * @method \string getAuditTypeId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setAuditTypeId(\string|\Bitrix\Main\DB\SqlExpression $auditTypeId)
	 * @method bool hasAuditTypeId()
	 * @method bool isAuditTypeIdFilled()
	 * @method bool isAuditTypeIdChanged()
	 * @method \string remindActualAuditTypeId()
	 * @method \string requireAuditTypeId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetAuditTypeId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetAuditTypeId()
	 * @method \string fillAuditTypeId()
	 * @method \string getItemId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setItemId(\string|\Bitrix\Main\DB\SqlExpression $itemId)
	 * @method bool hasItemId()
	 * @method bool isItemIdFilled()
	 * @method bool isItemIdChanged()
	 * @method \string remindActualItemId()
	 * @method \string requireItemId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetItemId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetItemId()
	 * @method \string fillItemId()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetUserId()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetUserId()
	 * @method \int fillUserId()
	 * @method \string getRemoteAddr()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setRemoteAddr(\string|\Bitrix\Main\DB\SqlExpression $remoteAddr)
	 * @method bool hasRemoteAddr()
	 * @method bool isRemoteAddrFilled()
	 * @method bool isRemoteAddrChanged()
	 * @method \string remindActualRemoteAddr()
	 * @method \string requireRemoteAddr()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetRemoteAddr()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetRemoteAddr()
	 * @method \string fillRemoteAddr()
	 * @method \string getUserAgent()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setUserAgent(\string|\Bitrix\Main\DB\SqlExpression $userAgent)
	 * @method bool hasUserAgent()
	 * @method bool isUserAgentFilled()
	 * @method bool isUserAgentChanged()
	 * @method \string remindActualUserAgent()
	 * @method \string requireUserAgent()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetUserAgent()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetUserAgent()
	 * @method \string fillUserAgent()
	 * @method \string getRequestUri()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setRequestUri(\string|\Bitrix\Main\DB\SqlExpression $requestUri)
	 * @method bool hasRequestUri()
	 * @method bool isRequestUriFilled()
	 * @method bool isRequestUriChanged()
	 * @method \string remindActualRequestUri()
	 * @method \string requireRequestUri()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetRequestUri()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetRequestUri()
	 * @method \string fillRequestUri()
	 * @method \int getCheckInterval()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setCheckInterval(\int|\Bitrix\Main\DB\SqlExpression $checkInterval)
	 * @method bool hasCheckInterval()
	 * @method bool isCheckIntervalFilled()
	 * @method bool isCheckIntervalChanged()
	 * @method \int remindActualCheckInterval()
	 * @method \int requireCheckInterval()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetCheckInterval()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetCheckInterval()
	 * @method \int fillCheckInterval()
	 * @method \int getAlertCount()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setAlertCount(\int|\Bitrix\Main\DB\SqlExpression $alertCount)
	 * @method bool hasAlertCount()
	 * @method bool isAlertCountFilled()
	 * @method bool isAlertCountChanged()
	 * @method \int remindActualAlertCount()
	 * @method \int requireAlertCount()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetAlertCount()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetAlertCount()
	 * @method \int fillAlertCount()
	 * @method \Bitrix\Main\Type\DateTime getDateChecked()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification setDateChecked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateChecked)
	 * @method bool hasDateChecked()
	 * @method bool isDateCheckedFilled()
	 * @method bool isDateCheckedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateChecked()
	 * @method \Bitrix\Main\Type\DateTime requireDateChecked()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetDateChecked()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetDateChecked()
	 * @method \Bitrix\Main\Type\DateTime fillDateChecked()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection getActions()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection requireActions()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection fillActions()
	 * @method bool hasActions()
	 * @method bool isActionsFilled()
	 * @method bool isActionsChanged()
	 * @method void addToActions(\Bitrix\Main\EventLog\Internal\EO_LogNotificationAction $logNotificationAction)
	 * @method void removeFromActions(\Bitrix\Main\EventLog\Internal\EO_LogNotificationAction $logNotificationAction)
	 * @method void removeAllActions()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification resetActions()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unsetActions()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification set($fieldName, $value)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification reset($fieldName)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotification wakeUp($data)
	 */
	class EO_LogNotification {
		/* @var \Bitrix\Main\EventLog\Internal\LogNotificationTable */
		static public $dataClass = '\Bitrix\Main\EventLog\Internal\LogNotificationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * EO_LogNotification_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getAuditTypeIdList()
	 * @method \string[] fillAuditTypeId()
	 * @method \string[] getItemIdList()
	 * @method \string[] fillItemId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \string[] getRemoteAddrList()
	 * @method \string[] fillRemoteAddr()
	 * @method \string[] getUserAgentList()
	 * @method \string[] fillUserAgent()
	 * @method \string[] getRequestUriList()
	 * @method \string[] fillRequestUri()
	 * @method \int[] getCheckIntervalList()
	 * @method \int[] fillCheckInterval()
	 * @method \int[] getAlertCountList()
	 * @method \int[] fillAlertCount()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCheckedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateChecked()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection[] getActionsList()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection getActionsCollection()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotificationAction_Collection fillActions()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EventLog\Internal\EO_LogNotification $object)
	 * @method bool has(\Bitrix\Main\EventLog\Internal\EO_LogNotification $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification getByPrimary($primary)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification[] getAll()
	 * @method bool remove(\Bitrix\Main\EventLog\Internal\EO_LogNotification $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotification_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LogNotification_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\EventLog\Internal\LogNotificationTable */
		static public $dataClass = '\Bitrix\Main\EventLog\Internal\LogNotificationTable';
	}
}
namespace Bitrix\Main\EventLog\Internal {
	/**
	 * @method static EO_LogNotification_Query query()
	 * @method static EO_LogNotification_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LogNotification_Result getById($id)
	 * @method static EO_LogNotification_Result getList(array $parameters = array())
	 * @method static EO_LogNotification_Entity getEntity()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotification createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotification_Collection createCollection()
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotification wakeUpObject($row)
	 * @method static \Bitrix\Main\EventLog\Internal\EO_LogNotification_Collection wakeUpCollection($rows)
	 */
	class LogNotificationTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_LogNotification_Result exec()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification fetchObject()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification_Collection fetchCollection()
	 */
	class EO_LogNotification_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification fetchObject()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification_Collection fetchCollection()
	 */
	class EO_LogNotification_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification_Collection createCollection()
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification wakeUpObject($row)
	 * @method \Bitrix\Main\EventLog\Internal\EO_LogNotification_Collection wakeUpCollection($rows)
	 */
	class EO_LogNotification_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Order
	 * @see \Bitrix\Sale\Internals\OrderTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Order setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_Order setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_Order resetLid()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLid()
	 * @method \string fillLid()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order resetAccountNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \string getTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order setTrackingNumber(\string|\Bitrix\Main\DB\SqlExpression $trackingNumber)
	 * @method bool hasTrackingNumber()
	 * @method bool isTrackingNumberFilled()
	 * @method bool isTrackingNumberChanged()
	 * @method \string remindActualTrackingNumber()
	 * @method \string requireTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order resetTrackingNumber()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetTrackingNumber()
	 * @method \string fillTrackingNumber()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Order setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \int remindActualDeliveryId()
	 * @method \int requireDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDeliveryId()
	 * @method \int fillDeliveryId()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertShort()
	 * @method bool hasDateInsertShort()
	 * @method bool isDateInsertShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertFormat()
	 * @method bool hasDateInsertFormat()
	 * @method bool isDateInsertFormatFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdateShort()
	 * @method bool hasDateUpdateShort()
	 * @method bool isDateUpdateShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdateShort()
	 * @method \string getProductsQuant()
	 * @method \string remindActualProductsQuant()
	 * @method \string requireProductsQuant()
	 * @method bool hasProductsQuant()
	 * @method bool isProductsQuantFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetProductsQuant()
	 * @method \string fillProductsQuant()
	 * @method \string getPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Order setPersonTypeId(\string|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \string remindActualPersonTypeId()
	 * @method \string requirePersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPersonTypeId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPersonTypeId()
	 * @method \string fillPersonTypeId()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Sale\Internals\EO_Order setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetUser()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \boolean getPayed()
	 * @method \Bitrix\Sale\Internals\EO_Order setPayed(\boolean|\Bitrix\Main\DB\SqlExpression $payed)
	 * @method bool hasPayed()
	 * @method bool isPayedFilled()
	 * @method bool isPayedChanged()
	 * @method \boolean remindActualPayed()
	 * @method \boolean requirePayed()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPayed()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPayed()
	 * @method \boolean fillPayed()
	 * @method \boolean getIsSyncB24()
	 * @method \Bitrix\Sale\Internals\EO_Order setIsSyncB24(\boolean|\Bitrix\Main\DB\SqlExpression $isSyncB24)
	 * @method bool hasIsSyncB24()
	 * @method bool isIsSyncB24Filled()
	 * @method bool isIsSyncB24Changed()
	 * @method \boolean remindActualIsSyncB24()
	 * @method \boolean requireIsSyncB24()
	 * @method \Bitrix\Sale\Internals\EO_Order resetIsSyncB24()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetIsSyncB24()
	 * @method \boolean fillIsSyncB24()
	 * @method \Bitrix\Main\Type\DateTime getDatePayed()
	 * @method \Bitrix\Sale\Internals\EO_Order setDatePayed(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePayed)
	 * @method bool hasDatePayed()
	 * @method bool isDatePayedFilled()
	 * @method bool isDatePayedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePayed()
	 * @method \Bitrix\Main\Type\DateTime requireDatePayed()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDatePayed()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDatePayed()
	 * @method \Bitrix\Main\Type\DateTime fillDatePayed()
	 * @method \int getEmpPayedId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpPayedId(\int|\Bitrix\Main\DB\SqlExpression $empPayedId)
	 * @method bool hasEmpPayedId()
	 * @method bool isEmpPayedIdFilled()
	 * @method bool isEmpPayedIdChanged()
	 * @method \int remindActualEmpPayedId()
	 * @method \int requireEmpPayedId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpPayedId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpPayedId()
	 * @method \int fillEmpPayedId()
	 * @method \boolean getDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order setDeducted(\boolean|\Bitrix\Main\DB\SqlExpression $deducted)
	 * @method bool hasDeducted()
	 * @method bool isDeductedFilled()
	 * @method bool isDeductedChanged()
	 * @method \boolean remindActualDeducted()
	 * @method \boolean requireDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDeducted()
	 * @method \boolean fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime getDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateDeducted(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateDeducted)
	 * @method bool hasDateDeducted()
	 * @method bool isDateDeductedFilled()
	 * @method bool isDateDeductedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime requireDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime fillDateDeducted()
	 * @method \int getEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpDeductedId(\int|\Bitrix\Main\DB\SqlExpression $empDeductedId)
	 * @method bool hasEmpDeductedId()
	 * @method bool isEmpDeductedIdFilled()
	 * @method bool isEmpDeductedIdChanged()
	 * @method \int remindActualEmpDeductedId()
	 * @method \int requireEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpDeductedId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpDeductedId()
	 * @method \int fillEmpDeductedId()
	 * @method \string getReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order setReasonUndoDeducted(\string|\Bitrix\Main\DB\SqlExpression $reasonUndoDeducted)
	 * @method bool hasReasonUndoDeducted()
	 * @method bool isReasonUndoDeductedFilled()
	 * @method bool isReasonUndoDeductedChanged()
	 * @method \string remindActualReasonUndoDeducted()
	 * @method \string requireReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order resetReasonUndoDeducted()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetReasonUndoDeducted()
	 * @method \string fillReasonUndoDeducted()
	 * @method \string getStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang getStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang remindActualStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang requireStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order setStatus(\Bitrix\Sale\Internals\EO_StatusLang $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetStatus()
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang fillStatus()
	 * @method \Bitrix\Main\Type\DateTime getDateStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateStatus(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateStatus)
	 * @method bool hasDateStatus()
	 * @method bool isDateStatusFilled()
	 * @method bool isDateStatusChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStatus()
	 * @method \Bitrix\Main\Type\DateTime requireDateStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateStatus()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateStatus()
	 * @method \Bitrix\Main\Type\DateTime fillDateStatus()
	 * @method \Bitrix\Main\Type\DateTime getDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateStatusShort()
	 * @method bool hasDateStatusShort()
	 * @method bool isDateStatusShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateStatusShort()
	 * @method \int getEmpStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpStatusId(\int|\Bitrix\Main\DB\SqlExpression $empStatusId)
	 * @method bool hasEmpStatusId()
	 * @method bool isEmpStatusIdFilled()
	 * @method bool isEmpStatusIdChanged()
	 * @method \int remindActualEmpStatusId()
	 * @method \int requireEmpStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpStatusId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpStatusId()
	 * @method \int fillEmpStatusId()
	 * @method \Bitrix\Main\EO_User getEmpStatusBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpStatusBy()
	 * @method \Bitrix\Main\EO_User requireEmpStatusBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpStatusBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpStatusBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpStatusBy()
	 * @method bool hasEmpStatusBy()
	 * @method bool isEmpStatusByFilled()
	 * @method bool isEmpStatusByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpStatusBy()
	 * @method \boolean getMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order setMarked(\boolean|\Bitrix\Main\DB\SqlExpression $marked)
	 * @method bool hasMarked()
	 * @method bool isMarkedFilled()
	 * @method bool isMarkedChanged()
	 * @method \boolean remindActualMarked()
	 * @method \boolean requireMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order resetMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetMarked()
	 * @method \boolean fillMarked()
	 * @method \Bitrix\Main\Type\DateTime getDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateMarked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateMarked)
	 * @method bool hasDateMarked()
	 * @method bool isDateMarkedFilled()
	 * @method bool isDateMarkedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarked()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateMarked()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarked()
	 * @method \int getEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpMarkedId(\int|\Bitrix\Main\DB\SqlExpression $empMarkedId)
	 * @method bool hasEmpMarkedId()
	 * @method bool isEmpMarkedIdFilled()
	 * @method bool isEmpMarkedIdChanged()
	 * @method \int remindActualEmpMarkedId()
	 * @method \int requireEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpMarkedId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpMarkedId()
	 * @method \int fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User getEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User requireEmpMarkedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpMarkedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpMarkedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpMarkedBy()
	 * @method bool hasEmpMarkedBy()
	 * @method bool isEmpMarkedByFilled()
	 * @method bool isEmpMarkedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpMarkedBy()
	 * @method \string getReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order setReasonMarked(\string|\Bitrix\Main\DB\SqlExpression $reasonMarked)
	 * @method bool hasReasonMarked()
	 * @method bool isReasonMarkedFilled()
	 * @method bool isReasonMarkedChanged()
	 * @method \string remindActualReasonMarked()
	 * @method \string requireReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order resetReasonMarked()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetReasonMarked()
	 * @method \string fillReasonMarked()
	 * @method \float getPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order setPriceDelivery(\float|\Bitrix\Main\DB\SqlExpression $priceDelivery)
	 * @method bool hasPriceDelivery()
	 * @method bool isPriceDeliveryFilled()
	 * @method bool isPriceDeliveryChanged()
	 * @method \float remindActualPriceDelivery()
	 * @method \float requirePriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPriceDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPriceDelivery()
	 * @method \float fillPriceDelivery()
	 * @method \boolean getAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order setAllowDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $allowDelivery)
	 * @method bool hasAllowDelivery()
	 * @method bool isAllowDeliveryFilled()
	 * @method bool isAllowDeliveryChanged()
	 * @method \boolean remindActualAllowDelivery()
	 * @method \boolean requireAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order resetAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetAllowDelivery()
	 * @method \boolean fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime getDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateAllowDelivery(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateAllowDelivery)
	 * @method bool hasDateAllowDelivery()
	 * @method bool isDateAllowDeliveryFilled()
	 * @method bool isDateAllowDeliveryChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime requireDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateAllowDelivery()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime fillDateAllowDelivery()
	 * @method \int getEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpAllowDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $empAllowDeliveryId)
	 * @method bool hasEmpAllowDeliveryId()
	 * @method bool isEmpAllowDeliveryIdFilled()
	 * @method bool isEmpAllowDeliveryIdChanged()
	 * @method \int remindActualEmpAllowDeliveryId()
	 * @method \int requireEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpAllowDeliveryId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpAllowDeliveryId()
	 * @method \int fillEmpAllowDeliveryId()
	 * @method \boolean getReserved()
	 * @method \Bitrix\Sale\Internals\EO_Order setReserved(\boolean|\Bitrix\Main\DB\SqlExpression $reserved)
	 * @method bool hasReserved()
	 * @method bool isReservedFilled()
	 * @method bool isReservedChanged()
	 * @method \boolean remindActualReserved()
	 * @method \boolean requireReserved()
	 * @method \Bitrix\Sale\Internals\EO_Order resetReserved()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetReserved()
	 * @method \boolean fillReserved()
	 * @method \float getPrice()
	 * @method \Bitrix\Sale\Internals\EO_Order setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPrice()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPrice()
	 * @method \float fillPrice()
	 * @method \string getCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Order setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Order resetCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Order setDiscountValue(\float|\Bitrix\Main\DB\SqlExpression $discountValue)
	 * @method bool hasDiscountValue()
	 * @method bool isDiscountValueFilled()
	 * @method bool isDiscountValueChanged()
	 * @method \float remindActualDiscountValue()
	 * @method \float requireDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDiscountValue()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDiscountValue()
	 * @method \float fillDiscountValue()
	 * @method \string getDiscountAll()
	 * @method \string remindActualDiscountAll()
	 * @method \string requireDiscountAll()
	 * @method bool hasDiscountAll()
	 * @method bool isDiscountAllFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDiscountAll()
	 * @method \string fillDiscountAll()
	 * @method \float getTaxValue()
	 * @method \Bitrix\Sale\Internals\EO_Order setTaxValue(\float|\Bitrix\Main\DB\SqlExpression $taxValue)
	 * @method bool hasTaxValue()
	 * @method bool isTaxValueFilled()
	 * @method bool isTaxValueChanged()
	 * @method \float remindActualTaxValue()
	 * @method \float requireTaxValue()
	 * @method \Bitrix\Sale\Internals\EO_Order resetTaxValue()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetTaxValue()
	 * @method \float fillTaxValue()
	 * @method \float getSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_Order setSumPaid(\float|\Bitrix\Main\DB\SqlExpression $sumPaid)
	 * @method bool hasSumPaid()
	 * @method bool isSumPaidFilled()
	 * @method bool isSumPaidChanged()
	 * @method \float remindActualSumPaid()
	 * @method \float requireSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_Order resetSumPaid()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetSumPaid()
	 * @method \float fillSumPaid()
	 * @method \string getSumPaidForrep()
	 * @method \string remindActualSumPaidForrep()
	 * @method \string requireSumPaidForrep()
	 * @method bool hasSumPaidForrep()
	 * @method bool isSumPaidForrepFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetSumPaidForrep()
	 * @method \string fillSumPaidForrep()
	 * @method \string getUserDescription()
	 * @method \Bitrix\Sale\Internals\EO_Order setUserDescription(\string|\Bitrix\Main\DB\SqlExpression $userDescription)
	 * @method bool hasUserDescription()
	 * @method bool isUserDescriptionFilled()
	 * @method bool isUserDescriptionChanged()
	 * @method \string remindActualUserDescription()
	 * @method \string requireUserDescription()
	 * @method \Bitrix\Sale\Internals\EO_Order resetUserDescription()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUserDescription()
	 * @method \string fillUserDescription()
	 * @method \string getPayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Order setPayVoucherNum(\string|\Bitrix\Main\DB\SqlExpression $payVoucherNum)
	 * @method bool hasPayVoucherNum()
	 * @method bool isPayVoucherNumFilled()
	 * @method bool isPayVoucherNumChanged()
	 * @method \string remindActualPayVoucherNum()
	 * @method \string requirePayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPayVoucherNum()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPayVoucherNum()
	 * @method \string fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date getPayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Order setPayVoucherDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payVoucherDate)
	 * @method bool hasPayVoucherDate()
	 * @method bool isPayVoucherDateFilled()
	 * @method bool isPayVoucherDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date requirePayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Order resetPayVoucherDate()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date fillPayVoucherDate()
	 * @method \string getAdditionalInfo()
	 * @method \Bitrix\Sale\Internals\EO_Order setAdditionalInfo(\string|\Bitrix\Main\DB\SqlExpression $additionalInfo)
	 * @method bool hasAdditionalInfo()
	 * @method bool isAdditionalInfoFilled()
	 * @method bool isAdditionalInfoChanged()
	 * @method \string remindActualAdditionalInfo()
	 * @method \string requireAdditionalInfo()
	 * @method \Bitrix\Sale\Internals\EO_Order resetAdditionalInfo()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetAdditionalInfo()
	 * @method \string fillAdditionalInfo()
	 * @method \string getComments()
	 * @method \Bitrix\Sale\Internals\EO_Order setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Sale\Internals\EO_Order resetComments()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetComments()
	 * @method \string fillComments()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Order setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order resetCreatedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \Bitrix\Main\EO_User getCreatedUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedUser()
	 * @method \Bitrix\Main\EO_User requireCreatedUser()
	 * @method \Bitrix\Sale\Internals\EO_Order setCreatedUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetCreatedUser()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCreatedUser()
	 * @method bool hasCreatedUser()
	 * @method bool isCreatedUserFilled()
	 * @method bool isCreatedUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedUser()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Order setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetResponsibleId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetResponsibleBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetResponsibleBy()
	 * @method bool hasResponsibleBy()
	 * @method bool isResponsibleByFilled()
	 * @method bool isResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillResponsibleBy()
	 * @method \string getStatGid()
	 * @method \Bitrix\Sale\Internals\EO_Order setStatGid(\string|\Bitrix\Main\DB\SqlExpression $statGid)
	 * @method bool hasStatGid()
	 * @method bool isStatGidFilled()
	 * @method bool isStatGidChanged()
	 * @method \string remindActualStatGid()
	 * @method \string requireStatGid()
	 * @method \Bitrix\Sale\Internals\EO_Order resetStatGid()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetStatGid()
	 * @method \string fillStatGid()
	 * @method \Bitrix\Main\Type\Date getDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Order setDatePayBefore(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $datePayBefore)
	 * @method bool hasDatePayBefore()
	 * @method bool isDatePayBeforeFilled()
	 * @method bool isDatePayBeforeChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDatePayBefore()
	 * @method \Bitrix\Main\Type\Date requireDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDatePayBefore()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDatePayBefore()
	 * @method \Bitrix\Main\Type\Date fillDatePayBefore()
	 * @method \Bitrix\Main\Type\Date getDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateBill(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateBill)
	 * @method bool hasDateBill()
	 * @method bool isDateBillFilled()
	 * @method bool isDateBillChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateBill()
	 * @method \Bitrix\Main\Type\Date requireDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateBill()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateBill()
	 * @method \Bitrix\Main\Type\Date fillDateBill()
	 * @method \boolean getIsRecurring()
	 * @method \Bitrix\Sale\Internals\EO_Order setIsRecurring(\boolean|\Bitrix\Main\DB\SqlExpression $isRecurring)
	 * @method bool hasIsRecurring()
	 * @method bool isIsRecurringFilled()
	 * @method bool isIsRecurringChanged()
	 * @method \boolean remindActualIsRecurring()
	 * @method \boolean requireIsRecurring()
	 * @method \Bitrix\Sale\Internals\EO_Order resetIsRecurring()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetIsRecurring()
	 * @method \boolean fillIsRecurring()
	 * @method \int getRecurringId()
	 * @method \Bitrix\Sale\Internals\EO_Order setRecurringId(\int|\Bitrix\Main\DB\SqlExpression $recurringId)
	 * @method bool hasRecurringId()
	 * @method bool isRecurringIdFilled()
	 * @method bool isRecurringIdChanged()
	 * @method \int remindActualRecurringId()
	 * @method \int requireRecurringId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetRecurringId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetRecurringId()
	 * @method \int fillRecurringId()
	 * @method \int getLockedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setLockedBy(\int|\Bitrix\Main\DB\SqlExpression $lockedBy)
	 * @method bool hasLockedBy()
	 * @method bool isLockedByFilled()
	 * @method bool isLockedByChanged()
	 * @method \int remindActualLockedBy()
	 * @method \int requireLockedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order resetLockedBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLockedBy()
	 * @method \int fillLockedBy()
	 * @method \Bitrix\Main\EO_User getLockUser()
	 * @method \Bitrix\Main\EO_User remindActualLockUser()
	 * @method \Bitrix\Main\EO_User requireLockUser()
	 * @method \Bitrix\Sale\Internals\EO_Order setLockUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetLockUser()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLockUser()
	 * @method bool hasLockUser()
	 * @method bool isLockUserFilled()
	 * @method bool isLockUserChanged()
	 * @method \Bitrix\Main\EO_User fillLockUser()
	 * @method \Bitrix\Main\Type\DateTime getDateLock()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateLock(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateLock)
	 * @method bool hasDateLock()
	 * @method bool isDateLockFilled()
	 * @method bool isDateLockChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateLock()
	 * @method \Bitrix\Main\Type\DateTime requireDateLock()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateLock()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateLock()
	 * @method \Bitrix\Main\Type\DateTime fillDateLock()
	 * @method \string getLockUserName()
	 * @method \string remindActualLockUserName()
	 * @method \string requireLockUserName()
	 * @method bool hasLockUserName()
	 * @method bool isLockUserNameFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLockUserName()
	 * @method \string fillLockUserName()
	 * @method \string getLockStatus()
	 * @method \string remindActualLockStatus()
	 * @method \string requireLockStatus()
	 * @method bool hasLockStatus()
	 * @method bool isLockStatusFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetLockStatus()
	 * @method \string fillLockStatus()
	 * @method \Bitrix\Main\EO_UserGroup getUserGroup()
	 * @method \Bitrix\Main\EO_UserGroup remindActualUserGroup()
	 * @method \Bitrix\Main\EO_UserGroup requireUserGroup()
	 * @method \Bitrix\Sale\Internals\EO_Order setUserGroup(\Bitrix\Main\EO_UserGroup $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetUserGroup()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUserGroup()
	 * @method bool hasUserGroup()
	 * @method bool isUserGroupFilled()
	 * @method bool isUserGroupChanged()
	 * @method \Bitrix\Main\EO_UserGroup fillUserGroup()
	 * @method \Bitrix\Main\EO_User getResponsible()
	 * @method \Bitrix\Main\EO_User remindActualResponsible()
	 * @method \Bitrix\Main\EO_User requireResponsible()
	 * @method \Bitrix\Sale\Internals\EO_Order setResponsible(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetResponsible()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetResponsible()
	 * @method bool hasResponsible()
	 * @method bool isResponsibleFilled()
	 * @method bool isResponsibleChanged()
	 * @method \Bitrix\Main\EO_User fillResponsible()
	 * @method \Bitrix\Sale\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Sale\Internals\EO_Order setBasket(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetBasket()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Sale\Internals\EO_Basket fillBasket()
	 * @method \string getBasketPriceTotal()
	 * @method \string remindActualBasketPriceTotal()
	 * @method \string requireBasketPriceTotal()
	 * @method bool hasBasketPriceTotal()
	 * @method bool isBasketPriceTotalFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetBasketPriceTotal()
	 * @method \string fillBasketPriceTotal()
	 * @method \Bitrix\Sale\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Sale\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Sale\Internals\EO_Order setPayment(\Bitrix\Sale\Internals\EO_Payment $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetPayment()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Payment fillPayment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment getShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment remindActualShipment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment requireShipment()
	 * @method \Bitrix\Sale\Internals\EO_Order setShipment(\Bitrix\Sale\Internals\EO_Shipment $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetShipment()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetShipment()
	 * @method bool hasShipment()
	 * @method bool isShipmentFilled()
	 * @method bool isShipmentChanged()
	 * @method \Bitrix\Sale\Internals\EO_Shipment fillShipment()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue getProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue remindActualProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue requireProperty()
	 * @method \Bitrix\Sale\Internals\EO_Order setProperty(\Bitrix\Sale\Internals\EO_OrderPropsValue $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetProperty()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetProperty()
	 * @method bool hasProperty()
	 * @method bool isPropertyFilled()
	 * @method bool isPropertyChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue fillProperty()
	 * @method \boolean getRecountFlag()
	 * @method \Bitrix\Sale\Internals\EO_Order setRecountFlag(\boolean|\Bitrix\Main\DB\SqlExpression $recountFlag)
	 * @method bool hasRecountFlag()
	 * @method bool isRecountFlagFilled()
	 * @method bool isRecountFlagChanged()
	 * @method \boolean remindActualRecountFlag()
	 * @method \boolean requireRecountFlag()
	 * @method \Bitrix\Sale\Internals\EO_Order resetRecountFlag()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetRecountFlag()
	 * @method \boolean fillRecountFlag()
	 * @method \int getAffiliateId()
	 * @method \Bitrix\Sale\Internals\EO_Order setAffiliateId(\int|\Bitrix\Main\DB\SqlExpression $affiliateId)
	 * @method bool hasAffiliateId()
	 * @method bool isAffiliateIdFilled()
	 * @method bool isAffiliateIdChanged()
	 * @method \int remindActualAffiliateId()
	 * @method \int requireAffiliateId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetAffiliateId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetAffiliateId()
	 * @method \int fillAffiliateId()
	 * @method \string getDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Order setDeliveryDocNum(\string|\Bitrix\Main\DB\SqlExpression $deliveryDocNum)
	 * @method bool hasDeliveryDocNum()
	 * @method bool isDeliveryDocNumFilled()
	 * @method bool isDeliveryDocNumChanged()
	 * @method \string remindActualDeliveryDocNum()
	 * @method \string requireDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDeliveryDocNum()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDeliveryDocNum()
	 * @method \string fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime getDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Order setDeliveryDocDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $deliveryDocDate)
	 * @method bool hasDeliveryDocDate()
	 * @method bool isDeliveryDocDateFilled()
	 * @method bool isDeliveryDocDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime requireDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDeliveryDocDate()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime fillDeliveryDocDate()
	 * @method \boolean getUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Order setUpdated1c(\boolean|\Bitrix\Main\DB\SqlExpression $updated1c)
	 * @method bool hasUpdated1c()
	 * @method bool isUpdated1cFilled()
	 * @method bool isUpdated1cChanged()
	 * @method \boolean remindActualUpdated1c()
	 * @method \boolean requireUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Order resetUpdated1c()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetUpdated1c()
	 * @method \boolean fillUpdated1c()
	 * @method \string getOrderTopic()
	 * @method \Bitrix\Sale\Internals\EO_Order setOrderTopic(\string|\Bitrix\Main\DB\SqlExpression $orderTopic)
	 * @method bool hasOrderTopic()
	 * @method bool isOrderTopicFilled()
	 * @method bool isOrderTopicChanged()
	 * @method \string remindActualOrderTopic()
	 * @method \string requireOrderTopic()
	 * @method \Bitrix\Sale\Internals\EO_Order resetOrderTopic()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetOrderTopic()
	 * @method \string fillOrderTopic()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Order setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getId1c()
	 * @method \Bitrix\Sale\Internals\EO_Order setId1c(\string|\Bitrix\Main\DB\SqlExpression $id1c)
	 * @method bool hasId1c()
	 * @method bool isId1cFilled()
	 * @method bool isId1cChanged()
	 * @method \string remindActualId1c()
	 * @method \string requireId1c()
	 * @method \Bitrix\Sale\Internals\EO_Order resetId1c()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetId1c()
	 * @method \string fillId1c()
	 * @method \string getVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Order setVersion1c(\string|\Bitrix\Main\DB\SqlExpression $version1c)
	 * @method bool hasVersion1c()
	 * @method bool isVersion1cFilled()
	 * @method bool isVersion1cChanged()
	 * @method \string remindActualVersion1c()
	 * @method \string requireVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Order resetVersion1c()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetVersion1c()
	 * @method \string fillVersion1c()
	 * @method \int getVersion()
	 * @method \Bitrix\Sale\Internals\EO_Order setVersion(\int|\Bitrix\Main\DB\SqlExpression $version)
	 * @method bool hasVersion()
	 * @method bool isVersionFilled()
	 * @method bool isVersionChanged()
	 * @method \int remindActualVersion()
	 * @method \int requireVersion()
	 * @method \Bitrix\Sale\Internals\EO_Order resetVersion()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetVersion()
	 * @method \int fillVersion()
	 * @method \boolean getExternalOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order setExternalOrder(\boolean|\Bitrix\Main\DB\SqlExpression $externalOrder)
	 * @method bool hasExternalOrder()
	 * @method bool isExternalOrderFilled()
	 * @method bool isExternalOrderChanged()
	 * @method \boolean remindActualExternalOrder()
	 * @method \boolean requireExternalOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order resetExternalOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetExternalOrder()
	 * @method \boolean fillExternalOrder()
	 * @method \int getStoreId()
	 * @method \Bitrix\Sale\Internals\EO_Order setStoreId(\int|\Bitrix\Main\DB\SqlExpression $storeId)
	 * @method bool hasStoreId()
	 * @method bool isStoreIdFilled()
	 * @method bool isStoreIdChanged()
	 * @method \int remindActualStoreId()
	 * @method \int requireStoreId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetStoreId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetStoreId()
	 * @method \int fillStoreId()
	 * @method \boolean getCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order setCanceled(\boolean|\Bitrix\Main\DB\SqlExpression $canceled)
	 * @method bool hasCanceled()
	 * @method bool isCanceledFilled()
	 * @method bool isCanceledChanged()
	 * @method \boolean remindActualCanceled()
	 * @method \boolean requireCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order resetCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetCanceled()
	 * @method \boolean fillCanceled()
	 * @method \int getEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpCanceledId(\int|\Bitrix\Main\DB\SqlExpression $empCanceledId)
	 * @method bool hasEmpCanceledId()
	 * @method bool isEmpCanceledIdFilled()
	 * @method bool isEmpCanceledIdChanged()
	 * @method \int remindActualEmpCanceledId()
	 * @method \int requireEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpCanceledId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpCanceledId()
	 * @method \int fillEmpCanceledId()
	 * @method \Bitrix\Main\EO_User getEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User requireEmpCanceledBy()
	 * @method \Bitrix\Sale\Internals\EO_Order setEmpCanceledBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetEmpCanceledBy()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetEmpCanceledBy()
	 * @method bool hasEmpCanceledBy()
	 * @method bool isEmpCanceledByFilled()
	 * @method bool isEmpCanceledByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpCanceledBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order setDateCanceled(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCanceled)
	 * @method bool hasDateCanceled()
	 * @method bool isDateCanceledFilled()
	 * @method bool isDateCanceledChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime requireDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order resetDateCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime fillDateCanceled()
	 * @method \string getDateCanceledShort()
	 * @method \string remindActualDateCanceledShort()
	 * @method \string requireDateCanceledShort()
	 * @method bool hasDateCanceledShort()
	 * @method bool isDateCanceledShortFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetDateCanceledShort()
	 * @method \string fillDateCanceledShort()
	 * @method \string getReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order setReasonCanceled(\string|\Bitrix\Main\DB\SqlExpression $reasonCanceled)
	 * @method bool hasReasonCanceled()
	 * @method bool isReasonCanceledFilled()
	 * @method bool isReasonCanceledChanged()
	 * @method \string remindActualReasonCanceled()
	 * @method \string requireReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order resetReasonCanceled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetReasonCanceled()
	 * @method \string fillReasonCanceled()
	 * @method \string getBxUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order setBxUserId(\string|\Bitrix\Main\DB\SqlExpression $bxUserId)
	 * @method bool hasBxUserId()
	 * @method bool isBxUserIdFilled()
	 * @method bool isBxUserIdChanged()
	 * @method \string remindActualBxUserId()
	 * @method \string requireBxUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order resetBxUserId()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetBxUserId()
	 * @method \string fillBxUserId()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Sale\Internals\EO_Order setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Sale\Internals\EO_Order resetSearchContent()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetSearchContent()
	 * @method \string fillSearchContent()
	 * @method \boolean getRunning()
	 * @method \Bitrix\Sale\Internals\EO_Order setRunning(\boolean|\Bitrix\Main\DB\SqlExpression $running)
	 * @method bool hasRunning()
	 * @method bool isRunningFilled()
	 * @method bool isRunningChanged()
	 * @method \boolean remindActualRunning()
	 * @method \boolean requireRunning()
	 * @method \Bitrix\Sale\Internals\EO_Order resetRunning()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetRunning()
	 * @method \boolean fillRunning()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons getOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons remindActualOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons requireOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_Order setOrderCoupons(\Bitrix\Sale\Internals\EO_OrderCoupons $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetOrderCoupons()
	 * @method bool hasOrderCoupons()
	 * @method bool isOrderCouponsFilled()
	 * @method bool isOrderCouponsChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons fillOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData getOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData remindActualOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData requireOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_Order setOrderDiscountData(\Bitrix\Sale\Internals\EO_OrderDiscountData $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetOrderDiscountData()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetOrderDiscountData()
	 * @method bool hasOrderDiscountData()
	 * @method bool isOrderDiscountDataFilled()
	 * @method bool isOrderDiscountDataChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData fillOrderDiscountData()
	 * @method \string getByRecommendation()
	 * @method \string remindActualByRecommendation()
	 * @method \string requireByRecommendation()
	 * @method bool hasByRecommendation()
	 * @method bool isByRecommendationFilled()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetByRecommendation()
	 * @method \string fillByRecommendation()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order getTradingPlatform()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order remindActualTradingPlatform()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order requireTradingPlatform()
	 * @method \Bitrix\Sale\Internals\EO_Order setTradingPlatform(\Bitrix\Sale\TradingPlatform\EO_Order $object)
	 * @method \Bitrix\Sale\Internals\EO_Order resetTradingPlatform()
	 * @method \Bitrix\Sale\Internals\EO_Order unsetTradingPlatform()
	 * @method bool hasTradingPlatform()
	 * @method bool isTradingPlatformFilled()
	 * @method bool isTradingPlatformChanged()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order fillTradingPlatform()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Order set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Order reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Order unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Order wakeUp($data)
	 */
	class EO_Order {
		/* @var \Bitrix\Sale\Internals\OrderTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Order_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \string[] getTrackingNumberList()
	 * @method \string[] fillTrackingNumber()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \int[] getDeliveryIdList()
	 * @method \int[] fillDeliveryId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertFormatList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdateShort()
	 * @method \string[] getProductsQuantList()
	 * @method \string[] fillProductsQuant()
	 * @method \string[] getPersonTypeIdList()
	 * @method \string[] fillPersonTypeId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \boolean[] getPayedList()
	 * @method \boolean[] fillPayed()
	 * @method \boolean[] getIsSyncB24List()
	 * @method \boolean[] fillIsSyncB24()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePayedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePayed()
	 * @method \int[] getEmpPayedIdList()
	 * @method \int[] fillEmpPayedId()
	 * @method \boolean[] getDeductedList()
	 * @method \boolean[] fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime[] getDateDeductedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateDeducted()
	 * @method \int[] getEmpDeductedIdList()
	 * @method \int[] fillEmpDeductedId()
	 * @method \string[] getReasonUndoDeductedList()
	 * @method \string[] fillReasonUndoDeducted()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang[] getStatusList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getStatusCollection()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection fillStatus()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStatusList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStatus()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStatusShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStatusShort()
	 * @method \int[] getEmpStatusIdList()
	 * @method \int[] fillEmpStatusId()
	 * @method \Bitrix\Main\EO_User[] getEmpStatusByList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getEmpStatusByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpStatusBy()
	 * @method \boolean[] getMarkedList()
	 * @method \boolean[] fillMarked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarked()
	 * @method \int[] getEmpMarkedIdList()
	 * @method \int[] fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User[] getEmpMarkedByList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getEmpMarkedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpMarkedBy()
	 * @method \string[] getReasonMarkedList()
	 * @method \string[] fillReasonMarked()
	 * @method \float[] getPriceDeliveryList()
	 * @method \float[] fillPriceDelivery()
	 * @method \boolean[] getAllowDeliveryList()
	 * @method \boolean[] fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime[] getDateAllowDeliveryList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateAllowDelivery()
	 * @method \int[] getEmpAllowDeliveryIdList()
	 * @method \int[] fillEmpAllowDeliveryId()
	 * @method \boolean[] getReservedList()
	 * @method \boolean[] fillReserved()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getDiscountValueList()
	 * @method \float[] fillDiscountValue()
	 * @method \string[] getDiscountAllList()
	 * @method \string[] fillDiscountAll()
	 * @method \float[] getTaxValueList()
	 * @method \float[] fillTaxValue()
	 * @method \float[] getSumPaidList()
	 * @method \float[] fillSumPaid()
	 * @method \string[] getSumPaidForrepList()
	 * @method \string[] fillSumPaidForrep()
	 * @method \string[] getUserDescriptionList()
	 * @method \string[] fillUserDescription()
	 * @method \string[] getPayVoucherNumList()
	 * @method \string[] fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date[] getPayVoucherDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayVoucherDate()
	 * @method \string[] getAdditionalInfoList()
	 * @method \string[] fillAdditionalInfo()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \Bitrix\Main\EO_User[] getCreatedUserList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getCreatedUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedUser()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getResponsibleByList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsibleBy()
	 * @method \string[] getStatGidList()
	 * @method \string[] fillStatGid()
	 * @method \Bitrix\Main\Type\Date[] getDatePayBeforeList()
	 * @method \Bitrix\Main\Type\Date[] fillDatePayBefore()
	 * @method \Bitrix\Main\Type\Date[] getDateBillList()
	 * @method \Bitrix\Main\Type\Date[] fillDateBill()
	 * @method \boolean[] getIsRecurringList()
	 * @method \boolean[] fillIsRecurring()
	 * @method \int[] getRecurringIdList()
	 * @method \int[] fillRecurringId()
	 * @method \int[] getLockedByList()
	 * @method \int[] fillLockedBy()
	 * @method \Bitrix\Main\EO_User[] getLockUserList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getLockUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillLockUser()
	 * @method \Bitrix\Main\Type\DateTime[] getDateLockList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateLock()
	 * @method \string[] getLockUserNameList()
	 * @method \string[] fillLockUserName()
	 * @method \string[] getLockStatusList()
	 * @method \string[] fillLockStatus()
	 * @method \Bitrix\Main\EO_UserGroup[] getUserGroupList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getUserGroupCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillUserGroup()
	 * @method \Bitrix\Main\EO_User[] getResponsibleList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getResponsibleCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsible()
	 * @method \Bitrix\Sale\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getBasketCollection()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fillBasket()
	 * @method \string[] getBasketPriceTotalList()
	 * @method \string[] fillBasketPriceTotal()
	 * @method \Bitrix\Sale\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getPaymentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Payment_Collection fillPayment()
	 * @method \Bitrix\Sale\Internals\EO_Shipment[] getShipmentList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getShipmentCollection()
	 * @method \Bitrix\Sale\Internals\EO_Shipment_Collection fillShipment()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue[] getPropertyList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getPropertyCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderPropsValue_Collection fillProperty()
	 * @method \boolean[] getRecountFlagList()
	 * @method \boolean[] fillRecountFlag()
	 * @method \int[] getAffiliateIdList()
	 * @method \int[] fillAffiliateId()
	 * @method \string[] getDeliveryDocNumList()
	 * @method \string[] fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime[] getDeliveryDocDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDeliveryDocDate()
	 * @method \boolean[] getUpdated1cList()
	 * @method \boolean[] fillUpdated1c()
	 * @method \string[] getOrderTopicList()
	 * @method \string[] fillOrderTopic()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getId1cList()
	 * @method \string[] fillId1c()
	 * @method \string[] getVersion1cList()
	 * @method \string[] fillVersion1c()
	 * @method \int[] getVersionList()
	 * @method \int[] fillVersion()
	 * @method \boolean[] getExternalOrderList()
	 * @method \boolean[] fillExternalOrder()
	 * @method \int[] getStoreIdList()
	 * @method \int[] fillStoreId()
	 * @method \boolean[] getCanceledList()
	 * @method \boolean[] fillCanceled()
	 * @method \int[] getEmpCanceledIdList()
	 * @method \int[] fillEmpCanceledId()
	 * @method \Bitrix\Main\EO_User[] getEmpCanceledByList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getEmpCanceledByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpCanceledBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCanceledList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCanceled()
	 * @method \string[] getDateCanceledShortList()
	 * @method \string[] fillDateCanceledShort()
	 * @method \string[] getReasonCanceledList()
	 * @method \string[] fillReasonCanceled()
	 * @method \string[] getBxUserIdList()
	 * @method \string[] fillBxUserId()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 * @method \boolean[] getRunningList()
	 * @method \boolean[] fillRunning()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons[] getOrderCouponsList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getOrderCouponsCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons_Collection fillOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData[] getOrderDiscountDataList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getOrderDiscountDataCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderDiscountData_Collection fillOrderDiscountData()
	 * @method \string[] getByRecommendationList()
	 * @method \string[] fillByRecommendation()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order[] getTradingPlatformList()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection getTradingPlatformCollection()
	 * @method \Bitrix\Sale\TradingPlatform\EO_Order_Collection fillTradingPlatform()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Order getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Order[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Order_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Order current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Order_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_Order_Query query()
	 * @method static EO_Order_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Order_Result getById($id)
	 * @method static EO_Order_Result getList(array $parameters = array())
	 * @method static EO_Order_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_Order createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_Order_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_Order wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_Order_Collection wakeUpCollection($rows)
	 */
	class OrderTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Order_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Order fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fetchCollection()
	 */
	class EO_Order_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Order fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fetchCollection()
	 */
	class EO_Order_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Order createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection wakeUpCollection($rows)
	 */
	class EO_Order_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\FuserTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Fuser
	 * @see \Bitrix\Sale\Internals\FuserTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetDateInsert()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateIns()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateIns()
	 * @method \Bitrix\Main\Type\DateTime requireDateIns()
	 * @method bool hasDateIns()
	 * @method bool isDateInsFilled()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetDateIns()
	 * @method \Bitrix\Main\Type\DateTime fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetDateUpdate()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpd()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpd()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpd()
	 * @method bool hasDateUpd()
	 * @method bool isDateUpdFilled()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetDateUpd()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpd()
	 * @method \int getUserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetUserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetUser()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_Fuser setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_Fuser resetCode()
	 * @method \Bitrix\Sale\Internals\EO_Fuser unsetCode()
	 * @method \string fillCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Fuser set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Fuser reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Fuser unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Fuser wakeUp($data)
	 */
	class EO_Fuser {
		/* @var \Bitrix\Sale\Internals\FuserTable */
		static public $dataClass = '\Bitrix\Sale\Internals\FuserTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Fuser_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpd()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Fuser $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Fuser $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Fuser getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Fuser[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Fuser $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Fuser_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Fuser current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Fuser_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\FuserTable */
		static public $dataClass = '\Bitrix\Sale\Internals\FuserTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_Fuser_Query query()
	 * @method static EO_Fuser_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Fuser_Result getById($id)
	 * @method static EO_Fuser_Result getList(array $parameters = array())
	 * @method static EO_Fuser_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_Fuser createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_Fuser_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_Fuser wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_Fuser_Collection wakeUpCollection($rows)
	 */
	class FuserTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Fuser_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Fuser fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection fetchCollection()
	 */
	class EO_Fuser_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Fuser fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection fetchCollection()
	 */
	class EO_Fuser_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Fuser createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Fuser wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection wakeUpCollection($rows)
	 */
	class EO_Fuser_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\Product2ProductTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Product2Product
	 * @see \Bitrix\Sale\Internals\Product2ProductTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product resetProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product unsetProductId()
	 * @method \int fillProductId()
	 * @method \int getParentProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product setParentProductId(\int|\Bitrix\Main\DB\SqlExpression $parentProductId)
	 * @method bool hasParentProductId()
	 * @method bool isParentProductIdFilled()
	 * @method bool isParentProductIdChanged()
	 * @method \int remindActualParentProductId()
	 * @method \int requireParentProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product resetParentProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product unsetParentProductId()
	 * @method \int fillParentProductId()
	 * @method \int getCnt()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product setCnt(\int|\Bitrix\Main\DB\SqlExpression $cnt)
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method bool isCntChanged()
	 * @method \int remindActualCnt()
	 * @method \int requireCnt()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product resetCnt()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product unsetCnt()
	 * @method \int fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Product2Product wakeUp($data)
	 */
	class EO_Product2Product {
		/* @var \Bitrix\Sale\Internals\Product2ProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\Product2ProductTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Product2Product_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \int[] getParentProductIdList()
	 * @method \int[] fillParentProductId()
	 * @method \int[] getCntList()
	 * @method \int[] fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Product2Product $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Product2Product $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Product2Product $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Product2Product_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Product2Product current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Product2Product_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\Product2ProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\Product2ProductTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_Product2Product_Query query()
	 * @method static EO_Product2Product_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Product2Product_Result getById($id)
	 * @method static EO_Product2Product_Result getList(array $parameters = array())
	 * @method static EO_Product2Product_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_Product2Product createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_Product2Product_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_Product2Product wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_Product2Product_Collection wakeUpCollection($rows)
	 */
	class Product2ProductTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Product2Product_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product_Collection fetchCollection()
	 */
	class EO_Product2Product_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Product2Product fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product_Collection fetchCollection()
	 */
	class EO_Product2Product_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Product2Product createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product2Product wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Product2Product_Collection wakeUpCollection($rows)
	 */
	class EO_Product2Product_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\StoreProductTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_StoreProduct
	 * @see \Bitrix\Sale\Internals\StoreProductTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getProductId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetProductId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetProductId()
	 * @method \int fillProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product getSaleProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product remindActualSaleProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product requireSaleProduct()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setSaleProduct(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetSaleProduct()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetSaleProduct()
	 * @method bool hasSaleProduct()
	 * @method bool isSaleProductFilled()
	 * @method bool isSaleProductChanged()
	 * @method \Bitrix\Sale\Internals\EO_Product fillSaleProduct()
	 * @method \float getAmount()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setAmount(\float|\Bitrix\Main\DB\SqlExpression $amount)
	 * @method bool hasAmount()
	 * @method bool isAmountFilled()
	 * @method bool isAmountChanged()
	 * @method \float remindActualAmount()
	 * @method \float requireAmount()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetAmount()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetAmount()
	 * @method \float fillAmount()
	 * @method \int getStoreId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setStoreId(\int|\Bitrix\Main\DB\SqlExpression $storeId)
	 * @method bool hasStoreId()
	 * @method bool isStoreIdFilled()
	 * @method bool isStoreIdChanged()
	 * @method \int remindActualStoreId()
	 * @method \int requireStoreId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetStoreId()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetStoreId()
	 * @method \int fillStoreId()
	 * @method \Bitrix\Catalog\EO_Store getStore()
	 * @method \Bitrix\Catalog\EO_Store remindActualStore()
	 * @method \Bitrix\Catalog\EO_Store requireStore()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct setStore(\Bitrix\Catalog\EO_Store $object)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct resetStore()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unsetStore()
	 * @method bool hasStore()
	 * @method bool isStoreFilled()
	 * @method bool isStoreChanged()
	 * @method \Bitrix\Catalog\EO_Store fillStore()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_StoreProduct wakeUp($data)
	 */
	class EO_StoreProduct {
		/* @var \Bitrix\Sale\Internals\StoreProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StoreProductTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_StoreProduct_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \Bitrix\Sale\Internals\EO_Product[] getSaleProductList()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection getSaleProductCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fillSaleProduct()
	 * @method \float[] getAmountList()
	 * @method \float[] fillAmount()
	 * @method \int[] getStoreIdList()
	 * @method \int[] fillStoreId()
	 * @method \Bitrix\Catalog\EO_Store[] getStoreList()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection getStoreCollection()
	 * @method \Bitrix\Catalog\EO_Store_Collection fillStore()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_StoreProduct $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_StoreProduct $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_StoreProduct $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_StoreProduct_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_StoreProduct_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\StoreProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\StoreProductTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_StoreProduct_Query query()
	 * @method static EO_StoreProduct_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_StoreProduct_Result getById($id)
	 * @method static EO_StoreProduct_Result getList(array $parameters = array())
	 * @method static EO_StoreProduct_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_StoreProduct createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_StoreProduct_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_StoreProduct wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_StoreProduct_Collection wakeUpCollection($rows)
	 */
	class StoreProductTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_StoreProduct_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection fetchCollection()
	 */
	class EO_StoreProduct_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection fetchCollection()
	 */
	class EO_StoreProduct_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_StoreProduct_Collection wakeUpCollection($rows)
	 */
	class EO_StoreProduct_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\PersonTypeTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PersonType
	 * @see \Bitrix\Sale\Internals\PersonTypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetLid()
	 * @method \string fillLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite getPersonTypeSite()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite remindActualPersonTypeSite()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite requirePersonTypeSite()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setPersonTypeSite(\Bitrix\Sale\Internals\EO_PersonTypeSite $object)
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetPersonTypeSite()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetPersonTypeSite()
	 * @method bool hasPersonTypeSite()
	 * @method bool isPersonTypeSiteFilled()
	 * @method bool isPersonTypeSiteChanged()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite fillPersonTypeSite()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetName()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetCode()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetCode()
	 * @method \string fillCode()
	 * @method \int getSort()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetSort()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getActive()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetActive()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetXmlId()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PersonType setEntityRegistryType(\string|\Bitrix\Main\DB\SqlExpression $entityRegistryType)
	 * @method bool hasEntityRegistryType()
	 * @method bool isEntityRegistryTypeFilled()
	 * @method bool isEntityRegistryTypeChanged()
	 * @method \string remindActualEntityRegistryType()
	 * @method \string requireEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PersonType resetEntityRegistryType()
	 * @method \Bitrix\Sale\Internals\EO_PersonType unsetEntityRegistryType()
	 * @method \string fillEntityRegistryType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PersonType set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_PersonType reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_PersonType unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_PersonType wakeUp($data)
	 */
	class EO_PersonType {
		/* @var \Bitrix\Sale\Internals\PersonTypeTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PersonTypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_PersonType_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite[] getPersonTypeSiteList()
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection getPersonTypeSiteCollection()
	 * @method \Bitrix\Sale\Internals\EO_PersonTypeSite_Collection fillPersonTypeSite()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getEntityRegistryTypeList()
	 * @method \string[] fillEntityRegistryType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_PersonType $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_PersonType $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PersonType getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_PersonType[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_PersonType $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_PersonType_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_PersonType current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_PersonType_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\PersonTypeTable */
		static public $dataClass = '\Bitrix\Sale\Internals\PersonTypeTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_PersonType_Query query()
	 * @method static EO_PersonType_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_PersonType_Result getById($id)
	 * @method static EO_PersonType_Result getList(array $parameters = array())
	 * @method static EO_PersonType_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_PersonType createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_PersonType_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_PersonType wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_PersonType_Collection wakeUpCollection($rows)
	 */
	class PersonTypeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_PersonType_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_PersonType fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection fetchCollection()
	 */
	class EO_PersonType_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PersonType fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection fetchCollection()
	 */
	class EO_PersonType_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_PersonType createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_PersonType wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_PersonType_Collection wakeUpCollection($rows)
	 */
	class EO_PersonType_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\ProductTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Product
	 * @see \Bitrix\Sale\Internals\ProductTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Product setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Product setTimestampX(\int|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \int remindActualTimestampX()
	 * @method \int requireTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Product resetTimestampX()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetTimestampX()
	 * @method \int fillTimestampX()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdated()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdated()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdated()
	 * @method bool hasDateUpdated()
	 * @method bool isDateUpdatedFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetDateUpdated()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdated()
	 * @method \float getQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Product setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Product resetQuantity()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \float getPurchasingPrice()
	 * @method \Bitrix\Sale\Internals\EO_Product setPurchasingPrice(\float|\Bitrix\Main\DB\SqlExpression $purchasingPrice)
	 * @method bool hasPurchasingPrice()
	 * @method bool isPurchasingPriceFilled()
	 * @method bool isPurchasingPriceChanged()
	 * @method \float remindActualPurchasingPrice()
	 * @method \float requirePurchasingPrice()
	 * @method \Bitrix\Sale\Internals\EO_Product resetPurchasingPrice()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingPrice()
	 * @method \float fillPurchasingPrice()
	 * @method \string getPurchasingCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Product setPurchasingCurrency(\string|\Bitrix\Main\DB\SqlExpression $purchasingCurrency)
	 * @method bool hasPurchasingCurrency()
	 * @method bool isPurchasingCurrencyFilled()
	 * @method bool isPurchasingCurrencyChanged()
	 * @method \string remindActualPurchasingCurrency()
	 * @method \string requirePurchasingCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Product resetPurchasingCurrency()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingCurrency()
	 * @method \string fillPurchasingCurrency()
	 * @method \Bitrix\Iblock\EO_Element getIblock()
	 * @method \Bitrix\Iblock\EO_Element remindActualIblock()
	 * @method \Bitrix\Iblock\EO_Element requireIblock()
	 * @method \Bitrix\Sale\Internals\EO_Product setIblock(\Bitrix\Iblock\EO_Element $object)
	 * @method \Bitrix\Sale\Internals\EO_Product resetIblock()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\EO_Element fillIblock()
	 * @method \string getName()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetName()
	 * @method \string fillName()
	 * @method \string getNameWithIdent()
	 * @method \string remindActualNameWithIdent()
	 * @method \string requireNameWithIdent()
	 * @method bool hasNameWithIdent()
	 * @method bool isNameWithIdentFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetNameWithIdent()
	 * @method \string fillNameWithIdent()
	 * @method \boolean getActive()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetActive()
	 * @method \boolean fillActive()
	 * @method \float getWeight()
	 * @method \Bitrix\Sale\Internals\EO_Product setWeight(\float|\Bitrix\Main\DB\SqlExpression $weight)
	 * @method bool hasWeight()
	 * @method bool isWeightFilled()
	 * @method bool isWeightChanged()
	 * @method \float remindActualWeight()
	 * @method \float requireWeight()
	 * @method \Bitrix\Sale\Internals\EO_Product resetWeight()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetWeight()
	 * @method \float fillWeight()
	 * @method \float getWeightInSiteUnits()
	 * @method \float remindActualWeightInSiteUnits()
	 * @method \float requireWeightInSiteUnits()
	 * @method bool hasWeightInSiteUnits()
	 * @method bool isWeightInSiteUnitsFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetWeightInSiteUnits()
	 * @method \float fillWeightInSiteUnits()
	 * @method \float getPrice()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPrice()
	 * @method \float fillPrice()
	 * @method \string getCurrency()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getSummaryPrice()
	 * @method \float remindActualSummaryPrice()
	 * @method \float requireSummaryPrice()
	 * @method bool hasSummaryPrice()
	 * @method bool isSummaryPriceFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetSummaryPrice()
	 * @method \float fillSummaryPrice()
	 * @method \float getCurrentCurrencyRate()
	 * @method \float remindActualCurrentCurrencyRate()
	 * @method \float requireCurrentCurrencyRate()
	 * @method bool hasCurrentCurrencyRate()
	 * @method bool isCurrentCurrencyRateFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrentCurrencyRate()
	 * @method \float fillCurrentCurrencyRate()
	 * @method \float getCurrentCurrencyRateCnt()
	 * @method \float remindActualCurrentCurrencyRateCnt()
	 * @method \float requireCurrentCurrencyRateCnt()
	 * @method bool hasCurrentCurrencyRateCnt()
	 * @method bool isCurrentCurrencyRateCntFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrentCurrencyRateCnt()
	 * @method \float fillCurrentCurrencyRateCnt()
	 * @method \float getCurrentSiteCurrencyRate()
	 * @method \float remindActualCurrentSiteCurrencyRate()
	 * @method \float requireCurrentSiteCurrencyRate()
	 * @method bool hasCurrentSiteCurrencyRate()
	 * @method bool isCurrentSiteCurrencyRateFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrentSiteCurrencyRate()
	 * @method \float fillCurrentSiteCurrencyRate()
	 * @method \float getCurrentSiteCurrencyRateCnt()
	 * @method \float remindActualCurrentSiteCurrencyRateCnt()
	 * @method \float requireCurrentSiteCurrencyRateCnt()
	 * @method bool hasCurrentSiteCurrencyRateCnt()
	 * @method bool isCurrentSiteCurrencyRateCntFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetCurrentSiteCurrencyRateCnt()
	 * @method \float fillCurrentSiteCurrencyRateCnt()
	 * @method \float getPurchasingCurrencyRate()
	 * @method \float remindActualPurchasingCurrencyRate()
	 * @method \float requirePurchasingCurrencyRate()
	 * @method bool hasPurchasingCurrencyRate()
	 * @method bool isPurchasingCurrencyRateFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingCurrencyRate()
	 * @method \float fillPurchasingCurrencyRate()
	 * @method \float getPurchasingCurrencyRateCnt()
	 * @method \float remindActualPurchasingCurrencyRateCnt()
	 * @method \float requirePurchasingCurrencyRateCnt()
	 * @method bool hasPurchasingCurrencyRateCnt()
	 * @method bool isPurchasingCurrencyRateCntFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingCurrencyRateCnt()
	 * @method \float fillPurchasingCurrencyRateCnt()
	 * @method \float getPriceInSiteCurrency()
	 * @method \float remindActualPriceInSiteCurrency()
	 * @method \float requirePriceInSiteCurrency()
	 * @method bool hasPriceInSiteCurrency()
	 * @method bool isPriceInSiteCurrencyFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPriceInSiteCurrency()
	 * @method \float fillPriceInSiteCurrency()
	 * @method \float getPurchasingPriceInSiteCurrency()
	 * @method \float remindActualPurchasingPriceInSiteCurrency()
	 * @method \float requirePurchasingPriceInSiteCurrency()
	 * @method bool hasPurchasingPriceInSiteCurrency()
	 * @method bool isPurchasingPriceInSiteCurrencyFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetPurchasingPriceInSiteCurrency()
	 * @method \float fillPurchasingPriceInSiteCurrency()
	 * @method \float getSummaryPriceInSiteCurrency()
	 * @method \float remindActualSummaryPriceInSiteCurrency()
	 * @method \float requireSummaryPriceInSiteCurrency()
	 * @method bool hasSummaryPriceInSiteCurrency()
	 * @method bool isSummaryPriceInSiteCurrencyFilled()
	 * @method \Bitrix\Sale\Internals\EO_Product unsetSummaryPriceInSiteCurrency()
	 * @method \float fillSummaryPriceInSiteCurrency()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Product set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Product reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Product unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Product wakeUp($data)
	 */
	class EO_Product {
		/* @var \Bitrix\Sale\Internals\ProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ProductTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Product_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTimestampXList()
	 * @method \int[] fillTimestampX()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdated()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \float[] getPurchasingPriceList()
	 * @method \float[] fillPurchasingPrice()
	 * @method \string[] getPurchasingCurrencyList()
	 * @method \string[] fillPurchasingCurrency()
	 * @method \Bitrix\Iblock\EO_Element[] getIblockList()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Element_Collection fillIblock()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getNameWithIdentList()
	 * @method \string[] fillNameWithIdent()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \float[] getWeightList()
	 * @method \float[] fillWeight()
	 * @method \float[] getWeightInSiteUnitsList()
	 * @method \float[] fillWeightInSiteUnits()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getSummaryPriceList()
	 * @method \float[] fillSummaryPrice()
	 * @method \float[] getCurrentCurrencyRateList()
	 * @method \float[] fillCurrentCurrencyRate()
	 * @method \float[] getCurrentCurrencyRateCntList()
	 * @method \float[] fillCurrentCurrencyRateCnt()
	 * @method \float[] getCurrentSiteCurrencyRateList()
	 * @method \float[] fillCurrentSiteCurrencyRate()
	 * @method \float[] getCurrentSiteCurrencyRateCntList()
	 * @method \float[] fillCurrentSiteCurrencyRateCnt()
	 * @method \float[] getPurchasingCurrencyRateList()
	 * @method \float[] fillPurchasingCurrencyRate()
	 * @method \float[] getPurchasingCurrencyRateCntList()
	 * @method \float[] fillPurchasingCurrencyRateCnt()
	 * @method \float[] getPriceInSiteCurrencyList()
	 * @method \float[] fillPriceInSiteCurrency()
	 * @method \float[] getPurchasingPriceInSiteCurrencyList()
	 * @method \float[] fillPurchasingPriceInSiteCurrency()
	 * @method \float[] getSummaryPriceInSiteCurrencyList()
	 * @method \float[] fillSummaryPriceInSiteCurrency()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Product getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Product[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Product_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Product current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Product_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\ProductTable */
		static public $dataClass = '\Bitrix\Sale\Internals\ProductTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_Product_Query query()
	 * @method static EO_Product_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Product_Result getById($id)
	 * @method static EO_Product_Result getList(array $parameters = array())
	 * @method static EO_Product_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_Product createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_Product_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_Product wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_Product_Collection wakeUpCollection($rows)
	 */
	class ProductTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Product_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Product fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fetchCollection()
	 */
	class EO_Product_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Product fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fetchCollection()
	 */
	class EO_Product_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Product createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection wakeUpCollection($rows)
	 */
	class EO_Product_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\SectionTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Section
	 * @see \Bitrix\Sale\Internals\SectionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Sale\Internals\EO_Section setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Sale\Internals\EO_Section setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Sale\Internals\EO_Section resetName()
	 * @method \Bitrix\Sale\Internals\EO_Section unsetName()
	 * @method \string fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Section set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_Section reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_Section unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_Section wakeUp($data)
	 */
	class EO_Section {
		/* @var \Bitrix\Sale\Internals\SectionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\SectionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_Section_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_Section $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_Section $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Section getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_Section[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_Section $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_Section_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_Section current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Section_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\SectionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\SectionTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_Section_Query query()
	 * @method static EO_Section_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Section_Result getById($id)
	 * @method static EO_Section_Result getList(array $parameters = array())
	 * @method static EO_Section_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_Section createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_Section_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_Section wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_Section_Collection wakeUpCollection($rows)
	 */
	class SectionTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Section_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_Section fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection fetchCollection()
	 */
	class EO_Section_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Section fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection fetchCollection()
	 */
	class EO_Section_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_Section createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_Section wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection wakeUpCollection($rows)
	 */
	class EO_Section_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\OrderProcessingTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderProcessing
	 * @see \Bitrix\Sale\Internals\OrderProcessingTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOrderId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \boolean getProductsAdded()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing setProductsAdded(\boolean|\Bitrix\Main\DB\SqlExpression $productsAdded)
	 * @method bool hasProductsAdded()
	 * @method bool isProductsAddedFilled()
	 * @method bool isProductsAddedChanged()
	 * @method \boolean remindActualProductsAdded()
	 * @method \boolean requireProductsAdded()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing resetProductsAdded()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing unsetProductsAdded()
	 * @method \boolean fillProductsAdded()
	 * @method \boolean getProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing setProductsRemoved(\boolean|\Bitrix\Main\DB\SqlExpression $productsRemoved)
	 * @method bool hasProductsRemoved()
	 * @method bool isProductsRemovedFilled()
	 * @method bool isProductsRemovedChanged()
	 * @method \boolean remindActualProductsRemoved()
	 * @method \boolean requireProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing resetProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing unsetProductsRemoved()
	 * @method \boolean fillProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing resetOrder()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_OrderProcessing wakeUp($data)
	 */
	class EO_OrderProcessing {
		/* @var \Bitrix\Sale\Internals\OrderProcessingTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderProcessingTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_OrderProcessing_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOrderIdList()
	 * @method \boolean[] getProductsAddedList()
	 * @method \boolean[] fillProductsAdded()
	 * @method \boolean[] getProductsRemovedList()
	 * @method \boolean[] fillProductsRemoved()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_OrderProcessing $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_OrderProcessing $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_OrderProcessing $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_OrderProcessing_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_OrderProcessing_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\OrderProcessingTable */
		static public $dataClass = '\Bitrix\Sale\Internals\OrderProcessingTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_OrderProcessing_Query query()
	 * @method static EO_OrderProcessing_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_OrderProcessing_Result getById($id)
	 * @method static EO_OrderProcessing_Result getList(array $parameters = array())
	 * @method static EO_OrderProcessing_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_OrderProcessing createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_OrderProcessing_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_OrderProcessing wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_OrderProcessing_Collection wakeUpCollection($rows)
	 */
	class OrderProcessingTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_OrderProcessing_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection fetchCollection()
	 */
	class EO_OrderProcessing_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection fetchCollection()
	 */
	class EO_OrderProcessing_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_OrderProcessing_Collection wakeUpCollection($rows)
	 */
	class EO_OrderProcessing_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Sale\Internals\GoodsSectionTable */
namespace Bitrix\Sale\Internals {
	/**
	 * EO_GoodsSection
	 * @see \Bitrix\Sale\Internals\GoodsSectionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockElementId()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection setIblockElementId(\int|\Bitrix\Main\DB\SqlExpression $iblockElementId)
	 * @method bool hasIblockElementId()
	 * @method bool isIblockElementIdFilled()
	 * @method bool isIblockElementIdChanged()
	 * @method \Bitrix\Sale\Internals\EO_Product getProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product remindActualProduct()
	 * @method \Bitrix\Sale\Internals\EO_Product requireProduct()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection setProduct(\Bitrix\Sale\Internals\EO_Product $object)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection resetProduct()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection unsetProduct()
	 * @method bool hasProduct()
	 * @method bool isProductFilled()
	 * @method bool isProductChanged()
	 * @method \Bitrix\Sale\Internals\EO_Product fillProduct()
	 * @method \int getIblockSectionId()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection setIblockSectionId(\int|\Bitrix\Main\DB\SqlExpression $iblockSectionId)
	 * @method bool hasIblockSectionId()
	 * @method bool isIblockSectionIdFilled()
	 * @method bool isIblockSectionIdChanged()
	 * @method \Bitrix\Sale\Internals\EO_Section getSect()
	 * @method \Bitrix\Sale\Internals\EO_Section remindActualSect()
	 * @method \Bitrix\Sale\Internals\EO_Section requireSect()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection setSect(\Bitrix\Sale\Internals\EO_Section $object)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection resetSect()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection unsetSect()
	 * @method bool hasSect()
	 * @method bool isSectFilled()
	 * @method bool isSectChanged()
	 * @method \Bitrix\Sale\Internals\EO_Section fillSect()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection set($fieldName, $value)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection reset($fieldName)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Sale\Internals\EO_GoodsSection wakeUp($data)
	 */
	class EO_GoodsSection {
		/* @var \Bitrix\Sale\Internals\GoodsSectionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\GoodsSectionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * EO_GoodsSection_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockElementIdList()
	 * @method \Bitrix\Sale\Internals\EO_Product[] getProductList()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection getProductCollection()
	 * @method \Bitrix\Sale\Internals\EO_Product_Collection fillProduct()
	 * @method \int[] getIblockSectionIdList()
	 * @method \Bitrix\Sale\Internals\EO_Section[] getSectList()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection getSectCollection()
	 * @method \Bitrix\Sale\Internals\EO_Section_Collection fillSect()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Sale\Internals\EO_GoodsSection $object)
	 * @method bool has(\Bitrix\Sale\Internals\EO_GoodsSection $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection getByPrimary($primary)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection[] getAll()
	 * @method bool remove(\Bitrix\Sale\Internals\EO_GoodsSection $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Sale\Internals\EO_GoodsSection_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_GoodsSection_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Sale\Internals\GoodsSectionTable */
		static public $dataClass = '\Bitrix\Sale\Internals\GoodsSectionTable';
	}
}
namespace Bitrix\Sale\Internals {
	/**
	 * @method static EO_GoodsSection_Query query()
	 * @method static EO_GoodsSection_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_GoodsSection_Result getById($id)
	 * @method static EO_GoodsSection_Result getList(array $parameters = array())
	 * @method static EO_GoodsSection_Entity getEntity()
	 * @method static \Bitrix\Sale\Internals\EO_GoodsSection createObject($setDefaultValues = true)
	 * @method static \Bitrix\Sale\Internals\EO_GoodsSection_Collection createCollection()
	 * @method static \Bitrix\Sale\Internals\EO_GoodsSection wakeUpObject($row)
	 * @method static \Bitrix\Sale\Internals\EO_GoodsSection_Collection wakeUpCollection($rows)
	 */
	class GoodsSectionTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_GoodsSection_Result exec()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection fetchCollection()
	 */
	class EO_GoodsSection_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection fetchObject()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection fetchCollection()
	 */
	class EO_GoodsSection_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection createObject($setDefaultValues = true)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection createCollection()
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection wakeUpObject($row)
	 * @method \Bitrix\Sale\Internals\EO_GoodsSection_Collection wakeUpCollection($rows)
	 */
	class EO_GoodsSection_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\FileTable */
namespace Bitrix\Main {
	/**
	 * EO_File
	 * @see \Bitrix\Main\FileTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_File setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Main\EO_File setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Main\EO_File resetTimestampX()
	 * @method \Bitrix\Main\EO_File unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getModuleId()
	 * @method \Bitrix\Main\EO_File setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Main\EO_File resetModuleId()
	 * @method \Bitrix\Main\EO_File unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \int getHeight()
	 * @method \Bitrix\Main\EO_File setHeight(\int|\Bitrix\Main\DB\SqlExpression $height)
	 * @method bool hasHeight()
	 * @method bool isHeightFilled()
	 * @method bool isHeightChanged()
	 * @method \int remindActualHeight()
	 * @method \int requireHeight()
	 * @method \Bitrix\Main\EO_File resetHeight()
	 * @method \Bitrix\Main\EO_File unsetHeight()
	 * @method \int fillHeight()
	 * @method \int getWidth()
	 * @method \Bitrix\Main\EO_File setWidth(\int|\Bitrix\Main\DB\SqlExpression $width)
	 * @method bool hasWidth()
	 * @method bool isWidthFilled()
	 * @method bool isWidthChanged()
	 * @method \int remindActualWidth()
	 * @method \int requireWidth()
	 * @method \Bitrix\Main\EO_File resetWidth()
	 * @method \Bitrix\Main\EO_File unsetWidth()
	 * @method \int fillWidth()
	 * @method \int getFileSize()
	 * @method \Bitrix\Main\EO_File setFileSize(\int|\Bitrix\Main\DB\SqlExpression $fileSize)
	 * @method bool hasFileSize()
	 * @method bool isFileSizeFilled()
	 * @method bool isFileSizeChanged()
	 * @method \int remindActualFileSize()
	 * @method \int requireFileSize()
	 * @method \Bitrix\Main\EO_File resetFileSize()
	 * @method \Bitrix\Main\EO_File unsetFileSize()
	 * @method \int fillFileSize()
	 * @method \string getContentType()
	 * @method \Bitrix\Main\EO_File setContentType(\string|\Bitrix\Main\DB\SqlExpression $contentType)
	 * @method bool hasContentType()
	 * @method bool isContentTypeFilled()
	 * @method bool isContentTypeChanged()
	 * @method \string remindActualContentType()
	 * @method \string requireContentType()
	 * @method \Bitrix\Main\EO_File resetContentType()
	 * @method \Bitrix\Main\EO_File unsetContentType()
	 * @method \string fillContentType()
	 * @method \string getSubdir()
	 * @method \Bitrix\Main\EO_File setSubdir(\string|\Bitrix\Main\DB\SqlExpression $subdir)
	 * @method bool hasSubdir()
	 * @method bool isSubdirFilled()
	 * @method bool isSubdirChanged()
	 * @method \string remindActualSubdir()
	 * @method \string requireSubdir()
	 * @method \Bitrix\Main\EO_File resetSubdir()
	 * @method \Bitrix\Main\EO_File unsetSubdir()
	 * @method \string fillSubdir()
	 * @method \string getFileName()
	 * @method \Bitrix\Main\EO_File setFileName(\string|\Bitrix\Main\DB\SqlExpression $fileName)
	 * @method bool hasFileName()
	 * @method bool isFileNameFilled()
	 * @method bool isFileNameChanged()
	 * @method \string remindActualFileName()
	 * @method \string requireFileName()
	 * @method \Bitrix\Main\EO_File resetFileName()
	 * @method \Bitrix\Main\EO_File unsetFileName()
	 * @method \string fillFileName()
	 * @method \string getOriginalName()
	 * @method \Bitrix\Main\EO_File setOriginalName(\string|\Bitrix\Main\DB\SqlExpression $originalName)
	 * @method bool hasOriginalName()
	 * @method bool isOriginalNameFilled()
	 * @method bool isOriginalNameChanged()
	 * @method \string remindActualOriginalName()
	 * @method \string requireOriginalName()
	 * @method \Bitrix\Main\EO_File resetOriginalName()
	 * @method \Bitrix\Main\EO_File unsetOriginalName()
	 * @method \string fillOriginalName()
	 * @method \string getDescription()
	 * @method \Bitrix\Main\EO_File setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Main\EO_File resetDescription()
	 * @method \Bitrix\Main\EO_File unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getHandlerId()
	 * @method \Bitrix\Main\EO_File setHandlerId(\string|\Bitrix\Main\DB\SqlExpression $handlerId)
	 * @method bool hasHandlerId()
	 * @method bool isHandlerIdFilled()
	 * @method bool isHandlerIdChanged()
	 * @method \string remindActualHandlerId()
	 * @method \string requireHandlerId()
	 * @method \Bitrix\Main\EO_File resetHandlerId()
	 * @method \Bitrix\Main\EO_File unsetHandlerId()
	 * @method \string fillHandlerId()
	 * @method \string getExternalId()
	 * @method \Bitrix\Main\EO_File setExternalId(\string|\Bitrix\Main\DB\SqlExpression $externalId)
	 * @method bool hasExternalId()
	 * @method bool isExternalIdFilled()
	 * @method bool isExternalIdChanged()
	 * @method \string remindActualExternalId()
	 * @method \string requireExternalId()
	 * @method \Bitrix\Main\EO_File resetExternalId()
	 * @method \Bitrix\Main\EO_File unsetExternalId()
	 * @method \string fillExternalId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_File set($fieldName, $value)
	 * @method \Bitrix\Main\EO_File reset($fieldName)
	 * @method \Bitrix\Main\EO_File unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_File wakeUp($data)
	 */
	class EO_File {
		/* @var \Bitrix\Main\FileTable */
		static public $dataClass = '\Bitrix\Main\FileTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_File_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \int[] getHeightList()
	 * @method \int[] fillHeight()
	 * @method \int[] getWidthList()
	 * @method \int[] fillWidth()
	 * @method \int[] getFileSizeList()
	 * @method \int[] fillFileSize()
	 * @method \string[] getContentTypeList()
	 * @method \string[] fillContentType()
	 * @method \string[] getSubdirList()
	 * @method \string[] fillSubdir()
	 * @method \string[] getFileNameList()
	 * @method \string[] fillFileName()
	 * @method \string[] getOriginalNameList()
	 * @method \string[] fillOriginalName()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getHandlerIdList()
	 * @method \string[] fillHandlerId()
	 * @method \string[] getExternalIdList()
	 * @method \string[] fillExternalId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_File $object)
	 * @method bool has(\Bitrix\Main\EO_File $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_File getByPrimary($primary)
	 * @method \Bitrix\Main\EO_File[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_File $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_File_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_File current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_File_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\FileTable */
		static public $dataClass = '\Bitrix\Main\FileTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_File_Query query()
	 * @method static EO_File_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_File_Result getById($id)
	 * @method static EO_File_Result getList(array $parameters = array())
	 * @method static EO_File_Entity getEntity()
	 * @method static \Bitrix\Main\EO_File createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_File_Collection createCollection()
	 * @method static \Bitrix\Main\EO_File wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_File_Collection wakeUpCollection($rows)
	 */
	class FileTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_File_Result exec()
	 * @method \Bitrix\Main\EO_File fetchObject()
	 * @method \Bitrix\Main\EO_File_Collection fetchCollection()
	 */
	class EO_File_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_File fetchObject()
	 * @method \Bitrix\Main\EO_File_Collection fetchCollection()
	 */
	class EO_File_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_File createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_File_Collection createCollection()
	 * @method \Bitrix\Main\EO_File wakeUpObject($row)
	 * @method \Bitrix\Main\EO_File_Collection wakeUpCollection($rows)
	 */
	class EO_File_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Component\ParametersTable */
namespace Bitrix\Main\Component {
	/**
	 * EO_Parameters
	 * @see \Bitrix\Main\Component\ParametersTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Component\EO_Parameters setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getSiteId()
	 * @method \Bitrix\Main\Component\EO_Parameters setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \string remindActualSiteId()
	 * @method \string requireSiteId()
	 * @method \Bitrix\Main\Component\EO_Parameters resetSiteId()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetSiteId()
	 * @method \string fillSiteId()
	 * @method \string getComponentName()
	 * @method \Bitrix\Main\Component\EO_Parameters setComponentName(\string|\Bitrix\Main\DB\SqlExpression $componentName)
	 * @method bool hasComponentName()
	 * @method bool isComponentNameFilled()
	 * @method bool isComponentNameChanged()
	 * @method \string remindActualComponentName()
	 * @method \string requireComponentName()
	 * @method \Bitrix\Main\Component\EO_Parameters resetComponentName()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetComponentName()
	 * @method \string fillComponentName()
	 * @method \string getTemplateName()
	 * @method \Bitrix\Main\Component\EO_Parameters setTemplateName(\string|\Bitrix\Main\DB\SqlExpression $templateName)
	 * @method bool hasTemplateName()
	 * @method bool isTemplateNameFilled()
	 * @method bool isTemplateNameChanged()
	 * @method \string remindActualTemplateName()
	 * @method \string requireTemplateName()
	 * @method \Bitrix\Main\Component\EO_Parameters resetTemplateName()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetTemplateName()
	 * @method \string fillTemplateName()
	 * @method \string getRealPath()
	 * @method \Bitrix\Main\Component\EO_Parameters setRealPath(\string|\Bitrix\Main\DB\SqlExpression $realPath)
	 * @method bool hasRealPath()
	 * @method bool isRealPathFilled()
	 * @method bool isRealPathChanged()
	 * @method \string remindActualRealPath()
	 * @method \string requireRealPath()
	 * @method \Bitrix\Main\Component\EO_Parameters resetRealPath()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetRealPath()
	 * @method \string fillRealPath()
	 * @method \boolean getSefMode()
	 * @method \Bitrix\Main\Component\EO_Parameters setSefMode(\boolean|\Bitrix\Main\DB\SqlExpression $sefMode)
	 * @method bool hasSefMode()
	 * @method bool isSefModeFilled()
	 * @method bool isSefModeChanged()
	 * @method \boolean remindActualSefMode()
	 * @method \boolean requireSefMode()
	 * @method \Bitrix\Main\Component\EO_Parameters resetSefMode()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetSefMode()
	 * @method \boolean fillSefMode()
	 * @method \string getSefFolder()
	 * @method \Bitrix\Main\Component\EO_Parameters setSefFolder(\string|\Bitrix\Main\DB\SqlExpression $sefFolder)
	 * @method bool hasSefFolder()
	 * @method bool isSefFolderFilled()
	 * @method bool isSefFolderChanged()
	 * @method \string remindActualSefFolder()
	 * @method \string requireSefFolder()
	 * @method \Bitrix\Main\Component\EO_Parameters resetSefFolder()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetSefFolder()
	 * @method \string fillSefFolder()
	 * @method \int getStartChar()
	 * @method \Bitrix\Main\Component\EO_Parameters setStartChar(\int|\Bitrix\Main\DB\SqlExpression $startChar)
	 * @method bool hasStartChar()
	 * @method bool isStartCharFilled()
	 * @method bool isStartCharChanged()
	 * @method \int remindActualStartChar()
	 * @method \int requireStartChar()
	 * @method \Bitrix\Main\Component\EO_Parameters resetStartChar()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetStartChar()
	 * @method \int fillStartChar()
	 * @method \int getEndChar()
	 * @method \Bitrix\Main\Component\EO_Parameters setEndChar(\int|\Bitrix\Main\DB\SqlExpression $endChar)
	 * @method bool hasEndChar()
	 * @method bool isEndCharFilled()
	 * @method bool isEndCharChanged()
	 * @method \int remindActualEndChar()
	 * @method \int requireEndChar()
	 * @method \Bitrix\Main\Component\EO_Parameters resetEndChar()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetEndChar()
	 * @method \int fillEndChar()
	 * @method \string getParameters()
	 * @method \Bitrix\Main\Component\EO_Parameters setParameters(\string|\Bitrix\Main\DB\SqlExpression $parameters)
	 * @method bool hasParameters()
	 * @method bool isParametersFilled()
	 * @method bool isParametersChanged()
	 * @method \string remindActualParameters()
	 * @method \string requireParameters()
	 * @method \Bitrix\Main\Component\EO_Parameters resetParameters()
	 * @method \Bitrix\Main\Component\EO_Parameters unsetParameters()
	 * @method \string fillParameters()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Component\EO_Parameters set($fieldName, $value)
	 * @method \Bitrix\Main\Component\EO_Parameters reset($fieldName)
	 * @method \Bitrix\Main\Component\EO_Parameters unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Component\EO_Parameters wakeUp($data)
	 */
	class EO_Parameters {
		/* @var \Bitrix\Main\Component\ParametersTable */
		static public $dataClass = '\Bitrix\Main\Component\ParametersTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Component {
	/**
	 * EO_Parameters_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getSiteIdList()
	 * @method \string[] fillSiteId()
	 * @method \string[] getComponentNameList()
	 * @method \string[] fillComponentName()
	 * @method \string[] getTemplateNameList()
	 * @method \string[] fillTemplateName()
	 * @method \string[] getRealPathList()
	 * @method \string[] fillRealPath()
	 * @method \boolean[] getSefModeList()
	 * @method \boolean[] fillSefMode()
	 * @method \string[] getSefFolderList()
	 * @method \string[] fillSefFolder()
	 * @method \int[] getStartCharList()
	 * @method \int[] fillStartChar()
	 * @method \int[] getEndCharList()
	 * @method \int[] fillEndChar()
	 * @method \string[] getParametersList()
	 * @method \string[] fillParameters()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Component\EO_Parameters $object)
	 * @method bool has(\Bitrix\Main\Component\EO_Parameters $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Component\EO_Parameters getByPrimary($primary)
	 * @method \Bitrix\Main\Component\EO_Parameters[] getAll()
	 * @method bool remove(\Bitrix\Main\Component\EO_Parameters $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Component\EO_Parameters_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Component\EO_Parameters current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Parameters_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Component\ParametersTable */
		static public $dataClass = '\Bitrix\Main\Component\ParametersTable';
	}
}
namespace Bitrix\Main\Component {
	/**
	 * @method static EO_Parameters_Query query()
	 * @method static EO_Parameters_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Parameters_Result getById($id)
	 * @method static EO_Parameters_Result getList(array $parameters = array())
	 * @method static EO_Parameters_Entity getEntity()
	 * @method static \Bitrix\Main\Component\EO_Parameters createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Component\EO_Parameters_Collection createCollection()
	 * @method static \Bitrix\Main\Component\EO_Parameters wakeUpObject($row)
	 * @method static \Bitrix\Main\Component\EO_Parameters_Collection wakeUpCollection($rows)
	 */
	class ParametersTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Parameters_Result exec()
	 * @method \Bitrix\Main\Component\EO_Parameters fetchObject()
	 * @method \Bitrix\Main\Component\EO_Parameters_Collection fetchCollection()
	 */
	class EO_Parameters_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Component\EO_Parameters fetchObject()
	 * @method \Bitrix\Main\Component\EO_Parameters_Collection fetchCollection()
	 */
	class EO_Parameters_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Component\EO_Parameters createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Component\EO_Parameters_Collection createCollection()
	 * @method \Bitrix\Main\Component\EO_Parameters wakeUpObject($row)
	 * @method \Bitrix\Main\Component\EO_Parameters_Collection wakeUpCollection($rows)
	 */
	class EO_Parameters_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\FinderDestTable */
namespace Bitrix\Main {
	/**
	 * EO_FinderDest
	 * @see \Bitrix\Main\FinderDestTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_FinderDest setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Main\EO_FinderDest setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\EO_FinderDest resetUser()
	 * @method \Bitrix\Main\EO_FinderDest unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \string getCode()
	 * @method \Bitrix\Main\EO_FinderDest setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \int getCodeUserId()
	 * @method \Bitrix\Main\EO_FinderDest setCodeUserId(\int|\Bitrix\Main\DB\SqlExpression $codeUserId)
	 * @method bool hasCodeUserId()
	 * @method bool isCodeUserIdFilled()
	 * @method bool isCodeUserIdChanged()
	 * @method \int remindActualCodeUserId()
	 * @method \int requireCodeUserId()
	 * @method \Bitrix\Main\EO_FinderDest resetCodeUserId()
	 * @method \Bitrix\Main\EO_FinderDest unsetCodeUserId()
	 * @method \int fillCodeUserId()
	 * @method \string getCodeType()
	 * @method \Bitrix\Main\EO_FinderDest setCodeType(\string|\Bitrix\Main\DB\SqlExpression $codeType)
	 * @method bool hasCodeType()
	 * @method bool isCodeTypeFilled()
	 * @method bool isCodeTypeChanged()
	 * @method \string remindActualCodeType()
	 * @method \string requireCodeType()
	 * @method \Bitrix\Main\EO_FinderDest resetCodeType()
	 * @method \Bitrix\Main\EO_FinderDest unsetCodeType()
	 * @method \string fillCodeType()
	 * @method \Bitrix\Main\EO_User getCodeUser()
	 * @method \Bitrix\Main\EO_User remindActualCodeUser()
	 * @method \Bitrix\Main\EO_User requireCodeUser()
	 * @method \Bitrix\Main\EO_FinderDest setCodeUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\EO_FinderDest resetCodeUser()
	 * @method \Bitrix\Main\EO_FinderDest unsetCodeUser()
	 * @method bool hasCodeUser()
	 * @method bool isCodeUserFilled()
	 * @method bool isCodeUserChanged()
	 * @method \Bitrix\Main\EO_User fillCodeUser()
	 * @method \Bitrix\Main\EO_User getCodeUserCurrent()
	 * @method \Bitrix\Main\EO_User remindActualCodeUserCurrent()
	 * @method \Bitrix\Main\EO_User requireCodeUserCurrent()
	 * @method \Bitrix\Main\EO_FinderDest setCodeUserCurrent(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\EO_FinderDest resetCodeUserCurrent()
	 * @method \Bitrix\Main\EO_FinderDest unsetCodeUserCurrent()
	 * @method bool hasCodeUserCurrent()
	 * @method bool isCodeUserCurrentFilled()
	 * @method bool isCodeUserCurrentChanged()
	 * @method \Bitrix\Main\EO_User fillCodeUserCurrent()
	 * @method \string getContext()
	 * @method \Bitrix\Main\EO_FinderDest setContext(\string|\Bitrix\Main\DB\SqlExpression $context)
	 * @method bool hasContext()
	 * @method bool isContextFilled()
	 * @method bool isContextChanged()
	 * @method \Bitrix\Main\Type\DateTime getLastUseDate()
	 * @method \Bitrix\Main\EO_FinderDest setLastUseDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUseDate)
	 * @method bool hasLastUseDate()
	 * @method bool isLastUseDateFilled()
	 * @method bool isLastUseDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUseDate()
	 * @method \Bitrix\Main\Type\DateTime requireLastUseDate()
	 * @method \Bitrix\Main\EO_FinderDest resetLastUseDate()
	 * @method \Bitrix\Main\EO_FinderDest unsetLastUseDate()
	 * @method \Bitrix\Main\Type\DateTime fillLastUseDate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_FinderDest set($fieldName, $value)
	 * @method \Bitrix\Main\EO_FinderDest reset($fieldName)
	 * @method \Bitrix\Main\EO_FinderDest unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_FinderDest wakeUp($data)
	 */
	class EO_FinderDest {
		/* @var \Bitrix\Main\FinderDestTable */
		static public $dataClass = '\Bitrix\Main\FinderDestTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_FinderDest_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Main\EO_FinderDest_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \string[] getCodeList()
	 * @method \int[] getCodeUserIdList()
	 * @method \int[] fillCodeUserId()
	 * @method \string[] getCodeTypeList()
	 * @method \string[] fillCodeType()
	 * @method \Bitrix\Main\EO_User[] getCodeUserList()
	 * @method \Bitrix\Main\EO_FinderDest_Collection getCodeUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCodeUser()
	 * @method \Bitrix\Main\EO_User[] getCodeUserCurrentList()
	 * @method \Bitrix\Main\EO_FinderDest_Collection getCodeUserCurrentCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCodeUserCurrent()
	 * @method \string[] getContextList()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUseDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUseDate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_FinderDest $object)
	 * @method bool has(\Bitrix\Main\EO_FinderDest $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_FinderDest getByPrimary($primary)
	 * @method \Bitrix\Main\EO_FinderDest[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_FinderDest $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_FinderDest_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_FinderDest current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_FinderDest_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\FinderDestTable */
		static public $dataClass = '\Bitrix\Main\FinderDestTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_FinderDest_Query query()
	 * @method static EO_FinderDest_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_FinderDest_Result getById($id)
	 * @method static EO_FinderDest_Result getList(array $parameters = array())
	 * @method static EO_FinderDest_Entity getEntity()
	 * @method static \Bitrix\Main\EO_FinderDest createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_FinderDest_Collection createCollection()
	 * @method static \Bitrix\Main\EO_FinderDest wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_FinderDest_Collection wakeUpCollection($rows)
	 */
	class FinderDestTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_FinderDest_Result exec()
	 * @method \Bitrix\Main\EO_FinderDest fetchObject()
	 * @method \Bitrix\Main\EO_FinderDest_Collection fetchCollection()
	 */
	class EO_FinderDest_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_FinderDest fetchObject()
	 * @method \Bitrix\Main\EO_FinderDest_Collection fetchCollection()
	 */
	class EO_FinderDest_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_FinderDest createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_FinderDest_Collection createCollection()
	 * @method \Bitrix\Main\EO_FinderDest wakeUpObject($row)
	 * @method \Bitrix\Main\EO_FinderDest_Collection wakeUpCollection($rows)
	 */
	class EO_FinderDest_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserCounterTable */
namespace Bitrix\Main {
	/**
	 * EO_UserCounter
	 * @see \Bitrix\Main\UserCounterTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserCounter setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getSiteId()
	 * @method \Bitrix\Main\EO_UserCounter setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Main\EO_UserCounter setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string getTag()
	 * @method \Bitrix\Main\EO_UserCounter setTag(\string|\Bitrix\Main\DB\SqlExpression $tag)
	 * @method bool hasTag()
	 * @method bool isTagFilled()
	 * @method bool isTagChanged()
	 * @method \string remindActualTag()
	 * @method \string requireTag()
	 * @method \Bitrix\Main\EO_UserCounter resetTag()
	 * @method \Bitrix\Main\EO_UserCounter unsetTag()
	 * @method \string fillTag()
	 * @method \string getParams()
	 * @method \Bitrix\Main\EO_UserCounter setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Main\EO_UserCounter resetParams()
	 * @method \Bitrix\Main\EO_UserCounter unsetParams()
	 * @method \string fillParams()
	 * @method \string getSent()
	 * @method \Bitrix\Main\EO_UserCounter setSent(\string|\Bitrix\Main\DB\SqlExpression $sent)
	 * @method bool hasSent()
	 * @method bool isSentFilled()
	 * @method bool isSentChanged()
	 * @method \string remindActualSent()
	 * @method \string requireSent()
	 * @method \Bitrix\Main\EO_UserCounter resetSent()
	 * @method \Bitrix\Main\EO_UserCounter unsetSent()
	 * @method \string fillSent()
	 * @method \int getCnt()
	 * @method \Bitrix\Main\EO_UserCounter setCnt(\int|\Bitrix\Main\DB\SqlExpression $cnt)
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method bool isCntChanged()
	 * @method \int remindActualCnt()
	 * @method \int requireCnt()
	 * @method \Bitrix\Main\EO_UserCounter resetCnt()
	 * @method \Bitrix\Main\EO_UserCounter unsetCnt()
	 * @method \int fillCnt()
	 * @method \Bitrix\Main\Type\DateTime getLastDate()
	 * @method \Bitrix\Main\EO_UserCounter setLastDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastDate)
	 * @method bool hasLastDate()
	 * @method bool isLastDateFilled()
	 * @method bool isLastDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastDate()
	 * @method \Bitrix\Main\Type\DateTime requireLastDate()
	 * @method \Bitrix\Main\EO_UserCounter resetLastDate()
	 * @method \Bitrix\Main\EO_UserCounter unsetLastDate()
	 * @method \Bitrix\Main\Type\DateTime fillLastDate()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Main\EO_UserCounter setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Main\EO_UserCounter resetTimestampX()
	 * @method \Bitrix\Main\EO_UserCounter unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Main\EO_UserCounter setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\EO_UserCounter resetUser()
	 * @method \Bitrix\Main\EO_UserCounter unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserCounter set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserCounter reset($fieldName)
	 * @method \Bitrix\Main\EO_UserCounter unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserCounter wakeUp($data)
	 */
	class EO_UserCounter {
		/* @var \Bitrix\Main\UserCounterTable */
		static public $dataClass = '\Bitrix\Main\UserCounterTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserCounter_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \string[] getSiteIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] getTagList()
	 * @method \string[] fillTag()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 * @method \string[] getSentList()
	 * @method \string[] fillSent()
	 * @method \int[] getCntList()
	 * @method \int[] fillCnt()
	 * @method \Bitrix\Main\Type\DateTime[] getLastDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastDate()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Main\EO_UserCounter_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserCounter $object)
	 * @method bool has(\Bitrix\Main\EO_UserCounter $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserCounter getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserCounter[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserCounter $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserCounter_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserCounter current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserCounter_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserCounterTable */
		static public $dataClass = '\Bitrix\Main\UserCounterTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserCounter_Query query()
	 * @method static EO_UserCounter_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserCounter_Result getById($id)
	 * @method static EO_UserCounter_Result getList(array $parameters = array())
	 * @method static EO_UserCounter_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserCounter createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserCounter_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserCounter wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserCounter_Collection wakeUpCollection($rows)
	 */
	class UserCounterTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserCounter_Result exec()
	 * @method \Bitrix\Main\EO_UserCounter fetchObject()
	 * @method \Bitrix\Main\EO_UserCounter_Collection fetchCollection()
	 */
	class EO_UserCounter_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserCounter fetchObject()
	 * @method \Bitrix\Main\EO_UserCounter_Collection fetchCollection()
	 */
	class EO_UserCounter_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserCounter createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserCounter_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserCounter wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserCounter_Collection wakeUpCollection($rows)
	 */
	class EO_UserCounter_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserAuthActionTable */
namespace Bitrix\Main {
	/**
	 * EO_UserAuthAction
	 * @see \Bitrix\Main\UserAuthActionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_UserAuthAction setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserAuthAction setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\EO_UserAuthAction resetUserId()
	 * @method \Bitrix\Main\EO_UserAuthAction unsetUserId()
	 * @method \int fillUserId()
	 * @method \int getPriority()
	 * @method \Bitrix\Main\EO_UserAuthAction setPriority(\int|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \int remindActualPriority()
	 * @method \int requirePriority()
	 * @method \Bitrix\Main\EO_UserAuthAction resetPriority()
	 * @method \Bitrix\Main\EO_UserAuthAction unsetPriority()
	 * @method \int fillPriority()
	 * @method \string getAction()
	 * @method \Bitrix\Main\EO_UserAuthAction setAction(\string|\Bitrix\Main\DB\SqlExpression $action)
	 * @method bool hasAction()
	 * @method bool isActionFilled()
	 * @method bool isActionChanged()
	 * @method \string remindActualAction()
	 * @method \string requireAction()
	 * @method \Bitrix\Main\EO_UserAuthAction resetAction()
	 * @method \Bitrix\Main\EO_UserAuthAction unsetAction()
	 * @method \string fillAction()
	 * @method \Bitrix\Main\Type\DateTime getActionDate()
	 * @method \Bitrix\Main\EO_UserAuthAction setActionDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $actionDate)
	 * @method bool hasActionDate()
	 * @method bool isActionDateFilled()
	 * @method bool isActionDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActionDate()
	 * @method \Bitrix\Main\Type\DateTime requireActionDate()
	 * @method \Bitrix\Main\EO_UserAuthAction resetActionDate()
	 * @method \Bitrix\Main\EO_UserAuthAction unsetActionDate()
	 * @method \Bitrix\Main\Type\DateTime fillActionDate()
	 * @method \string getApplicationId()
	 * @method \Bitrix\Main\EO_UserAuthAction setApplicationId(\string|\Bitrix\Main\DB\SqlExpression $applicationId)
	 * @method bool hasApplicationId()
	 * @method bool isApplicationIdFilled()
	 * @method bool isApplicationIdChanged()
	 * @method \string remindActualApplicationId()
	 * @method \string requireApplicationId()
	 * @method \Bitrix\Main\EO_UserAuthAction resetApplicationId()
	 * @method \Bitrix\Main\EO_UserAuthAction unsetApplicationId()
	 * @method \string fillApplicationId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserAuthAction set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserAuthAction reset($fieldName)
	 * @method \Bitrix\Main\EO_UserAuthAction unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserAuthAction wakeUp($data)
	 */
	class EO_UserAuthAction {
		/* @var \Bitrix\Main\UserAuthActionTable */
		static public $dataClass = '\Bitrix\Main\UserAuthActionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserAuthAction_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \int[] getPriorityList()
	 * @method \int[] fillPriority()
	 * @method \string[] getActionList()
	 * @method \string[] fillAction()
	 * @method \Bitrix\Main\Type\DateTime[] getActionDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActionDate()
	 * @method \string[] getApplicationIdList()
	 * @method \string[] fillApplicationId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserAuthAction $object)
	 * @method bool has(\Bitrix\Main\EO_UserAuthAction $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserAuthAction getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserAuthAction[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserAuthAction $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserAuthAction_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserAuthAction current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserAuthAction_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserAuthActionTable */
		static public $dataClass = '\Bitrix\Main\UserAuthActionTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserAuthAction_Query query()
	 * @method static EO_UserAuthAction_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserAuthAction_Result getById($id)
	 * @method static EO_UserAuthAction_Result getList(array $parameters = array())
	 * @method static EO_UserAuthAction_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserAuthAction createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserAuthAction_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserAuthAction wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserAuthAction_Collection wakeUpCollection($rows)
	 */
	class UserAuthActionTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserAuthAction_Result exec()
	 * @method \Bitrix\Main\EO_UserAuthAction fetchObject()
	 * @method \Bitrix\Main\EO_UserAuthAction_Collection fetchCollection()
	 */
	class EO_UserAuthAction_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserAuthAction fetchObject()
	 * @method \Bitrix\Main\EO_UserAuthAction_Collection fetchCollection()
	 */
	class EO_UserAuthAction_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserAuthAction createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserAuthAction_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserAuthAction wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserAuthAction_Collection wakeUpCollection($rows)
	 */
	class EO_UserAuthAction_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Mail\Internal\EventAttachmentTable */
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventAttachment
	 * @see \Bitrix\Main\Mail\Internal\EventAttachmentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEventId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment setEventId(\int|\Bitrix\Main\DB\SqlExpression $eventId)
	 * @method bool hasEventId()
	 * @method bool isEventIdFilled()
	 * @method bool isEventIdChanged()
	 * @method \int getFileId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment setFileId(\int|\Bitrix\Main\DB\SqlExpression $fileId)
	 * @method bool hasFileId()
	 * @method bool isFileIdFilled()
	 * @method bool isFileIdChanged()
	 * @method \int remindActualFileId()
	 * @method \int requireFileId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment resetFileId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment unsetFileId()
	 * @method \int fillFileId()
	 * @method \boolean getIsFileCopied()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment setIsFileCopied(\boolean|\Bitrix\Main\DB\SqlExpression $isFileCopied)
	 * @method bool hasIsFileCopied()
	 * @method bool isIsFileCopiedFilled()
	 * @method bool isIsFileCopiedChanged()
	 * @method \boolean remindActualIsFileCopied()
	 * @method \boolean requireIsFileCopied()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment resetIsFileCopied()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment unsetIsFileCopied()
	 * @method \boolean fillIsFileCopied()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event getEvent()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event remindActualEvent()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event requireEvent()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment setEvent(\Bitrix\Main\Mail\Internal\EO_Event $object)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment resetEvent()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment unsetEvent()
	 * @method bool hasEvent()
	 * @method bool isEventFilled()
	 * @method bool isEventChanged()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event fillEvent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment set($fieldName, $value)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment reset($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventAttachment wakeUp($data)
	 */
	class EO_EventAttachment {
		/* @var \Bitrix\Main\Mail\Internal\EventAttachmentTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventAttachmentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventAttachment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEventIdList()
	 * @method \int[] getFileIdList()
	 * @method \int[] fillFileId()
	 * @method \boolean[] getIsFileCopiedList()
	 * @method \boolean[] fillIsFileCopied()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event[] getEventList()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment_Collection getEventCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event_Collection fillEvent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Mail\Internal\EO_EventAttachment $object)
	 * @method bool has(\Bitrix\Main\Mail\Internal\EO_EventAttachment $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment getByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment[] getAll()
	 * @method bool remove(\Bitrix\Main\Mail\Internal\EO_EventAttachment $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventAttachment_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EventAttachment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Mail\Internal\EventAttachmentTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventAttachmentTable';
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * @method static EO_EventAttachment_Query query()
	 * @method static EO_EventAttachment_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EventAttachment_Result getById($id)
	 * @method static EO_EventAttachment_Result getList(array $parameters = array())
	 * @method static EO_EventAttachment_Entity getEntity()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventAttachment createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventAttachment_Collection createCollection()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventAttachment wakeUpObject($row)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventAttachment_Collection wakeUpCollection($rows)
	 */
	class EventAttachmentTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_EventAttachment_Result exec()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment_Collection fetchCollection()
	 */
	class EO_EventAttachment_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment_Collection fetchCollection()
	 */
	class EO_EventAttachment_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment_Collection createCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment wakeUpObject($row)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventAttachment_Collection wakeUpCollection($rows)
	 */
	class EO_EventAttachment_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Mail\Internal\SenderTable */
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_Sender
	 * @see \Bitrix\Main\Mail\Internal\SenderTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender resetName()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender unsetName()
	 * @method \string fillName()
	 * @method \string getEmail()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender resetEmail()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender unsetEmail()
	 * @method \string fillEmail()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender resetUserId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender unsetUserId()
	 * @method \int fillUserId()
	 * @method \boolean getIsConfirmed()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender setIsConfirmed(\boolean|\Bitrix\Main\DB\SqlExpression $isConfirmed)
	 * @method bool hasIsConfirmed()
	 * @method bool isIsConfirmedFilled()
	 * @method bool isIsConfirmedChanged()
	 * @method \boolean remindActualIsConfirmed()
	 * @method \boolean requireIsConfirmed()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender resetIsConfirmed()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender unsetIsConfirmed()
	 * @method \boolean fillIsConfirmed()
	 * @method \boolean getIsPublic()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender setIsPublic(\boolean|\Bitrix\Main\DB\SqlExpression $isPublic)
	 * @method bool hasIsPublic()
	 * @method bool isIsPublicFilled()
	 * @method bool isIsPublicChanged()
	 * @method \boolean remindActualIsPublic()
	 * @method \boolean requireIsPublic()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender resetIsPublic()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender unsetIsPublic()
	 * @method \boolean fillIsPublic()
	 * @method \string getOptions()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender setOptions(\string|\Bitrix\Main\DB\SqlExpression $options)
	 * @method bool hasOptions()
	 * @method bool isOptionsFilled()
	 * @method bool isOptionsChanged()
	 * @method \string remindActualOptions()
	 * @method \string requireOptions()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender resetOptions()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender unsetOptions()
	 * @method \string fillOptions()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender set($fieldName, $value)
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender reset($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Sender wakeUp($data)
	 */
	class EO_Sender {
		/* @var \Bitrix\Main\Mail\Internal\SenderTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\SenderTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_Sender_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \boolean[] getIsConfirmedList()
	 * @method \boolean[] fillIsConfirmed()
	 * @method \boolean[] getIsPublicList()
	 * @method \boolean[] fillIsPublic()
	 * @method \string[] getOptionsList()
	 * @method \string[] fillOptions()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Mail\Internal\EO_Sender $object)
	 * @method bool has(\Bitrix\Main\Mail\Internal\EO_Sender $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender getByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender[] getAll()
	 * @method bool remove(\Bitrix\Main\Mail\Internal\EO_Sender $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Mail\Internal\EO_Sender_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Sender_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Mail\Internal\SenderTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\SenderTable';
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * @method static EO_Sender_Query query()
	 * @method static EO_Sender_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Sender_Result getById($id)
	 * @method static EO_Sender_Result getList(array $parameters = array())
	 * @method static EO_Sender_Entity getEntity()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Sender createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Mail\Internal\EO_Sender_Collection createCollection()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Sender wakeUpObject($row)
	 * @method static \Bitrix\Main\Mail\Internal\EO_Sender_Collection wakeUpCollection($rows)
	 */
	class SenderTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Sender_Result exec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender_Collection fetchCollection()
	 */
	class EO_Sender_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender_Collection fetchCollection()
	 */
	class EO_Sender_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender_Collection createCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender wakeUpObject($row)
	 * @method \Bitrix\Main\Mail\Internal\EO_Sender_Collection wakeUpCollection($rows)
	 */
	class EO_Sender_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Mail\Internal\EventTypeTable */
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventType
	 * @see \Bitrix\Main\Mail\Internal\EventTypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType resetLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType unsetLid()
	 * @method \string fillLid()
	 * @method \string getEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType setEventName(\string|\Bitrix\Main\DB\SqlExpression $eventName)
	 * @method bool hasEventName()
	 * @method bool isEventNameFilled()
	 * @method bool isEventNameChanged()
	 * @method \string remindActualEventName()
	 * @method \string requireEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType resetEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType unsetEventName()
	 * @method \string fillEventName()
	 * @method \string getName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType resetName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType unsetName()
	 * @method \string fillName()
	 * @method \string getDescription()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType resetDescription()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType unsetDescription()
	 * @method \string fillDescription()
	 * @method \int getSort()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType resetSort()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType unsetSort()
	 * @method \int fillSort()
	 * @method \string getEventType()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType setEventType(\string|\Bitrix\Main\DB\SqlExpression $eventType)
	 * @method bool hasEventType()
	 * @method bool isEventTypeFilled()
	 * @method bool isEventTypeChanged()
	 * @method \string remindActualEventType()
	 * @method \string requireEventType()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType resetEventType()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType unsetEventType()
	 * @method \string fillEventType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType set($fieldName, $value)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType reset($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventType wakeUp($data)
	 */
	class EO_EventType {
		/* @var \Bitrix\Main\Mail\Internal\EventTypeTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventTypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventType_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getEventNameList()
	 * @method \string[] fillEventName()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getEventTypeList()
	 * @method \string[] fillEventType()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Mail\Internal\EO_EventType $object)
	 * @method bool has(\Bitrix\Main\Mail\Internal\EO_EventType $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType getByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType[] getAll()
	 * @method bool remove(\Bitrix\Main\Mail\Internal\EO_EventType $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventType_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EventType_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Mail\Internal\EventTypeTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventTypeTable';
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * @method static EO_EventType_Query query()
	 * @method static EO_EventType_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EventType_Result getById($id)
	 * @method static EO_EventType_Result getList(array $parameters = array())
	 * @method static EO_EventType_Entity getEntity()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventType createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventType_Collection createCollection()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventType wakeUpObject($row)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventType_Collection wakeUpCollection($rows)
	 */
	class EventTypeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_EventType_Result exec()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType_Collection fetchCollection()
	 */
	class EO_EventType_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType_Collection fetchCollection()
	 */
	class EO_EventType_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType_Collection createCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType wakeUpObject($row)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventType_Collection wakeUpCollection($rows)
	 */
	class EO_EventType_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Mail\Internal\EventTable */
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_Event
	 * @see \Bitrix\Main\Mail\Internal\EventTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setEventName(\string|\Bitrix\Main\DB\SqlExpression $eventName)
	 * @method bool hasEventName()
	 * @method bool isEventNameFilled()
	 * @method bool isEventNameChanged()
	 * @method \string remindActualEventName()
	 * @method \string requireEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetEventName()
	 * @method \string fillEventName()
	 * @method \int getMessageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setMessageId(\int|\Bitrix\Main\DB\SqlExpression $messageId)
	 * @method bool hasMessageId()
	 * @method bool isMessageIdFilled()
	 * @method bool isMessageIdChanged()
	 * @method \int remindActualMessageId()
	 * @method \int requireMessageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetMessageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetMessageId()
	 * @method \int fillMessageId()
	 * @method \string getLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetLid()
	 * @method \string fillLid()
	 * @method array getCFields()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setCFields(array|\Bitrix\Main\DB\SqlExpression $cFields)
	 * @method bool hasCFields()
	 * @method bool isCFieldsFilled()
	 * @method bool isCFieldsChanged()
	 * @method array remindActualCFields()
	 * @method array requireCFields()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetCFields()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetCFields()
	 * @method array fillCFields()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetDateInsert()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateExec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setDateExec(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateExec)
	 * @method bool hasDateExec()
	 * @method bool isDateExecFilled()
	 * @method bool isDateExecChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateExec()
	 * @method \Bitrix\Main\Type\DateTime requireDateExec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetDateExec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetDateExec()
	 * @method \Bitrix\Main\Type\DateTime fillDateExec()
	 * @method \string getSuccessExec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setSuccessExec(\string|\Bitrix\Main\DB\SqlExpression $successExec)
	 * @method bool hasSuccessExec()
	 * @method bool isSuccessExecFilled()
	 * @method bool isSuccessExecChanged()
	 * @method \string remindActualSuccessExec()
	 * @method \string requireSuccessExec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetSuccessExec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetSuccessExec()
	 * @method \string fillSuccessExec()
	 * @method \string getDuplicate()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setDuplicate(\string|\Bitrix\Main\DB\SqlExpression $duplicate)
	 * @method bool hasDuplicate()
	 * @method bool isDuplicateFilled()
	 * @method bool isDuplicateChanged()
	 * @method \string remindActualDuplicate()
	 * @method \string requireDuplicate()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetDuplicate()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetDuplicate()
	 * @method \string fillDuplicate()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event resetLanguageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unsetLanguageId()
	 * @method \string fillLanguageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_Event set($fieldName, $value)
	 * @method \Bitrix\Main\Mail\Internal\EO_Event reset($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_Event unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Event wakeUp($data)
	 */
	class EO_Event {
		/* @var \Bitrix\Main\Mail\Internal\EventTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_Event_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getEventNameList()
	 * @method \string[] fillEventName()
	 * @method \int[] getMessageIdList()
	 * @method \int[] fillMessageId()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method array[] getCFieldsList()
	 * @method array[] fillCFields()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateExecList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateExec()
	 * @method \string[] getSuccessExecList()
	 * @method \string[] fillSuccessExec()
	 * @method \string[] getDuplicateList()
	 * @method \string[] fillDuplicate()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Mail\Internal\EO_Event $object)
	 * @method bool has(\Bitrix\Main\Mail\Internal\EO_Event $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_Event getByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_Event[] getAll()
	 * @method bool remove(\Bitrix\Main\Mail\Internal\EO_Event $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Mail\Internal\EO_Event_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Mail\Internal\EO_Event current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Event_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Mail\Internal\EventTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventTable';
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * @method static EO_Event_Query query()
	 * @method static EO_Event_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Event_Result getById($id)
	 * @method static EO_Event_Result getList(array $parameters = array())
	 * @method static EO_Event_Entity getEntity()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Event createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Mail\Internal\EO_Event_Collection createCollection()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Event wakeUpObject($row)
	 * @method static \Bitrix\Main\Mail\Internal\EO_Event_Collection wakeUpCollection($rows)
	 */
	class EventTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Event_Result exec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event_Collection fetchCollection()
	 */
	class EO_Event_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_Event fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event_Collection fetchCollection()
	 */
	class EO_Event_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_Event createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Mail\Internal\EO_Event_Collection createCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_Event wakeUpObject($row)
	 * @method \Bitrix\Main\Mail\Internal\EO_Event_Collection wakeUpCollection($rows)
	 */
	class EO_Event_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Mail\Internal\EventMessageTable */
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventMessage
	 * @see \Bitrix\Main\Mail\Internal\EventMessageTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetTimestampX()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setEventName(\string|\Bitrix\Main\DB\SqlExpression $eventName)
	 * @method bool hasEventName()
	 * @method bool isEventNameFilled()
	 * @method bool isEventNameChanged()
	 * @method \string remindActualEventName()
	 * @method \string requireEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetEventName()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetEventName()
	 * @method \string fillEventName()
	 * @method \string getLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetLid()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetLid()
	 * @method \string fillLid()
	 * @method \string getActive()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setActive(\string|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \string remindActualActive()
	 * @method \string requireActive()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetActive()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetActive()
	 * @method \string fillActive()
	 * @method \string getEmailFrom()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setEmailFrom(\string|\Bitrix\Main\DB\SqlExpression $emailFrom)
	 * @method bool hasEmailFrom()
	 * @method bool isEmailFromFilled()
	 * @method bool isEmailFromChanged()
	 * @method \string remindActualEmailFrom()
	 * @method \string requireEmailFrom()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetEmailFrom()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetEmailFrom()
	 * @method \string fillEmailFrom()
	 * @method \string getEmailTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setEmailTo(\string|\Bitrix\Main\DB\SqlExpression $emailTo)
	 * @method bool hasEmailTo()
	 * @method bool isEmailToFilled()
	 * @method bool isEmailToChanged()
	 * @method \string remindActualEmailTo()
	 * @method \string requireEmailTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetEmailTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetEmailTo()
	 * @method \string fillEmailTo()
	 * @method \string getSubject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setSubject(\string|\Bitrix\Main\DB\SqlExpression $subject)
	 * @method bool hasSubject()
	 * @method bool isSubjectFilled()
	 * @method bool isSubjectChanged()
	 * @method \string remindActualSubject()
	 * @method \string requireSubject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetSubject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetSubject()
	 * @method \string fillSubject()
	 * @method \string getMessage()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetMessage()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetMessage()
	 * @method \string fillMessage()
	 * @method \string getMessagePhp()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setMessagePhp(\string|\Bitrix\Main\DB\SqlExpression $messagePhp)
	 * @method bool hasMessagePhp()
	 * @method bool isMessagePhpFilled()
	 * @method bool isMessagePhpChanged()
	 * @method \string remindActualMessagePhp()
	 * @method \string requireMessagePhp()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetMessagePhp()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetMessagePhp()
	 * @method \string fillMessagePhp()
	 * @method \string getBodyType()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setBodyType(\string|\Bitrix\Main\DB\SqlExpression $bodyType)
	 * @method bool hasBodyType()
	 * @method bool isBodyTypeFilled()
	 * @method bool isBodyTypeChanged()
	 * @method \string remindActualBodyType()
	 * @method \string requireBodyType()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetBodyType()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetBodyType()
	 * @method \string fillBodyType()
	 * @method \string getBcc()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setBcc(\string|\Bitrix\Main\DB\SqlExpression $bcc)
	 * @method bool hasBcc()
	 * @method bool isBccFilled()
	 * @method bool isBccChanged()
	 * @method \string remindActualBcc()
	 * @method \string requireBcc()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetBcc()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetBcc()
	 * @method \string fillBcc()
	 * @method \string getReplyTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setReplyTo(\string|\Bitrix\Main\DB\SqlExpression $replyTo)
	 * @method bool hasReplyTo()
	 * @method bool isReplyToFilled()
	 * @method bool isReplyToChanged()
	 * @method \string remindActualReplyTo()
	 * @method \string requireReplyTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetReplyTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetReplyTo()
	 * @method \string fillReplyTo()
	 * @method \string getCc()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setCc(\string|\Bitrix\Main\DB\SqlExpression $cc)
	 * @method bool hasCc()
	 * @method bool isCcFilled()
	 * @method bool isCcChanged()
	 * @method \string remindActualCc()
	 * @method \string requireCc()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetCc()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetCc()
	 * @method \string fillCc()
	 * @method \string getInReplyTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setInReplyTo(\string|\Bitrix\Main\DB\SqlExpression $inReplyTo)
	 * @method bool hasInReplyTo()
	 * @method bool isInReplyToFilled()
	 * @method bool isInReplyToChanged()
	 * @method \string remindActualInReplyTo()
	 * @method \string requireInReplyTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetInReplyTo()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetInReplyTo()
	 * @method \string fillInReplyTo()
	 * @method \string getPriority()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setPriority(\string|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \string remindActualPriority()
	 * @method \string requirePriority()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetPriority()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetPriority()
	 * @method \string fillPriority()
	 * @method \string getField1Name()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setField1Name(\string|\Bitrix\Main\DB\SqlExpression $field1Name)
	 * @method bool hasField1Name()
	 * @method bool isField1NameFilled()
	 * @method bool isField1NameChanged()
	 * @method \string remindActualField1Name()
	 * @method \string requireField1Name()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetField1Name()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetField1Name()
	 * @method \string fillField1Name()
	 * @method \string getField1Value()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setField1Value(\string|\Bitrix\Main\DB\SqlExpression $field1Value)
	 * @method bool hasField1Value()
	 * @method bool isField1ValueFilled()
	 * @method bool isField1ValueChanged()
	 * @method \string remindActualField1Value()
	 * @method \string requireField1Value()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetField1Value()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetField1Value()
	 * @method \string fillField1Value()
	 * @method \string getField2Name()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setField2Name(\string|\Bitrix\Main\DB\SqlExpression $field2Name)
	 * @method bool hasField2Name()
	 * @method bool isField2NameFilled()
	 * @method bool isField2NameChanged()
	 * @method \string remindActualField2Name()
	 * @method \string requireField2Name()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetField2Name()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetField2Name()
	 * @method \string fillField2Name()
	 * @method \string getField2Value()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setField2Value(\string|\Bitrix\Main\DB\SqlExpression $field2Value)
	 * @method bool hasField2Value()
	 * @method bool isField2ValueFilled()
	 * @method bool isField2ValueChanged()
	 * @method \string remindActualField2Value()
	 * @method \string requireField2Value()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetField2Value()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetField2Value()
	 * @method \string fillField2Value()
	 * @method \string getSiteTemplateId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setSiteTemplateId(\string|\Bitrix\Main\DB\SqlExpression $siteTemplateId)
	 * @method bool hasSiteTemplateId()
	 * @method bool isSiteTemplateIdFilled()
	 * @method bool isSiteTemplateIdChanged()
	 * @method \string remindActualSiteTemplateId()
	 * @method \string requireSiteTemplateId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetSiteTemplateId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetSiteTemplateId()
	 * @method \string fillSiteTemplateId()
	 * @method array getAdditionalField()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setAdditionalField(array|\Bitrix\Main\DB\SqlExpression $additionalField)
	 * @method bool hasAdditionalField()
	 * @method bool isAdditionalFieldFilled()
	 * @method bool isAdditionalFieldChanged()
	 * @method array remindActualAdditionalField()
	 * @method array requireAdditionalField()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetAdditionalField()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetAdditionalField()
	 * @method array fillAdditionalField()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite getEventMessageSite()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite remindActualEventMessageSite()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite requireEventMessageSite()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setEventMessageSite(\Bitrix\Main\Mail\Internal\EO_EventMessageSite $object)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetEventMessageSite()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetEventMessageSite()
	 * @method bool hasEventMessageSite()
	 * @method bool isEventMessageSiteFilled()
	 * @method bool isEventMessageSiteChanged()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite fillEventMessageSite()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage resetLanguageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unsetLanguageId()
	 * @method \string fillLanguageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage set($fieldName, $value)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage reset($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessage wakeUp($data)
	 */
	class EO_EventMessage {
		/* @var \Bitrix\Main\Mail\Internal\EventMessageTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventMessageTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventMessage_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getEventNameList()
	 * @method \string[] fillEventName()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getActiveList()
	 * @method \string[] fillActive()
	 * @method \string[] getEmailFromList()
	 * @method \string[] fillEmailFrom()
	 * @method \string[] getEmailToList()
	 * @method \string[] fillEmailTo()
	 * @method \string[] getSubjectList()
	 * @method \string[] fillSubject()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 * @method \string[] getMessagePhpList()
	 * @method \string[] fillMessagePhp()
	 * @method \string[] getBodyTypeList()
	 * @method \string[] fillBodyType()
	 * @method \string[] getBccList()
	 * @method \string[] fillBcc()
	 * @method \string[] getReplyToList()
	 * @method \string[] fillReplyTo()
	 * @method \string[] getCcList()
	 * @method \string[] fillCc()
	 * @method \string[] getInReplyToList()
	 * @method \string[] fillInReplyTo()
	 * @method \string[] getPriorityList()
	 * @method \string[] fillPriority()
	 * @method \string[] getField1NameList()
	 * @method \string[] fillField1Name()
	 * @method \string[] getField1ValueList()
	 * @method \string[] fillField1Value()
	 * @method \string[] getField2NameList()
	 * @method \string[] fillField2Name()
	 * @method \string[] getField2ValueList()
	 * @method \string[] fillField2Value()
	 * @method \string[] getSiteTemplateIdList()
	 * @method \string[] fillSiteTemplateId()
	 * @method array[] getAdditionalFieldList()
	 * @method array[] fillAdditionalField()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite[] getEventMessageSiteList()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage_Collection getEventMessageSiteCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite_Collection fillEventMessageSite()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Mail\Internal\EO_EventMessage $object)
	 * @method bool has(\Bitrix\Main\Mail\Internal\EO_EventMessage $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage getByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage[] getAll()
	 * @method bool remove(\Bitrix\Main\Mail\Internal\EO_EventMessage $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessage_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EventMessage_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Mail\Internal\EventMessageTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventMessageTable';
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * @method static EO_EventMessage_Query query()
	 * @method static EO_EventMessage_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EventMessage_Result getById($id)
	 * @method static EO_EventMessage_Result getList(array $parameters = array())
	 * @method static EO_EventMessage_Entity getEntity()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessage createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessage_Collection createCollection()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessage wakeUpObject($row)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessage_Collection wakeUpCollection($rows)
	 */
	class EventMessageTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_EventMessage_Result exec()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage_Collection fetchCollection()
	 */
	class EO_EventMessage_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage_Collection fetchCollection()
	 */
	class EO_EventMessage_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage_Collection createCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage wakeUpObject($row)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessage_Collection wakeUpCollection($rows)
	 */
	class EO_EventMessage_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Mail\Internal\BlacklistTable */
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_Blacklist
	 * @see \Bitrix\Main\Mail\Internal\BlacklistTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist resetCategoryId()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getCode()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist resetCode()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist unsetCode()
	 * @method \string fillCode()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist resetDateInsert()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist set($fieldName, $value)
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist reset($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Blacklist wakeUp($data)
	 */
	class EO_Blacklist {
		/* @var \Bitrix\Main\Mail\Internal\BlacklistTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\BlacklistTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_Blacklist_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Mail\Internal\EO_Blacklist $object)
	 * @method bool has(\Bitrix\Main\Mail\Internal\EO_Blacklist $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist getByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist[] getAll()
	 * @method bool remove(\Bitrix\Main\Mail\Internal\EO_Blacklist $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Mail\Internal\EO_Blacklist_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Blacklist_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Mail\Internal\BlacklistTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\BlacklistTable';
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * @method static EO_Blacklist_Query query()
	 * @method static EO_Blacklist_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Blacklist_Result getById($id)
	 * @method static EO_Blacklist_Result getList(array $parameters = array())
	 * @method static EO_Blacklist_Entity getEntity()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Blacklist createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Mail\Internal\EO_Blacklist_Collection createCollection()
	 * @method static \Bitrix\Main\Mail\Internal\EO_Blacklist wakeUpObject($row)
	 * @method static \Bitrix\Main\Mail\Internal\EO_Blacklist_Collection wakeUpCollection($rows)
	 */
	class BlacklistTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Blacklist_Result exec()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist_Collection fetchCollection()
	 */
	class EO_Blacklist_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist_Collection fetchCollection()
	 */
	class EO_Blacklist_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist_Collection createCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist wakeUpObject($row)
	 * @method \Bitrix\Main\Mail\Internal\EO_Blacklist_Collection wakeUpCollection($rows)
	 */
	class EO_Blacklist_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Mail\Internal\EventMessageAttachmentTable */
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventMessageAttachment
	 * @see \Bitrix\Main\Mail\Internal\EventMessageAttachmentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEventMessageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment setEventMessageId(\int|\Bitrix\Main\DB\SqlExpression $eventMessageId)
	 * @method bool hasEventMessageId()
	 * @method bool isEventMessageIdFilled()
	 * @method bool isEventMessageIdChanged()
	 * @method \int getFileId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment setFileId(\int|\Bitrix\Main\DB\SqlExpression $fileId)
	 * @method bool hasFileId()
	 * @method bool isFileIdFilled()
	 * @method bool isFileIdChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment set($fieldName, $value)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment reset($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment wakeUp($data)
	 */
	class EO_EventMessageAttachment {
		/* @var \Bitrix\Main\Mail\Internal\EventMessageAttachmentTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventMessageAttachmentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventMessageAttachment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEventMessageIdList()
	 * @method \int[] getFileIdList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Mail\Internal\EO_EventMessageAttachment $object)
	 * @method bool has(\Bitrix\Main\Mail\Internal\EO_EventMessageAttachment $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment getByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment[] getAll()
	 * @method bool remove(\Bitrix\Main\Mail\Internal\EO_EventMessageAttachment $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EventMessageAttachment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Mail\Internal\EventMessageAttachmentTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventMessageAttachmentTable';
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * @method static EO_EventMessageAttachment_Query query()
	 * @method static EO_EventMessageAttachment_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EventMessageAttachment_Result getById($id)
	 * @method static EO_EventMessageAttachment_Result getList(array $parameters = array())
	 * @method static EO_EventMessageAttachment_Entity getEntity()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment_Collection createCollection()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment wakeUpObject($row)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment_Collection wakeUpCollection($rows)
	 */
	class EventMessageAttachmentTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_EventMessageAttachment_Result exec()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment_Collection fetchCollection()
	 */
	class EO_EventMessageAttachment_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment_Collection fetchCollection()
	 */
	class EO_EventMessageAttachment_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment_Collection createCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment wakeUpObject($row)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageAttachment_Collection wakeUpCollection($rows)
	 */
	class EO_EventMessageAttachment_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Mail\Internal\EventMessageSiteTable */
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventMessageSite
	 * @see \Bitrix\Main\Mail\Internal\EventMessageSiteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEventMessageId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite setEventMessageId(\int|\Bitrix\Main\DB\SqlExpression $eventMessageId)
	 * @method bool hasEventMessageId()
	 * @method bool isEventMessageIdFilled()
	 * @method bool isEventMessageIdChanged()
	 * @method \string getSiteId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \string remindActualSiteId()
	 * @method \string requireSiteId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite resetSiteId()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite unsetSiteId()
	 * @method \string fillSiteId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite set($fieldName, $value)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite reset($fieldName)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageSite wakeUp($data)
	 */
	class EO_EventMessageSite {
		/* @var \Bitrix\Main\Mail\Internal\EventMessageSiteTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventMessageSiteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * EO_EventMessageSite_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEventMessageIdList()
	 * @method \string[] getSiteIdList()
	 * @method \string[] fillSiteId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Mail\Internal\EO_EventMessageSite $object)
	 * @method bool has(\Bitrix\Main\Mail\Internal\EO_EventMessageSite $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite getByPrimary($primary)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite[] getAll()
	 * @method bool remove(\Bitrix\Main\Mail\Internal\EO_EventMessageSite $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageSite_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EventMessageSite_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Mail\Internal\EventMessageSiteTable */
		static public $dataClass = '\Bitrix\Main\Mail\Internal\EventMessageSiteTable';
	}
}
namespace Bitrix\Main\Mail\Internal {
	/**
	 * @method static EO_EventMessageSite_Query query()
	 * @method static EO_EventMessageSite_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EventMessageSite_Result getById($id)
	 * @method static EO_EventMessageSite_Result getList(array $parameters = array())
	 * @method static EO_EventMessageSite_Entity getEntity()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageSite createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageSite_Collection createCollection()
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageSite wakeUpObject($row)
	 * @method static \Bitrix\Main\Mail\Internal\EO_EventMessageSite_Collection wakeUpCollection($rows)
	 */
	class EventMessageSiteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_EventMessageSite_Result exec()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite_Collection fetchCollection()
	 */
	class EO_EventMessageSite_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite fetchObject()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite_Collection fetchCollection()
	 */
	class EO_EventMessageSite_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite_Collection createCollection()
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite wakeUpObject($row)
	 * @method \Bitrix\Main\Mail\Internal\EO_EventMessageSite_Collection wakeUpCollection($rows)
	 */
	class EO_EventMessageSite_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserIndexSelectorTable */
namespace Bitrix\Main {
	/**
	 * EO_UserIndexSelector
	 * @see \Bitrix\Main\UserIndexSelectorTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserIndexSelector setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getSearchSelectorContent()
	 * @method \Bitrix\Main\EO_UserIndexSelector setSearchSelectorContent(\string|\Bitrix\Main\DB\SqlExpression $searchSelectorContent)
	 * @method bool hasSearchSelectorContent()
	 * @method bool isSearchSelectorContentFilled()
	 * @method bool isSearchSelectorContentChanged()
	 * @method \string remindActualSearchSelectorContent()
	 * @method \string requireSearchSelectorContent()
	 * @method \Bitrix\Main\EO_UserIndexSelector resetSearchSelectorContent()
	 * @method \Bitrix\Main\EO_UserIndexSelector unsetSearchSelectorContent()
	 * @method \string fillSearchSelectorContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserIndexSelector set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserIndexSelector reset($fieldName)
	 * @method \Bitrix\Main\EO_UserIndexSelector unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserIndexSelector wakeUp($data)
	 */
	class EO_UserIndexSelector {
		/* @var \Bitrix\Main\UserIndexSelectorTable */
		static public $dataClass = '\Bitrix\Main\UserIndexSelectorTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserIndexSelector_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \string[] getSearchSelectorContentList()
	 * @method \string[] fillSearchSelectorContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserIndexSelector $object)
	 * @method bool has(\Bitrix\Main\EO_UserIndexSelector $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserIndexSelector getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserIndexSelector[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserIndexSelector $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserIndexSelector_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserIndexSelector current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserIndexSelector_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserIndexSelectorTable */
		static public $dataClass = '\Bitrix\Main\UserIndexSelectorTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserIndexSelector_Query query()
	 * @method static EO_UserIndexSelector_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserIndexSelector_Result getById($id)
	 * @method static EO_UserIndexSelector_Result getList(array $parameters = array())
	 * @method static EO_UserIndexSelector_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserIndexSelector createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserIndexSelector_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserIndexSelector wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserIndexSelector_Collection wakeUpCollection($rows)
	 */
	class UserIndexSelectorTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserIndexSelector_Result exec()
	 * @method \Bitrix\Main\EO_UserIndexSelector fetchObject()
	 * @method \Bitrix\Main\EO_UserIndexSelector_Collection fetchCollection()
	 */
	class EO_UserIndexSelector_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserIndexSelector fetchObject()
	 * @method \Bitrix\Main\EO_UserIndexSelector_Collection fetchCollection()
	 */
	class EO_UserIndexSelector_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserIndexSelector createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserIndexSelector_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserIndexSelector wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserIndexSelector_Collection wakeUpCollection($rows)
	 */
	class EO_UserIndexSelector_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserAccessTable */
namespace Bitrix\Main {
	/**
	 * EO_UserAccess
	 * @see \Bitrix\Main\UserAccessTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserAccess setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Main\EO_UserAccess setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getAccessCode()
	 * @method \Bitrix\Main\EO_UserAccess setAccessCode(\string|\Bitrix\Main\DB\SqlExpression $accessCode)
	 * @method bool hasAccessCode()
	 * @method bool isAccessCodeFilled()
	 * @method bool isAccessCodeChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserAccess set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserAccess reset($fieldName)
	 * @method \Bitrix\Main\EO_UserAccess unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserAccess wakeUp($data)
	 */
	class EO_UserAccess {
		/* @var \Bitrix\Main\UserAccessTable */
		static public $dataClass = '\Bitrix\Main\UserAccessTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserAccess_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getAccessCodeList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserAccess $object)
	 * @method bool has(\Bitrix\Main\EO_UserAccess $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserAccess getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserAccess[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserAccess $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserAccess_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserAccess current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserAccess_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserAccessTable */
		static public $dataClass = '\Bitrix\Main\UserAccessTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserAccess_Query query()
	 * @method static EO_UserAccess_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserAccess_Result getById($id)
	 * @method static EO_UserAccess_Result getList(array $parameters = array())
	 * @method static EO_UserAccess_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserAccess createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserAccess_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserAccess wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserAccess_Collection wakeUpCollection($rows)
	 */
	class UserAccessTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserAccess_Result exec()
	 * @method \Bitrix\Main\EO_UserAccess fetchObject()
	 * @method \Bitrix\Main\EO_UserAccess_Collection fetchCollection()
	 */
	class EO_UserAccess_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserAccess fetchObject()
	 * @method \Bitrix\Main\EO_UserAccess_Collection fetchCollection()
	 */
	class EO_UserAccess_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserAccess createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserAccess_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserAccess wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserAccess_Collection wakeUpCollection($rows)
	 */
	class EO_UserAccess_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserProfileRecordTable */
namespace Bitrix\Main {
	/**
	 * EO_UserProfileRecord
	 * @see \Bitrix\Main\UserProfileRecordTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_UserProfileRecord setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getHistoryId()
	 * @method \Bitrix\Main\EO_UserProfileRecord setHistoryId(\int|\Bitrix\Main\DB\SqlExpression $historyId)
	 * @method bool hasHistoryId()
	 * @method bool isHistoryIdFilled()
	 * @method bool isHistoryIdChanged()
	 * @method \int remindActualHistoryId()
	 * @method \int requireHistoryId()
	 * @method \Bitrix\Main\EO_UserProfileRecord resetHistoryId()
	 * @method \Bitrix\Main\EO_UserProfileRecord unsetHistoryId()
	 * @method \int fillHistoryId()
	 * @method \string getField()
	 * @method \Bitrix\Main\EO_UserProfileRecord setField(\string|\Bitrix\Main\DB\SqlExpression $field)
	 * @method bool hasField()
	 * @method bool isFieldFilled()
	 * @method bool isFieldChanged()
	 * @method \string remindActualField()
	 * @method \string requireField()
	 * @method \Bitrix\Main\EO_UserProfileRecord resetField()
	 * @method \Bitrix\Main\EO_UserProfileRecord unsetField()
	 * @method \string fillField()
	 * @method \string getData()
	 * @method \Bitrix\Main\EO_UserProfileRecord setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Main\EO_UserProfileRecord resetData()
	 * @method \Bitrix\Main\EO_UserProfileRecord unsetData()
	 * @method \string fillData()
	 * @method \Bitrix\Main\EO_UserProfileHistory getHistory()
	 * @method \Bitrix\Main\EO_UserProfileHistory remindActualHistory()
	 * @method \Bitrix\Main\EO_UserProfileHistory requireHistory()
	 * @method \Bitrix\Main\EO_UserProfileRecord setHistory(\Bitrix\Main\EO_UserProfileHistory $object)
	 * @method \Bitrix\Main\EO_UserProfileRecord resetHistory()
	 * @method \Bitrix\Main\EO_UserProfileRecord unsetHistory()
	 * @method bool hasHistory()
	 * @method bool isHistoryFilled()
	 * @method bool isHistoryChanged()
	 * @method \Bitrix\Main\EO_UserProfileHistory fillHistory()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserProfileRecord set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserProfileRecord reset($fieldName)
	 * @method \Bitrix\Main\EO_UserProfileRecord unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserProfileRecord wakeUp($data)
	 */
	class EO_UserProfileRecord {
		/* @var \Bitrix\Main\UserProfileRecordTable */
		static public $dataClass = '\Bitrix\Main\UserProfileRecordTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserProfileRecord_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getHistoryIdList()
	 * @method \int[] fillHistoryId()
	 * @method \string[] getFieldList()
	 * @method \string[] fillField()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 * @method \Bitrix\Main\EO_UserProfileHistory[] getHistoryList()
	 * @method \Bitrix\Main\EO_UserProfileRecord_Collection getHistoryCollection()
	 * @method \Bitrix\Main\EO_UserProfileHistory_Collection fillHistory()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserProfileRecord $object)
	 * @method bool has(\Bitrix\Main\EO_UserProfileRecord $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserProfileRecord getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserProfileRecord[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserProfileRecord $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserProfileRecord_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserProfileRecord current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserProfileRecord_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserProfileRecordTable */
		static public $dataClass = '\Bitrix\Main\UserProfileRecordTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserProfileRecord_Query query()
	 * @method static EO_UserProfileRecord_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserProfileRecord_Result getById($id)
	 * @method static EO_UserProfileRecord_Result getList(array $parameters = array())
	 * @method static EO_UserProfileRecord_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserProfileRecord createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserProfileRecord_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserProfileRecord wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserProfileRecord_Collection wakeUpCollection($rows)
	 */
	class UserProfileRecordTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserProfileRecord_Result exec()
	 * @method \Bitrix\Main\EO_UserProfileRecord fetchObject()
	 * @method \Bitrix\Main\EO_UserProfileRecord_Collection fetchCollection()
	 */
	class EO_UserProfileRecord_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserProfileRecord fetchObject()
	 * @method \Bitrix\Main\EO_UserProfileRecord_Collection fetchCollection()
	 */
	class EO_UserProfileRecord_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserProfileRecord createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserProfileRecord_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserProfileRecord wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserProfileRecord_Collection wakeUpCollection($rows)
	 */
	class EO_UserProfileRecord_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Service\GeoIp\HandlerTable */
namespace Bitrix\Main\Service\GeoIp {
	/**
	 * EO_Handler
	 * @see \Bitrix\Main\Service\GeoIp\HandlerTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getSort()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler resetSort()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getActive()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler resetActive()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getClassName()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler setClassName(\string|\Bitrix\Main\DB\SqlExpression $className)
	 * @method bool hasClassName()
	 * @method bool isClassNameFilled()
	 * @method bool isClassNameChanged()
	 * @method \string remindActualClassName()
	 * @method \string requireClassName()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler resetClassName()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler unsetClassName()
	 * @method \string fillClassName()
	 * @method \string getConfig()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler setConfig(\string|\Bitrix\Main\DB\SqlExpression $config)
	 * @method bool hasConfig()
	 * @method bool isConfigFilled()
	 * @method bool isConfigChanged()
	 * @method \string remindActualConfig()
	 * @method \string requireConfig()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler resetConfig()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler unsetConfig()
	 * @method \string fillConfig()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler set($fieldName, $value)
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler reset($fieldName)
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Service\GeoIp\EO_Handler wakeUp($data)
	 */
	class EO_Handler {
		/* @var \Bitrix\Main\Service\GeoIp\HandlerTable */
		static public $dataClass = '\Bitrix\Main\Service\GeoIp\HandlerTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Service\GeoIp {
	/**
	 * EO_Handler_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getClassNameList()
	 * @method \string[] fillClassName()
	 * @method \string[] getConfigList()
	 * @method \string[] fillConfig()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Service\GeoIp\EO_Handler $object)
	 * @method bool has(\Bitrix\Main\Service\GeoIp\EO_Handler $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler getByPrimary($primary)
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler[] getAll()
	 * @method bool remove(\Bitrix\Main\Service\GeoIp\EO_Handler $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Service\GeoIp\EO_Handler_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Handler_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Service\GeoIp\HandlerTable */
		static public $dataClass = '\Bitrix\Main\Service\GeoIp\HandlerTable';
	}
}
namespace Bitrix\Main\Service\GeoIp {
	/**
	 * @method static EO_Handler_Query query()
	 * @method static EO_Handler_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Handler_Result getById($id)
	 * @method static EO_Handler_Result getList(array $parameters = array())
	 * @method static EO_Handler_Entity getEntity()
	 * @method static \Bitrix\Main\Service\GeoIp\EO_Handler createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Service\GeoIp\EO_Handler_Collection createCollection()
	 * @method static \Bitrix\Main\Service\GeoIp\EO_Handler wakeUpObject($row)
	 * @method static \Bitrix\Main\Service\GeoIp\EO_Handler_Collection wakeUpCollection($rows)
	 */
	class HandlerTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Handler_Result exec()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler fetchObject()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler_Collection fetchCollection()
	 */
	class EO_Handler_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler fetchObject()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler_Collection fetchCollection()
	 */
	class EO_Handler_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler_Collection createCollection()
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler wakeUpObject($row)
	 * @method \Bitrix\Main\Service\GeoIp\EO_Handler_Collection wakeUpCollection($rows)
	 */
	class EO_Handler_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserFieldConfirmTable */
namespace Bitrix\Main {
	/**
	 * EO_UserFieldConfirm
	 * @see \Bitrix\Main\UserFieldConfirmTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_UserFieldConfirm setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserFieldConfirm setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\EO_UserFieldConfirm resetUserId()
	 * @method \Bitrix\Main\EO_UserFieldConfirm unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\Type\DateTime getDateChange()
	 * @method \Bitrix\Main\EO_UserFieldConfirm setDateChange(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateChange)
	 * @method bool hasDateChange()
	 * @method bool isDateChangeFilled()
	 * @method bool isDateChangeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateChange()
	 * @method \Bitrix\Main\Type\DateTime requireDateChange()
	 * @method \Bitrix\Main\EO_UserFieldConfirm resetDateChange()
	 * @method \Bitrix\Main\EO_UserFieldConfirm unsetDateChange()
	 * @method \Bitrix\Main\Type\DateTime fillDateChange()
	 * @method \string getField()
	 * @method \Bitrix\Main\EO_UserFieldConfirm setField(\string|\Bitrix\Main\DB\SqlExpression $field)
	 * @method bool hasField()
	 * @method bool isFieldFilled()
	 * @method bool isFieldChanged()
	 * @method \string remindActualField()
	 * @method \string requireField()
	 * @method \Bitrix\Main\EO_UserFieldConfirm resetField()
	 * @method \Bitrix\Main\EO_UserFieldConfirm unsetField()
	 * @method \string fillField()
	 * @method \string getFieldValue()
	 * @method \Bitrix\Main\EO_UserFieldConfirm setFieldValue(\string|\Bitrix\Main\DB\SqlExpression $fieldValue)
	 * @method bool hasFieldValue()
	 * @method bool isFieldValueFilled()
	 * @method bool isFieldValueChanged()
	 * @method \string remindActualFieldValue()
	 * @method \string requireFieldValue()
	 * @method \Bitrix\Main\EO_UserFieldConfirm resetFieldValue()
	 * @method \Bitrix\Main\EO_UserFieldConfirm unsetFieldValue()
	 * @method \string fillFieldValue()
	 * @method \string getConfirmCode()
	 * @method \Bitrix\Main\EO_UserFieldConfirm setConfirmCode(\string|\Bitrix\Main\DB\SqlExpression $confirmCode)
	 * @method bool hasConfirmCode()
	 * @method bool isConfirmCodeFilled()
	 * @method bool isConfirmCodeChanged()
	 * @method \string remindActualConfirmCode()
	 * @method \string requireConfirmCode()
	 * @method \Bitrix\Main\EO_UserFieldConfirm resetConfirmCode()
	 * @method \Bitrix\Main\EO_UserFieldConfirm unsetConfirmCode()
	 * @method \string fillConfirmCode()
	 * @method \int getAttempts()
	 * @method \Bitrix\Main\EO_UserFieldConfirm setAttempts(\int|\Bitrix\Main\DB\SqlExpression $attempts)
	 * @method bool hasAttempts()
	 * @method bool isAttemptsFilled()
	 * @method bool isAttemptsChanged()
	 * @method \int remindActualAttempts()
	 * @method \int requireAttempts()
	 * @method \Bitrix\Main\EO_UserFieldConfirm resetAttempts()
	 * @method \Bitrix\Main\EO_UserFieldConfirm unsetAttempts()
	 * @method \int fillAttempts()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserFieldConfirm set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserFieldConfirm reset($fieldName)
	 * @method \Bitrix\Main\EO_UserFieldConfirm unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserFieldConfirm wakeUp($data)
	 */
	class EO_UserFieldConfirm {
		/* @var \Bitrix\Main\UserFieldConfirmTable */
		static public $dataClass = '\Bitrix\Main\UserFieldConfirmTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserFieldConfirm_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateChangeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateChange()
	 * @method \string[] getFieldList()
	 * @method \string[] fillField()
	 * @method \string[] getFieldValueList()
	 * @method \string[] fillFieldValue()
	 * @method \string[] getConfirmCodeList()
	 * @method \string[] fillConfirmCode()
	 * @method \int[] getAttemptsList()
	 * @method \int[] fillAttempts()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserFieldConfirm $object)
	 * @method bool has(\Bitrix\Main\EO_UserFieldConfirm $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserFieldConfirm getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserFieldConfirm[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserFieldConfirm $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserFieldConfirm_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserFieldConfirm current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserFieldConfirm_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserFieldConfirmTable */
		static public $dataClass = '\Bitrix\Main\UserFieldConfirmTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserFieldConfirm_Query query()
	 * @method static EO_UserFieldConfirm_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserFieldConfirm_Result getById($id)
	 * @method static EO_UserFieldConfirm_Result getList(array $parameters = array())
	 * @method static EO_UserFieldConfirm_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserFieldConfirm createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserFieldConfirm_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserFieldConfirm wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserFieldConfirm_Collection wakeUpCollection($rows)
	 */
	class UserFieldConfirmTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserFieldConfirm_Result exec()
	 * @method \Bitrix\Main\EO_UserFieldConfirm fetchObject()
	 * @method \Bitrix\Main\EO_UserFieldConfirm_Collection fetchCollection()
	 */
	class EO_UserFieldConfirm_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserFieldConfirm fetchObject()
	 * @method \Bitrix\Main\EO_UserFieldConfirm_Collection fetchCollection()
	 */
	class EO_UserFieldConfirm_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserFieldConfirm createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserFieldConfirm_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserFieldConfirm wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserFieldConfirm_Collection wakeUpCollection($rows)
	 */
	class EO_UserFieldConfirm_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\SiteDomainTable */
namespace Bitrix\Main {
	/**
	 * EO_SiteDomain
	 * @see \Bitrix\Main\SiteDomainTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getLid()
	 * @method \Bitrix\Main\EO_SiteDomain setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string getDomain()
	 * @method \Bitrix\Main\EO_SiteDomain setDomain(\string|\Bitrix\Main\DB\SqlExpression $domain)
	 * @method bool hasDomain()
	 * @method bool isDomainFilled()
	 * @method bool isDomainChanged()
	 * @method \Bitrix\Main\EO_Site getSite()
	 * @method \Bitrix\Main\EO_Site remindActualSite()
	 * @method \Bitrix\Main\EO_Site requireSite()
	 * @method \Bitrix\Main\EO_SiteDomain setSite(\Bitrix\Main\EO_Site $object)
	 * @method \Bitrix\Main\EO_SiteDomain resetSite()
	 * @method \Bitrix\Main\EO_SiteDomain unsetSite()
	 * @method bool hasSite()
	 * @method bool isSiteFilled()
	 * @method bool isSiteChanged()
	 * @method \Bitrix\Main\EO_Site fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_SiteDomain set($fieldName, $value)
	 * @method \Bitrix\Main\EO_SiteDomain reset($fieldName)
	 * @method \Bitrix\Main\EO_SiteDomain unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_SiteDomain wakeUp($data)
	 */
	class EO_SiteDomain {
		/* @var \Bitrix\Main\SiteDomainTable */
		static public $dataClass = '\Bitrix\Main\SiteDomainTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_SiteDomain_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getLidList()
	 * @method \string[] getDomainList()
	 * @method \Bitrix\Main\EO_Site[] getSiteList()
	 * @method \Bitrix\Main\EO_SiteDomain_Collection getSiteCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_SiteDomain $object)
	 * @method bool has(\Bitrix\Main\EO_SiteDomain $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_SiteDomain getByPrimary($primary)
	 * @method \Bitrix\Main\EO_SiteDomain[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_SiteDomain $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_SiteDomain_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_SiteDomain current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SiteDomain_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\SiteDomainTable */
		static public $dataClass = '\Bitrix\Main\SiteDomainTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_SiteDomain_Query query()
	 * @method static EO_SiteDomain_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SiteDomain_Result getById($id)
	 * @method static EO_SiteDomain_Result getList(array $parameters = array())
	 * @method static EO_SiteDomain_Entity getEntity()
	 * @method static \Bitrix\Main\EO_SiteDomain createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_SiteDomain_Collection createCollection()
	 * @method static \Bitrix\Main\EO_SiteDomain wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_SiteDomain_Collection wakeUpCollection($rows)
	 */
	class SiteDomainTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_SiteDomain_Result exec()
	 * @method \Bitrix\Main\EO_SiteDomain fetchObject()
	 * @method \Bitrix\Main\EO_SiteDomain_Collection fetchCollection()
	 */
	class EO_SiteDomain_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_SiteDomain fetchObject()
	 * @method \Bitrix\Main\EO_SiteDomain_Collection fetchCollection()
	 */
	class EO_SiteDomain_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_SiteDomain createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_SiteDomain_Collection createCollection()
	 * @method \Bitrix\Main\EO_SiteDomain wakeUpObject($row)
	 * @method \Bitrix\Main\EO_SiteDomain_Collection wakeUpCollection($rows)
	 */
	class EO_SiteDomain_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UI\Viewer\FilePreviewTable */
namespace Bitrix\Main\UI\Viewer {
	/**
	 * EO_FilePreview
	 * @see \Bitrix\Main\UI\Viewer\FilePreviewTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getFileId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setFileId(\int|\Bitrix\Main\DB\SqlExpression $fileId)
	 * @method bool hasFileId()
	 * @method bool isFileIdFilled()
	 * @method bool isFileIdChanged()
	 * @method \int remindActualFileId()
	 * @method \int requireFileId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview resetFileId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unsetFileId()
	 * @method \int fillFileId()
	 * @method \int getPreviewId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setPreviewId(\int|\Bitrix\Main\DB\SqlExpression $previewId)
	 * @method bool hasPreviewId()
	 * @method bool isPreviewIdFilled()
	 * @method bool isPreviewIdChanged()
	 * @method \int remindActualPreviewId()
	 * @method \int requirePreviewId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview resetPreviewId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unsetPreviewId()
	 * @method \int fillPreviewId()
	 * @method \int getPreviewImageId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setPreviewImageId(\int|\Bitrix\Main\DB\SqlExpression $previewImageId)
	 * @method bool hasPreviewImageId()
	 * @method bool isPreviewImageIdFilled()
	 * @method bool isPreviewImageIdChanged()
	 * @method \int remindActualPreviewImageId()
	 * @method \int requirePreviewImageId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview resetPreviewImageId()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unsetPreviewImageId()
	 * @method \int fillPreviewImageId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedAt()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setCreatedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdAt)
	 * @method bool hasCreatedAt()
	 * @method bool isCreatedAtFilled()
	 * @method bool isCreatedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedAt()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview resetCreatedAt()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unsetCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime getTouchedAt()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setTouchedAt(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $touchedAt)
	 * @method bool hasTouchedAt()
	 * @method bool isTouchedAtFilled()
	 * @method bool isTouchedAtChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTouchedAt()
	 * @method \Bitrix\Main\Type\DateTime requireTouchedAt()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview resetTouchedAt()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unsetTouchedAt()
	 * @method \Bitrix\Main\Type\DateTime fillTouchedAt()
	 * @method \Bitrix\Main\EO_File getFile()
	 * @method \Bitrix\Main\EO_File remindActualFile()
	 * @method \Bitrix\Main\EO_File requireFile()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setFile(\Bitrix\Main\EO_File $object)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview resetFile()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unsetFile()
	 * @method bool hasFile()
	 * @method bool isFileFilled()
	 * @method bool isFileChanged()
	 * @method \Bitrix\Main\EO_File fillFile()
	 * @method \Bitrix\Main\EO_File getPreview()
	 * @method \Bitrix\Main\EO_File remindActualPreview()
	 * @method \Bitrix\Main\EO_File requirePreview()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setPreview(\Bitrix\Main\EO_File $object)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview resetPreview()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unsetPreview()
	 * @method bool hasPreview()
	 * @method bool isPreviewFilled()
	 * @method bool isPreviewChanged()
	 * @method \Bitrix\Main\EO_File fillPreview()
	 * @method \Bitrix\Main\EO_File getPreviewImage()
	 * @method \Bitrix\Main\EO_File remindActualPreviewImage()
	 * @method \Bitrix\Main\EO_File requirePreviewImage()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview setPreviewImage(\Bitrix\Main\EO_File $object)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview resetPreviewImage()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unsetPreviewImage()
	 * @method bool hasPreviewImage()
	 * @method bool isPreviewImageFilled()
	 * @method bool isPreviewImageChanged()
	 * @method \Bitrix\Main\EO_File fillPreviewImage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview set($fieldName, $value)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview reset($fieldName)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\UI\Viewer\EO_FilePreview wakeUp($data)
	 */
	class EO_FilePreview {
		/* @var \Bitrix\Main\UI\Viewer\FilePreviewTable */
		static public $dataClass = '\Bitrix\Main\UI\Viewer\FilePreviewTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\UI\Viewer {
	/**
	 * EO_FilePreview_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getFileIdList()
	 * @method \int[] fillFileId()
	 * @method \int[] getPreviewIdList()
	 * @method \int[] fillPreviewId()
	 * @method \int[] getPreviewImageIdList()
	 * @method \int[] fillPreviewImageId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedAt()
	 * @method \Bitrix\Main\Type\DateTime[] getTouchedAtList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTouchedAt()
	 * @method \Bitrix\Main\EO_File[] getFileList()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection getFileCollection()
	 * @method \Bitrix\Main\EO_File_Collection fillFile()
	 * @method \Bitrix\Main\EO_File[] getPreviewList()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection getPreviewCollection()
	 * @method \Bitrix\Main\EO_File_Collection fillPreview()
	 * @method \Bitrix\Main\EO_File[] getPreviewImageList()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection getPreviewImageCollection()
	 * @method \Bitrix\Main\EO_File_Collection fillPreviewImage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\UI\Viewer\EO_FilePreview $object)
	 * @method bool has(\Bitrix\Main\UI\Viewer\EO_FilePreview $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview getByPrimary($primary)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview[] getAll()
	 * @method bool remove(\Bitrix\Main\UI\Viewer\EO_FilePreview $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_FilePreview_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UI\Viewer\FilePreviewTable */
		static public $dataClass = '\Bitrix\Main\UI\Viewer\FilePreviewTable';
	}
}
namespace Bitrix\Main\UI\Viewer {
	/**
	 * @method static EO_FilePreview_Query query()
	 * @method static EO_FilePreview_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_FilePreview_Result getById($id)
	 * @method static EO_FilePreview_Result getList(array $parameters = array())
	 * @method static EO_FilePreview_Entity getEntity()
	 * @method static \Bitrix\Main\UI\Viewer\EO_FilePreview createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection createCollection()
	 * @method static \Bitrix\Main\UI\Viewer\EO_FilePreview wakeUpObject($row)
	 * @method static \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection wakeUpCollection($rows)
	 */
	class FilePreviewTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_FilePreview_Result exec()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview fetchObject()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection fetchCollection()
	 */
	class EO_FilePreview_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview fetchObject()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection fetchCollection()
	 */
	class EO_FilePreview_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection createCollection()
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview wakeUpObject($row)
	 * @method \Bitrix\Main\UI\Viewer\EO_FilePreview_Collection wakeUpCollection($rows)
	 */
	class EO_FilePreview_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserIndexTable */
namespace Bitrix\Main {
	/**
	 * EO_UserIndex
	 * @see \Bitrix\Main\UserIndexTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Main\EO_UserIndex setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getSearchUserContent()
	 * @method \Bitrix\Main\EO_UserIndex setSearchUserContent(\string|\Bitrix\Main\DB\SqlExpression $searchUserContent)
	 * @method bool hasSearchUserContent()
	 * @method bool isSearchUserContentFilled()
	 * @method bool isSearchUserContentChanged()
	 * @method \string remindActualSearchUserContent()
	 * @method \string requireSearchUserContent()
	 * @method \Bitrix\Main\EO_UserIndex resetSearchUserContent()
	 * @method \Bitrix\Main\EO_UserIndex unsetSearchUserContent()
	 * @method \string fillSearchUserContent()
	 * @method \string getSearchAdminContent()
	 * @method \Bitrix\Main\EO_UserIndex setSearchAdminContent(\string|\Bitrix\Main\DB\SqlExpression $searchAdminContent)
	 * @method bool hasSearchAdminContent()
	 * @method bool isSearchAdminContentFilled()
	 * @method bool isSearchAdminContentChanged()
	 * @method \string remindActualSearchAdminContent()
	 * @method \string requireSearchAdminContent()
	 * @method \Bitrix\Main\EO_UserIndex resetSearchAdminContent()
	 * @method \Bitrix\Main\EO_UserIndex unsetSearchAdminContent()
	 * @method \string fillSearchAdminContent()
	 * @method \string getSearchDepartmentContent()
	 * @method \Bitrix\Main\EO_UserIndex setSearchDepartmentContent(\string|\Bitrix\Main\DB\SqlExpression $searchDepartmentContent)
	 * @method bool hasSearchDepartmentContent()
	 * @method bool isSearchDepartmentContentFilled()
	 * @method bool isSearchDepartmentContentChanged()
	 * @method \string remindActualSearchDepartmentContent()
	 * @method \string requireSearchDepartmentContent()
	 * @method \Bitrix\Main\EO_UserIndex resetSearchDepartmentContent()
	 * @method \Bitrix\Main\EO_UserIndex unsetSearchDepartmentContent()
	 * @method \string fillSearchDepartmentContent()
	 * @method \string getName()
	 * @method \Bitrix\Main\EO_UserIndex setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\EO_UserIndex resetName()
	 * @method \Bitrix\Main\EO_UserIndex unsetName()
	 * @method \string fillName()
	 * @method \string getSecondName()
	 * @method \Bitrix\Main\EO_UserIndex setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Bitrix\Main\EO_UserIndex resetSecondName()
	 * @method \Bitrix\Main\EO_UserIndex unsetSecondName()
	 * @method \string fillSecondName()
	 * @method \string getLastName()
	 * @method \Bitrix\Main\EO_UserIndex setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Bitrix\Main\EO_UserIndex resetLastName()
	 * @method \Bitrix\Main\EO_UserIndex unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getWorkPosition()
	 * @method \Bitrix\Main\EO_UserIndex setWorkPosition(\string|\Bitrix\Main\DB\SqlExpression $workPosition)
	 * @method bool hasWorkPosition()
	 * @method bool isWorkPositionFilled()
	 * @method bool isWorkPositionChanged()
	 * @method \string remindActualWorkPosition()
	 * @method \string requireWorkPosition()
	 * @method \Bitrix\Main\EO_UserIndex resetWorkPosition()
	 * @method \Bitrix\Main\EO_UserIndex unsetWorkPosition()
	 * @method \string fillWorkPosition()
	 * @method \string getUfDepartmentName()
	 * @method \Bitrix\Main\EO_UserIndex setUfDepartmentName(\string|\Bitrix\Main\DB\SqlExpression $ufDepartmentName)
	 * @method bool hasUfDepartmentName()
	 * @method bool isUfDepartmentNameFilled()
	 * @method bool isUfDepartmentNameChanged()
	 * @method \string remindActualUfDepartmentName()
	 * @method \string requireUfDepartmentName()
	 * @method \Bitrix\Main\EO_UserIndex resetUfDepartmentName()
	 * @method \Bitrix\Main\EO_UserIndex unsetUfDepartmentName()
	 * @method \string fillUfDepartmentName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserIndex set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserIndex reset($fieldName)
	 * @method \Bitrix\Main\EO_UserIndex unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserIndex wakeUp($data)
	 */
	class EO_UserIndex {
		/* @var \Bitrix\Main\UserIndexTable */
		static public $dataClass = '\Bitrix\Main\UserIndexTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserIndex_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \string[] getSearchUserContentList()
	 * @method \string[] fillSearchUserContent()
	 * @method \string[] getSearchAdminContentList()
	 * @method \string[] fillSearchAdminContent()
	 * @method \string[] getSearchDepartmentContentList()
	 * @method \string[] fillSearchDepartmentContent()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getWorkPositionList()
	 * @method \string[] fillWorkPosition()
	 * @method \string[] getUfDepartmentNameList()
	 * @method \string[] fillUfDepartmentName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserIndex $object)
	 * @method bool has(\Bitrix\Main\EO_UserIndex $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserIndex getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserIndex[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserIndex $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserIndex_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserIndex current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserIndex_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserIndexTable */
		static public $dataClass = '\Bitrix\Main\UserIndexTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserIndex_Query query()
	 * @method static EO_UserIndex_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserIndex_Result getById($id)
	 * @method static EO_UserIndex_Result getList(array $parameters = array())
	 * @method static EO_UserIndex_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserIndex createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserIndex_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserIndex wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserIndex_Collection wakeUpCollection($rows)
	 */
	class UserIndexTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserIndex_Result exec()
	 * @method \Bitrix\Main\EO_UserIndex fetchObject()
	 * @method \Bitrix\Main\EO_UserIndex_Collection fetchCollection()
	 */
	class EO_UserIndex_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserIndex fetchObject()
	 * @method \Bitrix\Main\EO_UserIndex_Collection fetchCollection()
	 */
	class EO_UserIndex_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserIndex createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserIndex_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserIndex wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserIndex_Collection wakeUpCollection($rows)
	 */
	class EO_UserIndex_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Composite\Debug\Model\LogTable */
namespace Bitrix\Main\Composite\Debug\Model {
	/**
	 * EO_Log
	 * @see \Bitrix\Main\Composite\Debug\Model\LogTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getHost()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setHost(\string|\Bitrix\Main\DB\SqlExpression $host)
	 * @method bool hasHost()
	 * @method bool isHostFilled()
	 * @method bool isHostChanged()
	 * @method \string remindActualHost()
	 * @method \string requireHost()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetHost()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetHost()
	 * @method \string fillHost()
	 * @method \string getUri()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setUri(\string|\Bitrix\Main\DB\SqlExpression $uri)
	 * @method bool hasUri()
	 * @method bool isUriFilled()
	 * @method bool isUriChanged()
	 * @method \string remindActualUri()
	 * @method \string requireUri()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetUri()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetUri()
	 * @method \string fillUri()
	 * @method \string getTitle()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetTitle()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetTitle()
	 * @method \string fillTitle()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetCreated()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \string getType()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetType()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetType()
	 * @method \string fillType()
	 * @method \string getMessage()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetMessage()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetMessage()
	 * @method \string fillMessage()
	 * @method \string getMessageShort()
	 * @method \string remindActualMessageShort()
	 * @method \string requireMessageShort()
	 * @method bool hasMessageShort()
	 * @method bool isMessageShortFilled()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetMessageShort()
	 * @method \string fillMessageShort()
	 * @method \boolean getAjax()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setAjax(\boolean|\Bitrix\Main\DB\SqlExpression $ajax)
	 * @method bool hasAjax()
	 * @method bool isAjaxFilled()
	 * @method bool isAjaxChanged()
	 * @method \boolean remindActualAjax()
	 * @method \boolean requireAjax()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetAjax()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetAjax()
	 * @method \boolean fillAjax()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetUserId()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetUser()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \int getPageId()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log setPageId(\int|\Bitrix\Main\DB\SqlExpression $pageId)
	 * @method bool hasPageId()
	 * @method bool isPageIdFilled()
	 * @method bool isPageIdChanged()
	 * @method \int remindActualPageId()
	 * @method \int requirePageId()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log resetPageId()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unsetPageId()
	 * @method \int fillPageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log set($fieldName, $value)
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log reset($fieldName)
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Composite\Debug\Model\EO_Log wakeUp($data)
	 */
	class EO_Log {
		/* @var \Bitrix\Main\Composite\Debug\Model\LogTable */
		static public $dataClass = '\Bitrix\Main\Composite\Debug\Model\LogTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Composite\Debug\Model {
	/**
	 * EO_Log_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getHostList()
	 * @method \string[] fillHost()
	 * @method \string[] getUriList()
	 * @method \string[] fillUri()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 * @method \string[] getMessageShortList()
	 * @method \string[] fillMessageShort()
	 * @method \boolean[] getAjaxList()
	 * @method \boolean[] fillAjax()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \int[] getPageIdList()
	 * @method \int[] fillPageId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Composite\Debug\Model\EO_Log $object)
	 * @method bool has(\Bitrix\Main\Composite\Debug\Model\EO_Log $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log getByPrimary($primary)
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log[] getAll()
	 * @method bool remove(\Bitrix\Main\Composite\Debug\Model\EO_Log $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Composite\Debug\Model\EO_Log_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Log_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Composite\Debug\Model\LogTable */
		static public $dataClass = '\Bitrix\Main\Composite\Debug\Model\LogTable';
	}
}
namespace Bitrix\Main\Composite\Debug\Model {
	/**
	 * @method static EO_Log_Query query()
	 * @method static EO_Log_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Log_Result getById($id)
	 * @method static EO_Log_Result getList(array $parameters = array())
	 * @method static EO_Log_Entity getEntity()
	 * @method static \Bitrix\Main\Composite\Debug\Model\EO_Log createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Composite\Debug\Model\EO_Log_Collection createCollection()
	 * @method static \Bitrix\Main\Composite\Debug\Model\EO_Log wakeUpObject($row)
	 * @method static \Bitrix\Main\Composite\Debug\Model\EO_Log_Collection wakeUpCollection($rows)
	 */
	class LogTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Log_Result exec()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log fetchObject()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log_Collection fetchCollection()
	 */
	class EO_Log_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log fetchObject()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log_Collection fetchCollection()
	 */
	class EO_Log_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log_Collection createCollection()
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log wakeUpObject($row)
	 * @method \Bitrix\Main\Composite\Debug\Model\EO_Log_Collection wakeUpCollection($rows)
	 */
	class EO_Log_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Composite\Internals\Model\PageTable */
namespace Bitrix\Main\Composite\Internals\Model {
	/**
	 * EO_Page
	 * @see \Bitrix\Main\Composite\Internals\Model\PageTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCacheKey()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setCacheKey(\string|\Bitrix\Main\DB\SqlExpression $cacheKey)
	 * @method bool hasCacheKey()
	 * @method bool isCacheKeyFilled()
	 * @method bool isCacheKeyChanged()
	 * @method \string remindActualCacheKey()
	 * @method \string requireCacheKey()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetCacheKey()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetCacheKey()
	 * @method \string fillCacheKey()
	 * @method \string getHost()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setHost(\string|\Bitrix\Main\DB\SqlExpression $host)
	 * @method bool hasHost()
	 * @method bool isHostFilled()
	 * @method bool isHostChanged()
	 * @method \string remindActualHost()
	 * @method \string requireHost()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetHost()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetHost()
	 * @method \string fillHost()
	 * @method \string getUri()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setUri(\string|\Bitrix\Main\DB\SqlExpression $uri)
	 * @method bool hasUri()
	 * @method bool isUriFilled()
	 * @method bool isUriChanged()
	 * @method \string remindActualUri()
	 * @method \string requireUri()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetUri()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetUri()
	 * @method \string fillUri()
	 * @method \string getTitle()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetTitle()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetTitle()
	 * @method \string fillTitle()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetCreated()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \Bitrix\Main\Type\DateTime getChanged()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setChanged(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $changed)
	 * @method bool hasChanged()
	 * @method bool isChangedFilled()
	 * @method bool isChangedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualChanged()
	 * @method \Bitrix\Main\Type\DateTime requireChanged()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetChanged()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetChanged()
	 * @method \Bitrix\Main\Type\DateTime fillChanged()
	 * @method \Bitrix\Main\Type\DateTime getLastViewed()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setLastViewed(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastViewed)
	 * @method bool hasLastViewed()
	 * @method bool isLastViewedFilled()
	 * @method bool isLastViewedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastViewed()
	 * @method \Bitrix\Main\Type\DateTime requireLastViewed()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetLastViewed()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetLastViewed()
	 * @method \Bitrix\Main\Type\DateTime fillLastViewed()
	 * @method \int getViews()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setViews(\int|\Bitrix\Main\DB\SqlExpression $views)
	 * @method bool hasViews()
	 * @method bool isViewsFilled()
	 * @method bool isViewsChanged()
	 * @method \int remindActualViews()
	 * @method \int requireViews()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetViews()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetViews()
	 * @method \int fillViews()
	 * @method \int getRewrites()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setRewrites(\int|\Bitrix\Main\DB\SqlExpression $rewrites)
	 * @method bool hasRewrites()
	 * @method bool isRewritesFilled()
	 * @method bool isRewritesChanged()
	 * @method \int remindActualRewrites()
	 * @method \int requireRewrites()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetRewrites()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetRewrites()
	 * @method \int fillRewrites()
	 * @method \int getSize()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page setSize(\int|\Bitrix\Main\DB\SqlExpression $size)
	 * @method bool hasSize()
	 * @method bool isSizeFilled()
	 * @method bool isSizeChanged()
	 * @method \int remindActualSize()
	 * @method \int requireSize()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page resetSize()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unsetSize()
	 * @method \int fillSize()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page set($fieldName, $value)
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page reset($fieldName)
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Composite\Internals\Model\EO_Page wakeUp($data)
	 */
	class EO_Page {
		/* @var \Bitrix\Main\Composite\Internals\Model\PageTable */
		static public $dataClass = '\Bitrix\Main\Composite\Internals\Model\PageTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Composite\Internals\Model {
	/**
	 * EO_Page_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCacheKeyList()
	 * @method \string[] fillCacheKey()
	 * @method \string[] getHostList()
	 * @method \string[] fillHost()
	 * @method \string[] getUriList()
	 * @method \string[] fillUri()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \Bitrix\Main\Type\DateTime[] getChangedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillChanged()
	 * @method \Bitrix\Main\Type\DateTime[] getLastViewedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastViewed()
	 * @method \int[] getViewsList()
	 * @method \int[] fillViews()
	 * @method \int[] getRewritesList()
	 * @method \int[] fillRewrites()
	 * @method \int[] getSizeList()
	 * @method \int[] fillSize()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Composite\Internals\Model\EO_Page $object)
	 * @method bool has(\Bitrix\Main\Composite\Internals\Model\EO_Page $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page getByPrimary($primary)
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page[] getAll()
	 * @method bool remove(\Bitrix\Main\Composite\Internals\Model\EO_Page $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Composite\Internals\Model\EO_Page_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Page_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Composite\Internals\Model\PageTable */
		static public $dataClass = '\Bitrix\Main\Composite\Internals\Model\PageTable';
	}
}
namespace Bitrix\Main\Composite\Internals\Model {
	/**
	 * @method static EO_Page_Query query()
	 * @method static EO_Page_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Page_Result getById($id)
	 * @method static EO_Page_Result getList(array $parameters = array())
	 * @method static EO_Page_Entity getEntity()
	 * @method static \Bitrix\Main\Composite\Internals\Model\EO_Page createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Composite\Internals\Model\EO_Page_Collection createCollection()
	 * @method static \Bitrix\Main\Composite\Internals\Model\EO_Page wakeUpObject($row)
	 * @method static \Bitrix\Main\Composite\Internals\Model\EO_Page_Collection wakeUpCollection($rows)
	 */
	class PageTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Page_Result exec()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page fetchObject()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page_Collection fetchCollection()
	 */
	class EO_Page_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page fetchObject()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page_Collection fetchCollection()
	 */
	class EO_Page_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page_Collection createCollection()
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page wakeUpObject($row)
	 * @method \Bitrix\Main\Composite\Internals\Model\EO_Page_Collection wakeUpCollection($rows)
	 */
	class EO_Page_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserFieldTable */
namespace Bitrix\Main {
	/**
	 * EO_UserField
	 * @see \Bitrix\Main\UserFieldTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\EO_UserField setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getEntityId()
	 * @method \Bitrix\Main\EO_UserField setEntityId(\string|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \string remindActualEntityId()
	 * @method \string requireEntityId()
	 * @method \Bitrix\Main\EO_UserField resetEntityId()
	 * @method \Bitrix\Main\EO_UserField unsetEntityId()
	 * @method \string fillEntityId()
	 * @method \string getFieldName()
	 * @method \Bitrix\Main\EO_UserField setFieldName(\string|\Bitrix\Main\DB\SqlExpression $fieldName)
	 * @method bool hasFieldName()
	 * @method bool isFieldNameFilled()
	 * @method bool isFieldNameChanged()
	 * @method \string remindActualFieldName()
	 * @method \string requireFieldName()
	 * @method \Bitrix\Main\EO_UserField resetFieldName()
	 * @method \Bitrix\Main\EO_UserField unsetFieldName()
	 * @method \string fillFieldName()
	 * @method \string getUserTypeId()
	 * @method \Bitrix\Main\EO_UserField setUserTypeId(\string|\Bitrix\Main\DB\SqlExpression $userTypeId)
	 * @method bool hasUserTypeId()
	 * @method bool isUserTypeIdFilled()
	 * @method bool isUserTypeIdChanged()
	 * @method \string remindActualUserTypeId()
	 * @method \string requireUserTypeId()
	 * @method \Bitrix\Main\EO_UserField resetUserTypeId()
	 * @method \Bitrix\Main\EO_UserField unsetUserTypeId()
	 * @method \string fillUserTypeId()
	 * @method \string getXmlId()
	 * @method \Bitrix\Main\EO_UserField setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Main\EO_UserField resetXmlId()
	 * @method \Bitrix\Main\EO_UserField unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \int getSort()
	 * @method \Bitrix\Main\EO_UserField setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Main\EO_UserField resetSort()
	 * @method \Bitrix\Main\EO_UserField unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getMultiple()
	 * @method \Bitrix\Main\EO_UserField setMultiple(\boolean|\Bitrix\Main\DB\SqlExpression $multiple)
	 * @method bool hasMultiple()
	 * @method bool isMultipleFilled()
	 * @method bool isMultipleChanged()
	 * @method \boolean remindActualMultiple()
	 * @method \boolean requireMultiple()
	 * @method \Bitrix\Main\EO_UserField resetMultiple()
	 * @method \Bitrix\Main\EO_UserField unsetMultiple()
	 * @method \boolean fillMultiple()
	 * @method \boolean getMandatory()
	 * @method \Bitrix\Main\EO_UserField setMandatory(\boolean|\Bitrix\Main\DB\SqlExpression $mandatory)
	 * @method bool hasMandatory()
	 * @method bool isMandatoryFilled()
	 * @method bool isMandatoryChanged()
	 * @method \boolean remindActualMandatory()
	 * @method \boolean requireMandatory()
	 * @method \Bitrix\Main\EO_UserField resetMandatory()
	 * @method \Bitrix\Main\EO_UserField unsetMandatory()
	 * @method \boolean fillMandatory()
	 * @method \boolean getShowFilter()
	 * @method \Bitrix\Main\EO_UserField setShowFilter(\boolean|\Bitrix\Main\DB\SqlExpression $showFilter)
	 * @method bool hasShowFilter()
	 * @method bool isShowFilterFilled()
	 * @method bool isShowFilterChanged()
	 * @method \boolean remindActualShowFilter()
	 * @method \boolean requireShowFilter()
	 * @method \Bitrix\Main\EO_UserField resetShowFilter()
	 * @method \Bitrix\Main\EO_UserField unsetShowFilter()
	 * @method \boolean fillShowFilter()
	 * @method \boolean getShowInList()
	 * @method \Bitrix\Main\EO_UserField setShowInList(\boolean|\Bitrix\Main\DB\SqlExpression $showInList)
	 * @method bool hasShowInList()
	 * @method bool isShowInListFilled()
	 * @method bool isShowInListChanged()
	 * @method \boolean remindActualShowInList()
	 * @method \boolean requireShowInList()
	 * @method \Bitrix\Main\EO_UserField resetShowInList()
	 * @method \Bitrix\Main\EO_UserField unsetShowInList()
	 * @method \boolean fillShowInList()
	 * @method \boolean getEditInList()
	 * @method \Bitrix\Main\EO_UserField setEditInList(\boolean|\Bitrix\Main\DB\SqlExpression $editInList)
	 * @method bool hasEditInList()
	 * @method bool isEditInListFilled()
	 * @method bool isEditInListChanged()
	 * @method \boolean remindActualEditInList()
	 * @method \boolean requireEditInList()
	 * @method \Bitrix\Main\EO_UserField resetEditInList()
	 * @method \Bitrix\Main\EO_UserField unsetEditInList()
	 * @method \boolean fillEditInList()
	 * @method \boolean getIsSearchable()
	 * @method \Bitrix\Main\EO_UserField setIsSearchable(\boolean|\Bitrix\Main\DB\SqlExpression $isSearchable)
	 * @method bool hasIsSearchable()
	 * @method bool isIsSearchableFilled()
	 * @method bool isIsSearchableChanged()
	 * @method \boolean remindActualIsSearchable()
	 * @method \boolean requireIsSearchable()
	 * @method \Bitrix\Main\EO_UserField resetIsSearchable()
	 * @method \Bitrix\Main\EO_UserField unsetIsSearchable()
	 * @method \boolean fillIsSearchable()
	 * @method \string getSettings()
	 * @method \Bitrix\Main\EO_UserField setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Main\EO_UserField resetSettings()
	 * @method \Bitrix\Main\EO_UserField unsetSettings()
	 * @method \string fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\EO_UserField set($fieldName, $value)
	 * @method \Bitrix\Main\EO_UserField reset($fieldName)
	 * @method \Bitrix\Main\EO_UserField unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\EO_UserField wakeUp($data)
	 */
	class EO_UserField {
		/* @var \Bitrix\Main\UserFieldTable */
		static public $dataClass = '\Bitrix\Main\UserFieldTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main {
	/**
	 * EO_UserField_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getEntityIdList()
	 * @method \string[] fillEntityId()
	 * @method \string[] getFieldNameList()
	 * @method \string[] fillFieldName()
	 * @method \string[] getUserTypeIdList()
	 * @method \string[] fillUserTypeId()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getMultipleList()
	 * @method \boolean[] fillMultiple()
	 * @method \boolean[] getMandatoryList()
	 * @method \boolean[] fillMandatory()
	 * @method \boolean[] getShowFilterList()
	 * @method \boolean[] fillShowFilter()
	 * @method \boolean[] getShowInListList()
	 * @method \boolean[] fillShowInList()
	 * @method \boolean[] getEditInListList()
	 * @method \boolean[] fillEditInList()
	 * @method \boolean[] getIsSearchableList()
	 * @method \boolean[] fillIsSearchable()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\EO_UserField $object)
	 * @method bool has(\Bitrix\Main\EO_UserField $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserField getByPrimary($primary)
	 * @method \Bitrix\Main\EO_UserField[] getAll()
	 * @method bool remove(\Bitrix\Main\EO_UserField $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\EO_UserField_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\EO_UserField current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserField_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserFieldTable */
		static public $dataClass = '\Bitrix\Main\UserFieldTable';
	}
}
namespace Bitrix\Main {
	/**
	 * @method static EO_UserField_Query query()
	 * @method static EO_UserField_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserField_Result getById($id)
	 * @method static EO_UserField_Result getList(array $parameters = array())
	 * @method static EO_UserField_Entity getEntity()
	 * @method static \Bitrix\Main\EO_UserField createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\EO_UserField_Collection createCollection()
	 * @method static \Bitrix\Main\EO_UserField wakeUpObject($row)
	 * @method static \Bitrix\Main\EO_UserField_Collection wakeUpCollection($rows)
	 */
	class UserFieldTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_UserField_Result exec()
	 * @method \Bitrix\Main\EO_UserField fetchObject()
	 * @method \Bitrix\Main\EO_UserField_Collection fetchCollection()
	 */
	class EO_UserField_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\EO_UserField fetchObject()
	 * @method \Bitrix\Main\EO_UserField_Collection fetchCollection()
	 */
	class EO_UserField_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\EO_UserField createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\EO_UserField_Collection createCollection()
	 * @method \Bitrix\Main\EO_UserField wakeUpObject($row)
	 * @method \Bitrix\Main\EO_UserField_Collection wakeUpCollection($rows)
	 */
	class EO_UserField_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserConsent\Internals\ConsentTable */
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * EO_Consent
	 * @see \Bitrix\Main\UserConsent\Internals\ConsentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent resetDateInsert()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \int getAgreementId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setAgreementId(\int|\Bitrix\Main\DB\SqlExpression $agreementId)
	 * @method bool hasAgreementId()
	 * @method bool isAgreementIdFilled()
	 * @method bool isAgreementIdChanged()
	 * @method \int remindActualAgreementId()
	 * @method \int requireAgreementId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent resetAgreementId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unsetAgreementId()
	 * @method \int fillAgreementId()
	 * @method \int getUserId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent resetUserId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unsetUserId()
	 * @method \int fillUserId()
	 * @method \string getIp()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setIp(\string|\Bitrix\Main\DB\SqlExpression $ip)
	 * @method bool hasIp()
	 * @method bool isIpFilled()
	 * @method bool isIpChanged()
	 * @method \string remindActualIp()
	 * @method \string requireIp()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent resetIp()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unsetIp()
	 * @method \string fillIp()
	 * @method \string getUrl()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setUrl(\string|\Bitrix\Main\DB\SqlExpression $url)
	 * @method bool hasUrl()
	 * @method bool isUrlFilled()
	 * @method bool isUrlChanged()
	 * @method \string remindActualUrl()
	 * @method \string requireUrl()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent resetUrl()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unsetUrl()
	 * @method \string fillUrl()
	 * @method \string getOriginId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setOriginId(\string|\Bitrix\Main\DB\SqlExpression $originId)
	 * @method bool hasOriginId()
	 * @method bool isOriginIdFilled()
	 * @method bool isOriginIdChanged()
	 * @method \string remindActualOriginId()
	 * @method \string requireOriginId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent resetOriginId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unsetOriginId()
	 * @method \string fillOriginId()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string remindActualOriginatorId()
	 * @method \string requireOriginatorId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent resetOriginatorId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unsetOriginatorId()
	 * @method \string fillOriginatorId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent resetUser()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent set($fieldName, $value)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent reset($fieldName)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Consent wakeUp($data)
	 */
	class EO_Consent {
		/* @var \Bitrix\Main\UserConsent\Internals\ConsentTable */
		static public $dataClass = '\Bitrix\Main\UserConsent\Internals\ConsentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * EO_Consent_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \int[] getAgreementIdList()
	 * @method \int[] fillAgreementId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \string[] getIpList()
	 * @method \string[] fillIp()
	 * @method \string[] getUrlList()
	 * @method \string[] fillUrl()
	 * @method \string[] getOriginIdList()
	 * @method \string[] fillOriginId()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] fillOriginatorId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\UserConsent\Internals\EO_Consent $object)
	 * @method bool has(\Bitrix\Main\UserConsent\Internals\EO_Consent $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent getByPrimary($primary)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent[] getAll()
	 * @method bool remove(\Bitrix\Main\UserConsent\Internals\EO_Consent $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Consent_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Consent_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserConsent\Internals\ConsentTable */
		static public $dataClass = '\Bitrix\Main\UserConsent\Internals\ConsentTable';
	}
}
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * @method static EO_Consent_Query query()
	 * @method static EO_Consent_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Consent_Result getById($id)
	 * @method static EO_Consent_Result getList(array $parameters = array())
	 * @method static EO_Consent_Entity getEntity()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Consent createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Consent_Collection createCollection()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Consent wakeUpObject($row)
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Consent_Collection wakeUpCollection($rows)
	 */
	class ConsentTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Consent_Result exec()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent fetchObject()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent_Collection fetchCollection()
	 */
	class EO_Consent_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent fetchObject()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent_Collection fetchCollection()
	 */
	class EO_Consent_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent_Collection createCollection()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent wakeUpObject($row)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Consent_Collection wakeUpCollection($rows)
	 */
	class EO_Consent_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserConsent\Internals\FieldTable */
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * EO_Field
	 * @see \Bitrix\Main\UserConsent\Internals\FieldTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getAgreementId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field setAgreementId(\int|\Bitrix\Main\DB\SqlExpression $agreementId)
	 * @method bool hasAgreementId()
	 * @method bool isAgreementIdFilled()
	 * @method bool isAgreementIdChanged()
	 * @method \int remindActualAgreementId()
	 * @method \int requireAgreementId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field resetAgreementId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field unsetAgreementId()
	 * @method \int fillAgreementId()
	 * @method \string getCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field resetCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field unsetCode()
	 * @method \string fillCode()
	 * @method \string getValue()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field resetValue()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field set($fieldName, $value)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field reset($fieldName)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Field wakeUp($data)
	 */
	class EO_Field {
		/* @var \Bitrix\Main\UserConsent\Internals\FieldTable */
		static public $dataClass = '\Bitrix\Main\UserConsent\Internals\FieldTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * EO_Field_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getAgreementIdList()
	 * @method \int[] fillAgreementId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\UserConsent\Internals\EO_Field $object)
	 * @method bool has(\Bitrix\Main\UserConsent\Internals\EO_Field $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field getByPrimary($primary)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field[] getAll()
	 * @method bool remove(\Bitrix\Main\UserConsent\Internals\EO_Field $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Field_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Field_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserConsent\Internals\FieldTable */
		static public $dataClass = '\Bitrix\Main\UserConsent\Internals\FieldTable';
	}
}
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * @method static EO_Field_Query query()
	 * @method static EO_Field_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Field_Result getById($id)
	 * @method static EO_Field_Result getList(array $parameters = array())
	 * @method static EO_Field_Entity getEntity()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Field createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Field_Collection createCollection()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Field wakeUpObject($row)
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Field_Collection wakeUpCollection($rows)
	 */
	class FieldTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Field_Result exec()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field fetchObject()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field_Collection fetchCollection()
	 */
	class EO_Field_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field fetchObject()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field_Collection fetchCollection()
	 */
	class EO_Field_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field_Collection createCollection()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field wakeUpObject($row)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Field_Collection wakeUpCollection($rows)
	 */
	class EO_Field_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\UserConsent\Internals\AgreementTable */
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * EO_Agreement
	 * @see \Bitrix\Main\UserConsent\Internals\AgreementTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetCode()
	 * @method \string fillCode()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetDateInsert()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \boolean getActive()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetActive()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getName()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetName()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetName()
	 * @method \string fillName()
	 * @method \string getType()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetType()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetType()
	 * @method \string fillType()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetLanguageId()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \string getDataProvider()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setDataProvider(\string|\Bitrix\Main\DB\SqlExpression $dataProvider)
	 * @method bool hasDataProvider()
	 * @method bool isDataProviderFilled()
	 * @method bool isDataProviderChanged()
	 * @method \string remindActualDataProvider()
	 * @method \string requireDataProvider()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetDataProvider()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetDataProvider()
	 * @method \string fillDataProvider()
	 * @method \string getAgreementText()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setAgreementText(\string|\Bitrix\Main\DB\SqlExpression $agreementText)
	 * @method bool hasAgreementText()
	 * @method bool isAgreementTextFilled()
	 * @method bool isAgreementTextChanged()
	 * @method \string remindActualAgreementText()
	 * @method \string requireAgreementText()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetAgreementText()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetAgreementText()
	 * @method \string fillAgreementText()
	 * @method \string getLabelText()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setLabelText(\string|\Bitrix\Main\DB\SqlExpression $labelText)
	 * @method bool hasLabelText()
	 * @method bool isLabelTextFilled()
	 * @method bool isLabelTextChanged()
	 * @method \string remindActualLabelText()
	 * @method \string requireLabelText()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetLabelText()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetLabelText()
	 * @method \string fillLabelText()
	 * @method \string getSecurityCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement setSecurityCode(\string|\Bitrix\Main\DB\SqlExpression $securityCode)
	 * @method bool hasSecurityCode()
	 * @method bool isSecurityCodeFilled()
	 * @method bool isSecurityCodeChanged()
	 * @method \string remindActualSecurityCode()
	 * @method \string requireSecurityCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement resetSecurityCode()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unsetSecurityCode()
	 * @method \string fillSecurityCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement set($fieldName, $value)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement reset($fieldName)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Agreement wakeUp($data)
	 */
	class EO_Agreement {
		/* @var \Bitrix\Main\UserConsent\Internals\AgreementTable */
		static public $dataClass = '\Bitrix\Main\UserConsent\Internals\AgreementTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * EO_Agreement_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \string[] getDataProviderList()
	 * @method \string[] fillDataProvider()
	 * @method \string[] getAgreementTextList()
	 * @method \string[] fillAgreementText()
	 * @method \string[] getLabelTextList()
	 * @method \string[] fillLabelText()
	 * @method \string[] getSecurityCodeList()
	 * @method \string[] fillSecurityCode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\UserConsent\Internals\EO_Agreement $object)
	 * @method bool has(\Bitrix\Main\UserConsent\Internals\EO_Agreement $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement getByPrimary($primary)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement[] getAll()
	 * @method bool remove(\Bitrix\Main\UserConsent\Internals\EO_Agreement $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Agreement_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Agreement_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\UserConsent\Internals\AgreementTable */
		static public $dataClass = '\Bitrix\Main\UserConsent\Internals\AgreementTable';
	}
}
namespace Bitrix\Main\UserConsent\Internals {
	/**
	 * @method static EO_Agreement_Query query()
	 * @method static EO_Agreement_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Agreement_Result getById($id)
	 * @method static EO_Agreement_Result getList(array $parameters = array())
	 * @method static EO_Agreement_Entity getEntity()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Agreement createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Agreement_Collection createCollection()
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Agreement wakeUpObject($row)
	 * @method static \Bitrix\Main\UserConsent\Internals\EO_Agreement_Collection wakeUpCollection($rows)
	 */
	class AgreementTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Agreement_Result exec()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement fetchObject()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement_Collection fetchCollection()
	 */
	class EO_Agreement_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement fetchObject()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement_Collection fetchCollection()
	 */
	class EO_Agreement_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement_Collection createCollection()
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement wakeUpObject($row)
	 * @method \Bitrix\Main\UserConsent\Internals\EO_Agreement_Collection wakeUpCollection($rows)
	 */
	class EO_Agreement_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Main\Update\VersionHistoryTable */
namespace Bitrix\Main\Update {
	/**
	 * EO_VersionHistory
	 * @see \Bitrix\Main\Update\VersionHistoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Main\Update\EO_VersionHistory setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Main\Update\EO_VersionHistory setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Main\Update\EO_VersionHistory resetDateInsert()
	 * @method \Bitrix\Main\Update\EO_VersionHistory unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \string getVersions()
	 * @method \Bitrix\Main\Update\EO_VersionHistory setVersions(\string|\Bitrix\Main\DB\SqlExpression $versions)
	 * @method bool hasVersions()
	 * @method bool isVersionsFilled()
	 * @method bool isVersionsChanged()
	 * @method \string remindActualVersions()
	 * @method \string requireVersions()
	 * @method \Bitrix\Main\Update\EO_VersionHistory resetVersions()
	 * @method \Bitrix\Main\Update\EO_VersionHistory unsetVersions()
	 * @method \string fillVersions()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Main\Update\EO_VersionHistory set($fieldName, $value)
	 * @method \Bitrix\Main\Update\EO_VersionHistory reset($fieldName)
	 * @method \Bitrix\Main\Update\EO_VersionHistory unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Main\Update\EO_VersionHistory wakeUp($data)
	 */
	class EO_VersionHistory {
		/* @var \Bitrix\Main\Update\VersionHistoryTable */
		static public $dataClass = '\Bitrix\Main\Update\VersionHistoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Main\Update {
	/**
	 * EO_VersionHistory_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \string[] getVersionsList()
	 * @method \string[] fillVersions()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Main\Update\EO_VersionHistory $object)
	 * @method bool has(\Bitrix\Main\Update\EO_VersionHistory $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Main\Update\EO_VersionHistory getByPrimary($primary)
	 * @method \Bitrix\Main\Update\EO_VersionHistory[] getAll()
	 * @method bool remove(\Bitrix\Main\Update\EO_VersionHistory $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Main\Update\EO_VersionHistory_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Main\Update\EO_VersionHistory current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_VersionHistory_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Main\Update\VersionHistoryTable */
		static public $dataClass = '\Bitrix\Main\Update\VersionHistoryTable';
	}
}
namespace Bitrix\Main\Update {
	/**
	 * @method static EO_VersionHistory_Query query()
	 * @method static EO_VersionHistory_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_VersionHistory_Result getById($id)
	 * @method static EO_VersionHistory_Result getList(array $parameters = array())
	 * @method static EO_VersionHistory_Entity getEntity()
	 * @method static \Bitrix\Main\Update\EO_VersionHistory createObject($setDefaultValues = true)
	 * @method static \Bitrix\Main\Update\EO_VersionHistory_Collection createCollection()
	 * @method static \Bitrix\Main\Update\EO_VersionHistory wakeUpObject($row)
	 * @method static \Bitrix\Main\Update\EO_VersionHistory_Collection wakeUpCollection($rows)
	 */
	class VersionHistoryTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_VersionHistory_Result exec()
	 * @method \Bitrix\Main\Update\EO_VersionHistory fetchObject()
	 * @method \Bitrix\Main\Update\EO_VersionHistory_Collection fetchCollection()
	 */
	class EO_VersionHistory_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Main\Update\EO_VersionHistory fetchObject()
	 * @method \Bitrix\Main\Update\EO_VersionHistory_Collection fetchCollection()
	 */
	class EO_VersionHistory_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Main\Update\EO_VersionHistory createObject($setDefaultValues = true)
	 * @method \Bitrix\Main\Update\EO_VersionHistory_Collection createCollection()
	 * @method \Bitrix\Main\Update\EO_VersionHistory wakeUpObject($row)
	 * @method \Bitrix\Main\Update\EO_VersionHistory_Collection wakeUpCollection($rows)
	 */
	class EO_VersionHistory_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\SectionElementTable */
namespace Bitrix\Iblock {
	/**
	 * EO_SectionElement
	 * @see \Bitrix\Iblock\SectionElementTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockSectionId()
	 * @method \Bitrix\Iblock\EO_SectionElement setIblockSectionId(\int|\Bitrix\Main\DB\SqlExpression $iblockSectionId)
	 * @method bool hasIblockSectionId()
	 * @method bool isIblockSectionIdFilled()
	 * @method bool isIblockSectionIdChanged()
	 * @method \int getIblockElementId()
	 * @method \Bitrix\Iblock\EO_SectionElement setIblockElementId(\int|\Bitrix\Main\DB\SqlExpression $iblockElementId)
	 * @method bool hasIblockElementId()
	 * @method bool isIblockElementIdFilled()
	 * @method bool isIblockElementIdChanged()
	 * @method \int getAdditionalPropertyId()
	 * @method \Bitrix\Iblock\EO_SectionElement setAdditionalPropertyId(\int|\Bitrix\Main\DB\SqlExpression $additionalPropertyId)
	 * @method bool hasAdditionalPropertyId()
	 * @method bool isAdditionalPropertyIdFilled()
	 * @method bool isAdditionalPropertyIdChanged()
	 * @method \int remindActualAdditionalPropertyId()
	 * @method \int requireAdditionalPropertyId()
	 * @method \Bitrix\Iblock\EO_SectionElement resetAdditionalPropertyId()
	 * @method \Bitrix\Iblock\EO_SectionElement unsetAdditionalPropertyId()
	 * @method \int fillAdditionalPropertyId()
	 * @method \Bitrix\Iblock\EO_Section getIblockSection()
	 * @method \Bitrix\Iblock\EO_Section remindActualIblockSection()
	 * @method \Bitrix\Iblock\EO_Section requireIblockSection()
	 * @method \Bitrix\Iblock\EO_SectionElement setIblockSection(\Bitrix\Iblock\EO_Section $object)
	 * @method \Bitrix\Iblock\EO_SectionElement resetIblockSection()
	 * @method \Bitrix\Iblock\EO_SectionElement unsetIblockSection()
	 * @method bool hasIblockSection()
	 * @method bool isIblockSectionFilled()
	 * @method bool isIblockSectionChanged()
	 * @method \Bitrix\Iblock\EO_Section fillIblockSection()
	 * @method \Bitrix\Iblock\EO_Element getIblockElement()
	 * @method \Bitrix\Iblock\EO_Element remindActualIblockElement()
	 * @method \Bitrix\Iblock\EO_Element requireIblockElement()
	 * @method \Bitrix\Iblock\EO_SectionElement setIblockElement(\Bitrix\Iblock\EO_Element $object)
	 * @method \Bitrix\Iblock\EO_SectionElement resetIblockElement()
	 * @method \Bitrix\Iblock\EO_SectionElement unsetIblockElement()
	 * @method bool hasIblockElement()
	 * @method bool isIblockElementFilled()
	 * @method bool isIblockElementChanged()
	 * @method \Bitrix\Iblock\EO_Element fillIblockElement()
	 * @method \Bitrix\Iblock\ORM\EO_CommonElement getRegularElement()
	 * @method \Bitrix\Iblock\ORM\EO_CommonElement remindActualRegularElement()
	 * @method \Bitrix\Iblock\ORM\EO_CommonElement requireRegularElement()
	 * @method \Bitrix\Iblock\EO_SectionElement setRegularElement(\Bitrix\Iblock\ORM\EO_CommonElement $object)
	 * @method \Bitrix\Iblock\EO_SectionElement resetRegularElement()
	 * @method \Bitrix\Iblock\EO_SectionElement unsetRegularElement()
	 * @method bool hasRegularElement()
	 * @method bool isRegularElementFilled()
	 * @method bool isRegularElementChanged()
	 * @method \Bitrix\Iblock\ORM\EO_CommonElement fillRegularElement()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_SectionElement set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_SectionElement reset($fieldName)
	 * @method \Bitrix\Iblock\EO_SectionElement unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_SectionElement wakeUp($data)
	 */
	class EO_SectionElement {
		/* @var \Bitrix\Iblock\SectionElementTable */
		static public $dataClass = '\Bitrix\Iblock\SectionElementTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_SectionElement_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockSectionIdList()
	 * @method \int[] getIblockElementIdList()
	 * @method \int[] getAdditionalPropertyIdList()
	 * @method \int[] fillAdditionalPropertyId()
	 * @method \Bitrix\Iblock\EO_Section[] getIblockSectionList()
	 * @method \Bitrix\Iblock\EO_SectionElement_Collection getIblockSectionCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillIblockSection()
	 * @method \Bitrix\Iblock\EO_Element[] getIblockElementList()
	 * @method \Bitrix\Iblock\EO_SectionElement_Collection getIblockElementCollection()
	 * @method \Bitrix\Iblock\EO_Element_Collection fillIblockElement()
	 * @method \Bitrix\Iblock\ORM\EO_CommonElement[] getRegularElementList()
	 * @method \Bitrix\Iblock\EO_SectionElement_Collection getRegularElementCollection()
	 * @method \Bitrix\Iblock\ORM\EO_CommonElement_Collection fillRegularElement()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_SectionElement $object)
	 * @method bool has(\Bitrix\Iblock\EO_SectionElement $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_SectionElement getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_SectionElement[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_SectionElement $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_SectionElement_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_SectionElement current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SectionElement_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\SectionElementTable */
		static public $dataClass = '\Bitrix\Iblock\SectionElementTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_SectionElement_Query query()
	 * @method static EO_SectionElement_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SectionElement_Result getById($id)
	 * @method static EO_SectionElement_Result getList(array $parameters = array())
	 * @method static EO_SectionElement_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_SectionElement createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_SectionElement_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_SectionElement wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_SectionElement_Collection wakeUpCollection($rows)
	 */
	class SectionElementTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_SectionElement_Result exec()
	 * @method \Bitrix\Iblock\EO_SectionElement fetchObject()
	 * @method \Bitrix\Iblock\EO_SectionElement_Collection fetchCollection()
	 */
	class EO_SectionElement_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_SectionElement fetchObject()
	 * @method \Bitrix\Iblock\EO_SectionElement_Collection fetchCollection()
	 */
	class EO_SectionElement_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_SectionElement createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_SectionElement_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_SectionElement wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_SectionElement_Collection wakeUpCollection($rows)
	 */
	class EO_SectionElement_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\PropertyTable */
namespace Bitrix\Iblock {
	/**
	 * Property
	 * @see \Bitrix\Iblock\PropertyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\Property setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Iblock\Property setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Iblock\Property resetTimestampX()
	 * @method \Bitrix\Iblock\Property unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\Property setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int remindActualIblockId()
	 * @method \int requireIblockId()
	 * @method \Bitrix\Iblock\Property resetIblockId()
	 * @method \Bitrix\Iblock\Property unsetIblockId()
	 * @method \int fillIblockId()
	 * @method \string getName()
	 * @method \Bitrix\Iblock\Property setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Iblock\Property resetName()
	 * @method \Bitrix\Iblock\Property unsetName()
	 * @method \string fillName()
	 * @method \boolean getActive()
	 * @method \Bitrix\Iblock\Property setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Iblock\Property resetActive()
	 * @method \Bitrix\Iblock\Property unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\Property setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\Property resetSort()
	 * @method \Bitrix\Iblock\Property unsetSort()
	 * @method \int fillSort()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\Property setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Iblock\Property resetCode()
	 * @method \Bitrix\Iblock\Property unsetCode()
	 * @method \string fillCode()
	 * @method \string getDefaultValue()
	 * @method \Bitrix\Iblock\Property setDefaultValue(\string|\Bitrix\Main\DB\SqlExpression $defaultValue)
	 * @method bool hasDefaultValue()
	 * @method bool isDefaultValueFilled()
	 * @method bool isDefaultValueChanged()
	 * @method \string remindActualDefaultValue()
	 * @method \string requireDefaultValue()
	 * @method \Bitrix\Iblock\Property resetDefaultValue()
	 * @method \Bitrix\Iblock\Property unsetDefaultValue()
	 * @method \string fillDefaultValue()
	 * @method \string getPropertyType()
	 * @method \Bitrix\Iblock\Property setPropertyType(\string|\Bitrix\Main\DB\SqlExpression $propertyType)
	 * @method bool hasPropertyType()
	 * @method bool isPropertyTypeFilled()
	 * @method bool isPropertyTypeChanged()
	 * @method \string remindActualPropertyType()
	 * @method \string requirePropertyType()
	 * @method \Bitrix\Iblock\Property resetPropertyType()
	 * @method \Bitrix\Iblock\Property unsetPropertyType()
	 * @method \string fillPropertyType()
	 * @method \int getRowCount()
	 * @method \Bitrix\Iblock\Property setRowCount(\int|\Bitrix\Main\DB\SqlExpression $rowCount)
	 * @method bool hasRowCount()
	 * @method bool isRowCountFilled()
	 * @method bool isRowCountChanged()
	 * @method \int remindActualRowCount()
	 * @method \int requireRowCount()
	 * @method \Bitrix\Iblock\Property resetRowCount()
	 * @method \Bitrix\Iblock\Property unsetRowCount()
	 * @method \int fillRowCount()
	 * @method \int getColCount()
	 * @method \Bitrix\Iblock\Property setColCount(\int|\Bitrix\Main\DB\SqlExpression $colCount)
	 * @method bool hasColCount()
	 * @method bool isColCountFilled()
	 * @method bool isColCountChanged()
	 * @method \int remindActualColCount()
	 * @method \int requireColCount()
	 * @method \Bitrix\Iblock\Property resetColCount()
	 * @method \Bitrix\Iblock\Property unsetColCount()
	 * @method \int fillColCount()
	 * @method \string getListType()
	 * @method \Bitrix\Iblock\Property setListType(\string|\Bitrix\Main\DB\SqlExpression $listType)
	 * @method bool hasListType()
	 * @method bool isListTypeFilled()
	 * @method bool isListTypeChanged()
	 * @method \string remindActualListType()
	 * @method \string requireListType()
	 * @method \Bitrix\Iblock\Property resetListType()
	 * @method \Bitrix\Iblock\Property unsetListType()
	 * @method \string fillListType()
	 * @method \boolean getMultiple()
	 * @method \Bitrix\Iblock\Property setMultiple(\boolean|\Bitrix\Main\DB\SqlExpression $multiple)
	 * @method bool hasMultiple()
	 * @method bool isMultipleFilled()
	 * @method bool isMultipleChanged()
	 * @method \boolean remindActualMultiple()
	 * @method \boolean requireMultiple()
	 * @method \Bitrix\Iblock\Property resetMultiple()
	 * @method \Bitrix\Iblock\Property unsetMultiple()
	 * @method \boolean fillMultiple()
	 * @method \string getXmlId()
	 * @method \Bitrix\Iblock\Property setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Iblock\Property resetXmlId()
	 * @method \Bitrix\Iblock\Property unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getFileType()
	 * @method \Bitrix\Iblock\Property setFileType(\string|\Bitrix\Main\DB\SqlExpression $fileType)
	 * @method bool hasFileType()
	 * @method bool isFileTypeFilled()
	 * @method bool isFileTypeChanged()
	 * @method \string remindActualFileType()
	 * @method \string requireFileType()
	 * @method \Bitrix\Iblock\Property resetFileType()
	 * @method \Bitrix\Iblock\Property unsetFileType()
	 * @method \string fillFileType()
	 * @method \int getMultipleCnt()
	 * @method \Bitrix\Iblock\Property setMultipleCnt(\int|\Bitrix\Main\DB\SqlExpression $multipleCnt)
	 * @method bool hasMultipleCnt()
	 * @method bool isMultipleCntFilled()
	 * @method bool isMultipleCntChanged()
	 * @method \int remindActualMultipleCnt()
	 * @method \int requireMultipleCnt()
	 * @method \Bitrix\Iblock\Property resetMultipleCnt()
	 * @method \Bitrix\Iblock\Property unsetMultipleCnt()
	 * @method \int fillMultipleCnt()
	 * @method \string getTmpId()
	 * @method \Bitrix\Iblock\Property setTmpId(\string|\Bitrix\Main\DB\SqlExpression $tmpId)
	 * @method bool hasTmpId()
	 * @method bool isTmpIdFilled()
	 * @method bool isTmpIdChanged()
	 * @method \string remindActualTmpId()
	 * @method \string requireTmpId()
	 * @method \Bitrix\Iblock\Property resetTmpId()
	 * @method \Bitrix\Iblock\Property unsetTmpId()
	 * @method \string fillTmpId()
	 * @method \int getLinkIblockId()
	 * @method \Bitrix\Iblock\Property setLinkIblockId(\int|\Bitrix\Main\DB\SqlExpression $linkIblockId)
	 * @method bool hasLinkIblockId()
	 * @method bool isLinkIblockIdFilled()
	 * @method bool isLinkIblockIdChanged()
	 * @method \int remindActualLinkIblockId()
	 * @method \int requireLinkIblockId()
	 * @method \Bitrix\Iblock\Property resetLinkIblockId()
	 * @method \Bitrix\Iblock\Property unsetLinkIblockId()
	 * @method \int fillLinkIblockId()
	 * @method \boolean getWithDescription()
	 * @method \Bitrix\Iblock\Property setWithDescription(\boolean|\Bitrix\Main\DB\SqlExpression $withDescription)
	 * @method bool hasWithDescription()
	 * @method bool isWithDescriptionFilled()
	 * @method bool isWithDescriptionChanged()
	 * @method \boolean remindActualWithDescription()
	 * @method \boolean requireWithDescription()
	 * @method \Bitrix\Iblock\Property resetWithDescription()
	 * @method \Bitrix\Iblock\Property unsetWithDescription()
	 * @method \boolean fillWithDescription()
	 * @method \boolean getSearchable()
	 * @method \Bitrix\Iblock\Property setSearchable(\boolean|\Bitrix\Main\DB\SqlExpression $searchable)
	 * @method bool hasSearchable()
	 * @method bool isSearchableFilled()
	 * @method bool isSearchableChanged()
	 * @method \boolean remindActualSearchable()
	 * @method \boolean requireSearchable()
	 * @method \Bitrix\Iblock\Property resetSearchable()
	 * @method \Bitrix\Iblock\Property unsetSearchable()
	 * @method \boolean fillSearchable()
	 * @method \boolean getFiltrable()
	 * @method \Bitrix\Iblock\Property setFiltrable(\boolean|\Bitrix\Main\DB\SqlExpression $filtrable)
	 * @method bool hasFiltrable()
	 * @method bool isFiltrableFilled()
	 * @method bool isFiltrableChanged()
	 * @method \boolean remindActualFiltrable()
	 * @method \boolean requireFiltrable()
	 * @method \Bitrix\Iblock\Property resetFiltrable()
	 * @method \Bitrix\Iblock\Property unsetFiltrable()
	 * @method \boolean fillFiltrable()
	 * @method \boolean getIsRequired()
	 * @method \Bitrix\Iblock\Property setIsRequired(\boolean|\Bitrix\Main\DB\SqlExpression $isRequired)
	 * @method bool hasIsRequired()
	 * @method bool isIsRequiredFilled()
	 * @method bool isIsRequiredChanged()
	 * @method \boolean remindActualIsRequired()
	 * @method \boolean requireIsRequired()
	 * @method \Bitrix\Iblock\Property resetIsRequired()
	 * @method \Bitrix\Iblock\Property unsetIsRequired()
	 * @method \boolean fillIsRequired()
	 * @method \string getVersion()
	 * @method \Bitrix\Iblock\Property setVersion(\string|\Bitrix\Main\DB\SqlExpression $version)
	 * @method bool hasVersion()
	 * @method bool isVersionFilled()
	 * @method bool isVersionChanged()
	 * @method \string remindActualVersion()
	 * @method \string requireVersion()
	 * @method \Bitrix\Iblock\Property resetVersion()
	 * @method \Bitrix\Iblock\Property unsetVersion()
	 * @method \string fillVersion()
	 * @method \string getUserType()
	 * @method \Bitrix\Iblock\Property setUserType(\string|\Bitrix\Main\DB\SqlExpression $userType)
	 * @method bool hasUserType()
	 * @method bool isUserTypeFilled()
	 * @method bool isUserTypeChanged()
	 * @method \string remindActualUserType()
	 * @method \string requireUserType()
	 * @method \Bitrix\Iblock\Property resetUserType()
	 * @method \Bitrix\Iblock\Property unsetUserType()
	 * @method \string fillUserType()
	 * @method \string getUserTypeSettingsList()
	 * @method \Bitrix\Iblock\Property setUserTypeSettingsList(\string|\Bitrix\Main\DB\SqlExpression $userTypeSettingsList)
	 * @method bool hasUserTypeSettingsList()
	 * @method bool isUserTypeSettingsListFilled()
	 * @method bool isUserTypeSettingsListChanged()
	 * @method \string remindActualUserTypeSettingsList()
	 * @method \string requireUserTypeSettingsList()
	 * @method \Bitrix\Iblock\Property resetUserTypeSettingsList()
	 * @method \Bitrix\Iblock\Property unsetUserTypeSettingsList()
	 * @method \string fillUserTypeSettingsList()
	 * @method \string getUserTypeSettings()
	 * @method \Bitrix\Iblock\Property setUserTypeSettings(\string|\Bitrix\Main\DB\SqlExpression $userTypeSettings)
	 * @method bool hasUserTypeSettings()
	 * @method bool isUserTypeSettingsFilled()
	 * @method bool isUserTypeSettingsChanged()
	 * @method \string remindActualUserTypeSettings()
	 * @method \string requireUserTypeSettings()
	 * @method \Bitrix\Iblock\Property resetUserTypeSettings()
	 * @method \Bitrix\Iblock\Property unsetUserTypeSettings()
	 * @method \string fillUserTypeSettings()
	 * @method \string getHint()
	 * @method \Bitrix\Iblock\Property setHint(\string|\Bitrix\Main\DB\SqlExpression $hint)
	 * @method bool hasHint()
	 * @method bool isHintFilled()
	 * @method bool isHintChanged()
	 * @method \string remindActualHint()
	 * @method \string requireHint()
	 * @method \Bitrix\Iblock\Property resetHint()
	 * @method \Bitrix\Iblock\Property unsetHint()
	 * @method \string fillHint()
	 * @method \Bitrix\Iblock\Iblock getLinkIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualLinkIblock()
	 * @method \Bitrix\Iblock\Iblock requireLinkIblock()
	 * @method \Bitrix\Iblock\Property setLinkIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\Property resetLinkIblock()
	 * @method \Bitrix\Iblock\Property unsetLinkIblock()
	 * @method bool hasLinkIblock()
	 * @method bool isLinkIblockFilled()
	 * @method bool isLinkIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillLinkIblock()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\Property setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\Property resetIblock()
	 * @method \Bitrix\Iblock\Property unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\Property set($fieldName, $value)
	 * @method \Bitrix\Iblock\Property reset($fieldName)
	 * @method \Bitrix\Iblock\Property unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\Property wakeUp($data)
	 */
	class EO_Property {
		/* @var \Bitrix\Iblock\PropertyTable */
		static public $dataClass = '\Bitrix\Iblock\PropertyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_Property_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getIblockIdList()
	 * @method \int[] fillIblockId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getDefaultValueList()
	 * @method \string[] fillDefaultValue()
	 * @method \string[] getPropertyTypeList()
	 * @method \string[] fillPropertyType()
	 * @method \int[] getRowCountList()
	 * @method \int[] fillRowCount()
	 * @method \int[] getColCountList()
	 * @method \int[] fillColCount()
	 * @method \string[] getListTypeList()
	 * @method \string[] fillListType()
	 * @method \boolean[] getMultipleList()
	 * @method \boolean[] fillMultiple()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getFileTypeList()
	 * @method \string[] fillFileType()
	 * @method \int[] getMultipleCntList()
	 * @method \int[] fillMultipleCnt()
	 * @method \string[] getTmpIdList()
	 * @method \string[] fillTmpId()
	 * @method \int[] getLinkIblockIdList()
	 * @method \int[] fillLinkIblockId()
	 * @method \boolean[] getWithDescriptionList()
	 * @method \boolean[] fillWithDescription()
	 * @method \boolean[] getSearchableList()
	 * @method \boolean[] fillSearchable()
	 * @method \boolean[] getFiltrableList()
	 * @method \boolean[] fillFiltrable()
	 * @method \boolean[] getIsRequiredList()
	 * @method \boolean[] fillIsRequired()
	 * @method \string[] getVersionList()
	 * @method \string[] fillVersion()
	 * @method \string[] getUserTypeList()
	 * @method \string[] fillUserType()
	 * @method \string[] getUserTypeSettingsListList()
	 * @method \string[] fillUserTypeSettingsList()
	 * @method \string[] getUserTypeSettingsList()
	 * @method \string[] fillUserTypeSettings()
	 * @method \string[] getHintList()
	 * @method \string[] fillHint()
	 * @method \Bitrix\Iblock\Iblock[] getLinkIblockList()
	 * @method \Bitrix\Iblock\EO_Property_Collection getLinkIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillLinkIblock()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_Property_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\Property $object)
	 * @method bool has(\Bitrix\Iblock\Property $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\Property getByPrimary($primary)
	 * @method \Bitrix\Iblock\Property[] getAll()
	 * @method bool remove(\Bitrix\Iblock\Property $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_Property_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\Property current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Property_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\PropertyTable */
		static public $dataClass = '\Bitrix\Iblock\PropertyTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_Property_Query query()
	 * @method static EO_Property_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Property_Result getById($id)
	 * @method static EO_Property_Result getList(array $parameters = array())
	 * @method static EO_Property_Entity getEntity()
	 * @method static \Bitrix\Iblock\Property createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_Property_Collection createCollection()
	 * @method static \Bitrix\Iblock\Property wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_Property_Collection wakeUpCollection($rows)
	 */
	class PropertyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Property_Result exec()
	 * @method \Bitrix\Iblock\Property fetchObject()
	 * @method \Bitrix\Iblock\EO_Property_Collection fetchCollection()
	 */
	class EO_Property_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\Property fetchObject()
	 * @method \Bitrix\Iblock\EO_Property_Collection fetchCollection()
	 */
	class EO_Property_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\Property createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_Property_Collection createCollection()
	 * @method \Bitrix\Iblock\Property wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_Property_Collection wakeUpCollection($rows)
	 */
	class EO_Property_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\ElementPropertyTable */
namespace Bitrix\Iblock {
	/**
	 * EO_ElementProperty
	 * @see \Bitrix\Iblock\ElementPropertyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\EO_ElementProperty setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getIblockPropertyId()
	 * @method \Bitrix\Iblock\EO_ElementProperty setIblockPropertyId(\int|\Bitrix\Main\DB\SqlExpression $iblockPropertyId)
	 * @method bool hasIblockPropertyId()
	 * @method bool isIblockPropertyIdFilled()
	 * @method bool isIblockPropertyIdChanged()
	 * @method \int remindActualIblockPropertyId()
	 * @method \int requireIblockPropertyId()
	 * @method \Bitrix\Iblock\EO_ElementProperty resetIblockPropertyId()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetIblockPropertyId()
	 * @method \int fillIblockPropertyId()
	 * @method \int getIblockElementId()
	 * @method \Bitrix\Iblock\EO_ElementProperty setIblockElementId(\int|\Bitrix\Main\DB\SqlExpression $iblockElementId)
	 * @method bool hasIblockElementId()
	 * @method bool isIblockElementIdFilled()
	 * @method bool isIblockElementIdChanged()
	 * @method \int remindActualIblockElementId()
	 * @method \int requireIblockElementId()
	 * @method \Bitrix\Iblock\EO_ElementProperty resetIblockElementId()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetIblockElementId()
	 * @method \int fillIblockElementId()
	 * @method \Bitrix\Iblock\EO_Element getElement()
	 * @method \Bitrix\Iblock\EO_Element remindActualElement()
	 * @method \Bitrix\Iblock\EO_Element requireElement()
	 * @method \Bitrix\Iblock\EO_ElementProperty setElement(\Bitrix\Iblock\EO_Element $object)
	 * @method \Bitrix\Iblock\EO_ElementProperty resetElement()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetElement()
	 * @method bool hasElement()
	 * @method bool isElementFilled()
	 * @method bool isElementChanged()
	 * @method \Bitrix\Iblock\EO_Element fillElement()
	 * @method \string getValue()
	 * @method \Bitrix\Iblock\EO_ElementProperty setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Iblock\EO_ElementProperty resetValue()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetValue()
	 * @method \string fillValue()
	 * @method \string getValueType()
	 * @method \Bitrix\Iblock\EO_ElementProperty setValueType(\string|\Bitrix\Main\DB\SqlExpression $valueType)
	 * @method bool hasValueType()
	 * @method bool isValueTypeFilled()
	 * @method bool isValueTypeChanged()
	 * @method \string remindActualValueType()
	 * @method \string requireValueType()
	 * @method \Bitrix\Iblock\EO_ElementProperty resetValueType()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetValueType()
	 * @method \string fillValueType()
	 * @method \int getValueEnum()
	 * @method \Bitrix\Iblock\EO_ElementProperty setValueEnum(\int|\Bitrix\Main\DB\SqlExpression $valueEnum)
	 * @method bool hasValueEnum()
	 * @method bool isValueEnumFilled()
	 * @method bool isValueEnumChanged()
	 * @method \int remindActualValueEnum()
	 * @method \int requireValueEnum()
	 * @method \Bitrix\Iblock\EO_ElementProperty resetValueEnum()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetValueEnum()
	 * @method \int fillValueEnum()
	 * @method \float getValueNum()
	 * @method \Bitrix\Iblock\EO_ElementProperty setValueNum(\float|\Bitrix\Main\DB\SqlExpression $valueNum)
	 * @method bool hasValueNum()
	 * @method bool isValueNumFilled()
	 * @method bool isValueNumChanged()
	 * @method \float remindActualValueNum()
	 * @method \float requireValueNum()
	 * @method \Bitrix\Iblock\EO_ElementProperty resetValueNum()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetValueNum()
	 * @method \float fillValueNum()
	 * @method \string getDescription()
	 * @method \Bitrix\Iblock\EO_ElementProperty setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Iblock\EO_ElementProperty resetDescription()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetDescription()
	 * @method \string fillDescription()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration getEnum()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration remindActualEnum()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration requireEnum()
	 * @method \Bitrix\Iblock\EO_ElementProperty setEnum(\Bitrix\Iblock\EO_PropertyEnumeration $object)
	 * @method \Bitrix\Iblock\EO_ElementProperty resetEnum()
	 * @method \Bitrix\Iblock\EO_ElementProperty unsetEnum()
	 * @method bool hasEnum()
	 * @method bool isEnumFilled()
	 * @method bool isEnumChanged()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration fillEnum()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_ElementProperty set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_ElementProperty reset($fieldName)
	 * @method \Bitrix\Iblock\EO_ElementProperty unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_ElementProperty wakeUp($data)
	 */
	class EO_ElementProperty {
		/* @var \Bitrix\Iblock\ElementPropertyTable */
		static public $dataClass = '\Bitrix\Iblock\ElementPropertyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_ElementProperty_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getIblockPropertyIdList()
	 * @method \int[] fillIblockPropertyId()
	 * @method \int[] getIblockElementIdList()
	 * @method \int[] fillIblockElementId()
	 * @method \Bitrix\Iblock\EO_Element[] getElementList()
	 * @method \Bitrix\Iblock\EO_ElementProperty_Collection getElementCollection()
	 * @method \Bitrix\Iblock\EO_Element_Collection fillElement()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \string[] getValueTypeList()
	 * @method \string[] fillValueType()
	 * @method \int[] getValueEnumList()
	 * @method \int[] fillValueEnum()
	 * @method \float[] getValueNumList()
	 * @method \float[] fillValueNum()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration[] getEnumList()
	 * @method \Bitrix\Iblock\EO_ElementProperty_Collection getEnumCollection()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration_Collection fillEnum()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_ElementProperty $object)
	 * @method bool has(\Bitrix\Iblock\EO_ElementProperty $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_ElementProperty getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_ElementProperty[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_ElementProperty $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_ElementProperty_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_ElementProperty current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ElementProperty_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\ElementPropertyTable */
		static public $dataClass = '\Bitrix\Iblock\ElementPropertyTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_ElementProperty_Query query()
	 * @method static EO_ElementProperty_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ElementProperty_Result getById($id)
	 * @method static EO_ElementProperty_Result getList(array $parameters = array())
	 * @method static EO_ElementProperty_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_ElementProperty createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_ElementProperty_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_ElementProperty wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_ElementProperty_Collection wakeUpCollection($rows)
	 */
	class ElementPropertyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_ElementProperty_Result exec()
	 * @method \Bitrix\Iblock\EO_ElementProperty fetchObject()
	 * @method \Bitrix\Iblock\EO_ElementProperty_Collection fetchCollection()
	 */
	class EO_ElementProperty_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_ElementProperty fetchObject()
	 * @method \Bitrix\Iblock\EO_ElementProperty_Collection fetchCollection()
	 */
	class EO_ElementProperty_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_ElementProperty createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_ElementProperty_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_ElementProperty wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_ElementProperty_Collection wakeUpCollection($rows)
	 */
	class EO_ElementProperty_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\SequenceTable */
namespace Bitrix\Iblock {
	/**
	 * EO_Sequence
	 * @see \Bitrix\Iblock\SequenceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_Sequence setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\EO_Sequence setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \int getSeqValue()
	 * @method \Bitrix\Iblock\EO_Sequence setSeqValue(\int|\Bitrix\Main\DB\SqlExpression $seqValue)
	 * @method bool hasSeqValue()
	 * @method bool isSeqValueFilled()
	 * @method bool isSeqValueChanged()
	 * @method \int remindActualSeqValue()
	 * @method \int requireSeqValue()
	 * @method \Bitrix\Iblock\EO_Sequence resetSeqValue()
	 * @method \Bitrix\Iblock\EO_Sequence unsetSeqValue()
	 * @method \int fillSeqValue()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_Sequence setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_Sequence resetIblock()
	 * @method \Bitrix\Iblock\EO_Sequence unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_Sequence set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_Sequence reset($fieldName)
	 * @method \Bitrix\Iblock\EO_Sequence unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_Sequence wakeUp($data)
	 */
	class EO_Sequence {
		/* @var \Bitrix\Iblock\SequenceTable */
		static public $dataClass = '\Bitrix\Iblock\SequenceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_Sequence_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockIdList()
	 * @method \string[] getCodeList()
	 * @method \int[] getSeqValueList()
	 * @method \int[] fillSeqValue()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_Sequence_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_Sequence $object)
	 * @method bool has(\Bitrix\Iblock\EO_Sequence $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Sequence getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Sequence[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_Sequence $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_Sequence_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_Sequence current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Sequence_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\SequenceTable */
		static public $dataClass = '\Bitrix\Iblock\SequenceTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_Sequence_Query query()
	 * @method static EO_Sequence_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Sequence_Result getById($id)
	 * @method static EO_Sequence_Result getList(array $parameters = array())
	 * @method static EO_Sequence_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_Sequence createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_Sequence_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_Sequence wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_Sequence_Collection wakeUpCollection($rows)
	 */
	class SequenceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Sequence_Result exec()
	 * @method \Bitrix\Iblock\EO_Sequence fetchObject()
	 * @method \Bitrix\Iblock\EO_Sequence_Collection fetchCollection()
	 */
	class EO_Sequence_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_Sequence fetchObject()
	 * @method \Bitrix\Iblock\EO_Sequence_Collection fetchCollection()
	 */
	class EO_Sequence_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_Sequence createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_Sequence_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_Sequence wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_Sequence_Collection wakeUpCollection($rows)
	 */
	class EO_Sequence_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\IblockGroupTable */
namespace Bitrix\Iblock {
	/**
	 * EO_IblockGroup
	 * @see \Bitrix\Iblock\IblockGroupTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_IblockGroup setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int getGroupId()
	 * @method \Bitrix\Iblock\EO_IblockGroup setGroupId(\int|\Bitrix\Main\DB\SqlExpression $groupId)
	 * @method bool hasGroupId()
	 * @method bool isGroupIdFilled()
	 * @method bool isGroupIdChanged()
	 * @method \string getPermission()
	 * @method \Bitrix\Iblock\EO_IblockGroup setPermission(\string|\Bitrix\Main\DB\SqlExpression $permission)
	 * @method bool hasPermission()
	 * @method bool isPermissionFilled()
	 * @method bool isPermissionChanged()
	 * @method \string remindActualPermission()
	 * @method \string requirePermission()
	 * @method \Bitrix\Iblock\EO_IblockGroup resetPermission()
	 * @method \Bitrix\Iblock\EO_IblockGroup unsetPermission()
	 * @method \string fillPermission()
	 * @method \Bitrix\Main\EO_Group getGroup()
	 * @method \Bitrix\Main\EO_Group remindActualGroup()
	 * @method \Bitrix\Main\EO_Group requireGroup()
	 * @method \Bitrix\Iblock\EO_IblockGroup setGroup(\Bitrix\Main\EO_Group $object)
	 * @method \Bitrix\Iblock\EO_IblockGroup resetGroup()
	 * @method \Bitrix\Iblock\EO_IblockGroup unsetGroup()
	 * @method bool hasGroup()
	 * @method bool isGroupFilled()
	 * @method bool isGroupChanged()
	 * @method \Bitrix\Main\EO_Group fillGroup()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_IblockGroup setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_IblockGroup resetIblock()
	 * @method \Bitrix\Iblock\EO_IblockGroup unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockGroup set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_IblockGroup reset($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockGroup unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_IblockGroup wakeUp($data)
	 */
	class EO_IblockGroup {
		/* @var \Bitrix\Iblock\IblockGroupTable */
		static public $dataClass = '\Bitrix\Iblock\IblockGroupTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_IblockGroup_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockIdList()
	 * @method \int[] getGroupIdList()
	 * @method \string[] getPermissionList()
	 * @method \string[] fillPermission()
	 * @method \Bitrix\Main\EO_Group[] getGroupList()
	 * @method \Bitrix\Iblock\EO_IblockGroup_Collection getGroupCollection()
	 * @method \Bitrix\Main\EO_Group_Collection fillGroup()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_IblockGroup_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_IblockGroup $object)
	 * @method bool has(\Bitrix\Iblock\EO_IblockGroup $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockGroup getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockGroup[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_IblockGroup $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_IblockGroup_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_IblockGroup current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_IblockGroup_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\IblockGroupTable */
		static public $dataClass = '\Bitrix\Iblock\IblockGroupTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_IblockGroup_Query query()
	 * @method static EO_IblockGroup_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_IblockGroup_Result getById($id)
	 * @method static EO_IblockGroup_Result getList(array $parameters = array())
	 * @method static EO_IblockGroup_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_IblockGroup createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_IblockGroup_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_IblockGroup wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_IblockGroup_Collection wakeUpCollection($rows)
	 */
	class IblockGroupTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_IblockGroup_Result exec()
	 * @method \Bitrix\Iblock\EO_IblockGroup fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockGroup_Collection fetchCollection()
	 */
	class EO_IblockGroup_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockGroup fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockGroup_Collection fetchCollection()
	 */
	class EO_IblockGroup_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockGroup createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_IblockGroup_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_IblockGroup wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_IblockGroup_Collection wakeUpCollection($rows)
	 */
	class EO_IblockGroup_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\InheritedPropertyTable */
namespace Bitrix\Iblock {
	/**
	 * EO_InheritedProperty
	 * @see \Bitrix\Iblock\InheritedPropertyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\EO_InheritedProperty setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_InheritedProperty setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int remindActualIblockId()
	 * @method \int requireIblockId()
	 * @method \Bitrix\Iblock\EO_InheritedProperty resetIblockId()
	 * @method \Bitrix\Iblock\EO_InheritedProperty unsetIblockId()
	 * @method \int fillIblockId()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\EO_InheritedProperty setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Iblock\EO_InheritedProperty resetCode()
	 * @method \Bitrix\Iblock\EO_InheritedProperty unsetCode()
	 * @method \string fillCode()
	 * @method \string getEntityType()
	 * @method \Bitrix\Iblock\EO_InheritedProperty setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Iblock\EO_InheritedProperty resetEntityType()
	 * @method \Bitrix\Iblock\EO_InheritedProperty unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \string getEntityId()
	 * @method \Bitrix\Iblock\EO_InheritedProperty setEntityId(\string|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \string remindActualEntityId()
	 * @method \string requireEntityId()
	 * @method \Bitrix\Iblock\EO_InheritedProperty resetEntityId()
	 * @method \Bitrix\Iblock\EO_InheritedProperty unsetEntityId()
	 * @method \string fillEntityId()
	 * @method \string getTemplate()
	 * @method \Bitrix\Iblock\EO_InheritedProperty setTemplate(\string|\Bitrix\Main\DB\SqlExpression $template)
	 * @method bool hasTemplate()
	 * @method bool isTemplateFilled()
	 * @method bool isTemplateChanged()
	 * @method \string remindActualTemplate()
	 * @method \string requireTemplate()
	 * @method \Bitrix\Iblock\EO_InheritedProperty resetTemplate()
	 * @method \Bitrix\Iblock\EO_InheritedProperty unsetTemplate()
	 * @method \string fillTemplate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_InheritedProperty set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_InheritedProperty reset($fieldName)
	 * @method \Bitrix\Iblock\EO_InheritedProperty unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_InheritedProperty wakeUp($data)
	 */
	class EO_InheritedProperty {
		/* @var \Bitrix\Iblock\InheritedPropertyTable */
		static public $dataClass = '\Bitrix\Iblock\InheritedPropertyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_InheritedProperty_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getIblockIdList()
	 * @method \int[] fillIblockId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \string[] getEntityIdList()
	 * @method \string[] fillEntityId()
	 * @method \string[] getTemplateList()
	 * @method \string[] fillTemplate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_InheritedProperty $object)
	 * @method bool has(\Bitrix\Iblock\EO_InheritedProperty $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_InheritedProperty getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_InheritedProperty[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_InheritedProperty $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_InheritedProperty_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_InheritedProperty current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InheritedProperty_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\InheritedPropertyTable */
		static public $dataClass = '\Bitrix\Iblock\InheritedPropertyTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_InheritedProperty_Query query()
	 * @method static EO_InheritedProperty_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InheritedProperty_Result getById($id)
	 * @method static EO_InheritedProperty_Result getList(array $parameters = array())
	 * @method static EO_InheritedProperty_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_InheritedProperty createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_InheritedProperty_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_InheritedProperty wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_InheritedProperty_Collection wakeUpCollection($rows)
	 */
	class InheritedPropertyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_InheritedProperty_Result exec()
	 * @method \Bitrix\Iblock\EO_InheritedProperty fetchObject()
	 * @method \Bitrix\Iblock\EO_InheritedProperty_Collection fetchCollection()
	 */
	class EO_InheritedProperty_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_InheritedProperty fetchObject()
	 * @method \Bitrix\Iblock\EO_InheritedProperty_Collection fetchCollection()
	 */
	class EO_InheritedProperty_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_InheritedProperty createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_InheritedProperty_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_InheritedProperty wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_InheritedProperty_Collection wakeUpCollection($rows)
	 */
	class EO_InheritedProperty_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\SectionPropertyTable */
namespace Bitrix\Iblock {
	/**
	 * EO_SectionProperty
	 * @see \Bitrix\Iblock\SectionPropertyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_SectionProperty setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int getSectionId()
	 * @method \Bitrix\Iblock\EO_SectionProperty setSectionId(\int|\Bitrix\Main\DB\SqlExpression $sectionId)
	 * @method bool hasSectionId()
	 * @method bool isSectionIdFilled()
	 * @method bool isSectionIdChanged()
	 * @method \int getPropertyId()
	 * @method \Bitrix\Iblock\EO_SectionProperty setPropertyId(\int|\Bitrix\Main\DB\SqlExpression $propertyId)
	 * @method bool hasPropertyId()
	 * @method bool isPropertyIdFilled()
	 * @method bool isPropertyIdChanged()
	 * @method \boolean getSmartFilter()
	 * @method \Bitrix\Iblock\EO_SectionProperty setSmartFilter(\boolean|\Bitrix\Main\DB\SqlExpression $smartFilter)
	 * @method bool hasSmartFilter()
	 * @method bool isSmartFilterFilled()
	 * @method bool isSmartFilterChanged()
	 * @method \boolean remindActualSmartFilter()
	 * @method \boolean requireSmartFilter()
	 * @method \Bitrix\Iblock\EO_SectionProperty resetSmartFilter()
	 * @method \Bitrix\Iblock\EO_SectionProperty unsetSmartFilter()
	 * @method \boolean fillSmartFilter()
	 * @method \string getDisplayType()
	 * @method \Bitrix\Iblock\EO_SectionProperty setDisplayType(\string|\Bitrix\Main\DB\SqlExpression $displayType)
	 * @method bool hasDisplayType()
	 * @method bool isDisplayTypeFilled()
	 * @method bool isDisplayTypeChanged()
	 * @method \string remindActualDisplayType()
	 * @method \string requireDisplayType()
	 * @method \Bitrix\Iblock\EO_SectionProperty resetDisplayType()
	 * @method \Bitrix\Iblock\EO_SectionProperty unsetDisplayType()
	 * @method \string fillDisplayType()
	 * @method \boolean getDisplayExpanded()
	 * @method \Bitrix\Iblock\EO_SectionProperty setDisplayExpanded(\boolean|\Bitrix\Main\DB\SqlExpression $displayExpanded)
	 * @method bool hasDisplayExpanded()
	 * @method bool isDisplayExpandedFilled()
	 * @method bool isDisplayExpandedChanged()
	 * @method \boolean remindActualDisplayExpanded()
	 * @method \boolean requireDisplayExpanded()
	 * @method \Bitrix\Iblock\EO_SectionProperty resetDisplayExpanded()
	 * @method \Bitrix\Iblock\EO_SectionProperty unsetDisplayExpanded()
	 * @method \boolean fillDisplayExpanded()
	 * @method \string getFilterHint()
	 * @method \Bitrix\Iblock\EO_SectionProperty setFilterHint(\string|\Bitrix\Main\DB\SqlExpression $filterHint)
	 * @method bool hasFilterHint()
	 * @method bool isFilterHintFilled()
	 * @method bool isFilterHintChanged()
	 * @method \string remindActualFilterHint()
	 * @method \string requireFilterHint()
	 * @method \Bitrix\Iblock\EO_SectionProperty resetFilterHint()
	 * @method \Bitrix\Iblock\EO_SectionProperty unsetFilterHint()
	 * @method \string fillFilterHint()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_SectionProperty setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_SectionProperty resetIblock()
	 * @method \Bitrix\Iblock\EO_SectionProperty unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 * @method \Bitrix\Iblock\Property getProperty()
	 * @method \Bitrix\Iblock\Property remindActualProperty()
	 * @method \Bitrix\Iblock\Property requireProperty()
	 * @method \Bitrix\Iblock\EO_SectionProperty setProperty(\Bitrix\Iblock\Property $object)
	 * @method \Bitrix\Iblock\EO_SectionProperty resetProperty()
	 * @method \Bitrix\Iblock\EO_SectionProperty unsetProperty()
	 * @method bool hasProperty()
	 * @method bool isPropertyFilled()
	 * @method bool isPropertyChanged()
	 * @method \Bitrix\Iblock\Property fillProperty()
	 * @method \Bitrix\Iblock\EO_Section getSection()
	 * @method \Bitrix\Iblock\EO_Section remindActualSection()
	 * @method \Bitrix\Iblock\EO_Section requireSection()
	 * @method \Bitrix\Iblock\EO_SectionProperty setSection(\Bitrix\Iblock\EO_Section $object)
	 * @method \Bitrix\Iblock\EO_SectionProperty resetSection()
	 * @method \Bitrix\Iblock\EO_SectionProperty unsetSection()
	 * @method bool hasSection()
	 * @method bool isSectionFilled()
	 * @method bool isSectionChanged()
	 * @method \Bitrix\Iblock\EO_Section fillSection()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_SectionProperty set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_SectionProperty reset($fieldName)
	 * @method \Bitrix\Iblock\EO_SectionProperty unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_SectionProperty wakeUp($data)
	 */
	class EO_SectionProperty {
		/* @var \Bitrix\Iblock\SectionPropertyTable */
		static public $dataClass = '\Bitrix\Iblock\SectionPropertyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_SectionProperty_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockIdList()
	 * @method \int[] getSectionIdList()
	 * @method \int[] getPropertyIdList()
	 * @method \boolean[] getSmartFilterList()
	 * @method \boolean[] fillSmartFilter()
	 * @method \string[] getDisplayTypeList()
	 * @method \string[] fillDisplayType()
	 * @method \boolean[] getDisplayExpandedList()
	 * @method \boolean[] fillDisplayExpanded()
	 * @method \string[] getFilterHintList()
	 * @method \string[] fillFilterHint()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_SectionProperty_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 * @method \Bitrix\Iblock\Property[] getPropertyList()
	 * @method \Bitrix\Iblock\EO_SectionProperty_Collection getPropertyCollection()
	 * @method \Bitrix\Iblock\EO_Property_Collection fillProperty()
	 * @method \Bitrix\Iblock\EO_Section[] getSectionList()
	 * @method \Bitrix\Iblock\EO_SectionProperty_Collection getSectionCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillSection()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_SectionProperty $object)
	 * @method bool has(\Bitrix\Iblock\EO_SectionProperty $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_SectionProperty getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_SectionProperty[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_SectionProperty $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_SectionProperty_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_SectionProperty current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SectionProperty_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\SectionPropertyTable */
		static public $dataClass = '\Bitrix\Iblock\SectionPropertyTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_SectionProperty_Query query()
	 * @method static EO_SectionProperty_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SectionProperty_Result getById($id)
	 * @method static EO_SectionProperty_Result getList(array $parameters = array())
	 * @method static EO_SectionProperty_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_SectionProperty createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_SectionProperty_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_SectionProperty wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_SectionProperty_Collection wakeUpCollection($rows)
	 */
	class SectionPropertyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_SectionProperty_Result exec()
	 * @method \Bitrix\Iblock\EO_SectionProperty fetchObject()
	 * @method \Bitrix\Iblock\EO_SectionProperty_Collection fetchCollection()
	 */
	class EO_SectionProperty_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_SectionProperty fetchObject()
	 * @method \Bitrix\Iblock\EO_SectionProperty_Collection fetchCollection()
	 */
	class EO_SectionProperty_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_SectionProperty createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_SectionProperty_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_SectionProperty wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_SectionProperty_Collection wakeUpCollection($rows)
	 */
	class EO_SectionProperty_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\ORM\ElementV2Table */
namespace Bitrix\Iblock\ORM {
	/**
	 * EO_ElementV2
	 * @see \Bitrix\Iblock\ORM\ElementV2Table
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetTimestampX()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getModifiedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setModifiedBy(\int|\Bitrix\Main\DB\SqlExpression $modifiedBy)
	 * @method bool hasModifiedBy()
	 * @method bool isModifiedByFilled()
	 * @method bool isModifiedByChanged()
	 * @method \int remindActualModifiedBy()
	 * @method \int requireModifiedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetModifiedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetModifiedBy()
	 * @method \int fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetDateCreate()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetCreatedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int remindActualIblockId()
	 * @method \int requireIblockId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetIblockId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetIblockId()
	 * @method \int fillIblockId()
	 * @method \int getIblockSectionId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setIblockSectionId(\int|\Bitrix\Main\DB\SqlExpression $iblockSectionId)
	 * @method bool hasIblockSectionId()
	 * @method bool isIblockSectionIdFilled()
	 * @method bool isIblockSectionIdChanged()
	 * @method \int remindActualIblockSectionId()
	 * @method \int requireIblockSectionId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetIblockSectionId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetIblockSectionId()
	 * @method \int fillIblockSectionId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetActive()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetActive()
	 * @method \boolean fillActive()
	 * @method \Bitrix\Main\Type\DateTime getActiveFrom()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setActiveFrom(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeFrom)
	 * @method bool hasActiveFrom()
	 * @method bool isActiveFromFilled()
	 * @method bool isActiveFromChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime requireActiveFrom()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetActiveFrom()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime getActiveTo()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setActiveTo(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeTo)
	 * @method bool hasActiveTo()
	 * @method bool isActiveToFilled()
	 * @method bool isActiveToChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveTo()
	 * @method \Bitrix\Main\Type\DateTime requireActiveTo()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetActiveTo()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetActiveTo()
	 * @method \Bitrix\Main\Type\DateTime fillActiveTo()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetSort()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetSort()
	 * @method \int fillSort()
	 * @method \string getName()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetName()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetName()
	 * @method \string fillName()
	 * @method \int getPreviewPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setPreviewPicture(\int|\Bitrix\Main\DB\SqlExpression $previewPicture)
	 * @method bool hasPreviewPicture()
	 * @method bool isPreviewPictureFilled()
	 * @method bool isPreviewPictureChanged()
	 * @method \int remindActualPreviewPicture()
	 * @method \int requirePreviewPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetPreviewPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetPreviewPicture()
	 * @method \int fillPreviewPicture()
	 * @method \string getPreviewText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setPreviewText(\string|\Bitrix\Main\DB\SqlExpression $previewText)
	 * @method bool hasPreviewText()
	 * @method bool isPreviewTextFilled()
	 * @method bool isPreviewTextChanged()
	 * @method \string remindActualPreviewText()
	 * @method \string requirePreviewText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetPreviewText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetPreviewText()
	 * @method \string fillPreviewText()
	 * @method \string getPreviewTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setPreviewTextType(\string|\Bitrix\Main\DB\SqlExpression $previewTextType)
	 * @method bool hasPreviewTextType()
	 * @method bool isPreviewTextTypeFilled()
	 * @method bool isPreviewTextTypeChanged()
	 * @method \string remindActualPreviewTextType()
	 * @method \string requirePreviewTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetPreviewTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetPreviewTextType()
	 * @method \string fillPreviewTextType()
	 * @method \int getDetailPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setDetailPicture(\int|\Bitrix\Main\DB\SqlExpression $detailPicture)
	 * @method bool hasDetailPicture()
	 * @method bool isDetailPictureFilled()
	 * @method bool isDetailPictureChanged()
	 * @method \int remindActualDetailPicture()
	 * @method \int requireDetailPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetDetailPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetDetailPicture()
	 * @method \int fillDetailPicture()
	 * @method \string getDetailText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setDetailText(\string|\Bitrix\Main\DB\SqlExpression $detailText)
	 * @method bool hasDetailText()
	 * @method bool isDetailTextFilled()
	 * @method bool isDetailTextChanged()
	 * @method \string remindActualDetailText()
	 * @method \string requireDetailText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetDetailText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetDetailText()
	 * @method \string fillDetailText()
	 * @method \string getDetailTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setDetailTextType(\string|\Bitrix\Main\DB\SqlExpression $detailTextType)
	 * @method bool hasDetailTextType()
	 * @method bool isDetailTextTypeFilled()
	 * @method bool isDetailTextTypeChanged()
	 * @method \string remindActualDetailTextType()
	 * @method \string requireDetailTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetDetailTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetDetailTextType()
	 * @method \string fillDetailTextType()
	 * @method \string getSearchableContent()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setSearchableContent(\string|\Bitrix\Main\DB\SqlExpression $searchableContent)
	 * @method bool hasSearchableContent()
	 * @method bool isSearchableContentFilled()
	 * @method bool isSearchableContentChanged()
	 * @method \string remindActualSearchableContent()
	 * @method \string requireSearchableContent()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetSearchableContent()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetSearchableContent()
	 * @method \string fillSearchableContent()
	 * @method \int getWfStatusId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setWfStatusId(\int|\Bitrix\Main\DB\SqlExpression $wfStatusId)
	 * @method bool hasWfStatusId()
	 * @method bool isWfStatusIdFilled()
	 * @method bool isWfStatusIdChanged()
	 * @method \int remindActualWfStatusId()
	 * @method \int requireWfStatusId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetWfStatusId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetWfStatusId()
	 * @method \int fillWfStatusId()
	 * @method \int getWfParentElementId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setWfParentElementId(\int|\Bitrix\Main\DB\SqlExpression $wfParentElementId)
	 * @method bool hasWfParentElementId()
	 * @method bool isWfParentElementIdFilled()
	 * @method bool isWfParentElementIdChanged()
	 * @method \int remindActualWfParentElementId()
	 * @method \int requireWfParentElementId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetWfParentElementId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetWfParentElementId()
	 * @method \int fillWfParentElementId()
	 * @method \string getWfNew()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setWfNew(\string|\Bitrix\Main\DB\SqlExpression $wfNew)
	 * @method bool hasWfNew()
	 * @method bool isWfNewFilled()
	 * @method bool isWfNewChanged()
	 * @method \string remindActualWfNew()
	 * @method \string requireWfNew()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetWfNew()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetWfNew()
	 * @method \string fillWfNew()
	 * @method \int getWfLockedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setWfLockedBy(\int|\Bitrix\Main\DB\SqlExpression $wfLockedBy)
	 * @method bool hasWfLockedBy()
	 * @method bool isWfLockedByFilled()
	 * @method bool isWfLockedByChanged()
	 * @method \int remindActualWfLockedBy()
	 * @method \int requireWfLockedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetWfLockedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetWfLockedBy()
	 * @method \int fillWfLockedBy()
	 * @method \Bitrix\Main\Type\DateTime getWfDateLock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setWfDateLock(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $wfDateLock)
	 * @method bool hasWfDateLock()
	 * @method bool isWfDateLockFilled()
	 * @method bool isWfDateLockChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualWfDateLock()
	 * @method \Bitrix\Main\Type\DateTime requireWfDateLock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetWfDateLock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetWfDateLock()
	 * @method \Bitrix\Main\Type\DateTime fillWfDateLock()
	 * @method \string getWfComments()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setWfComments(\string|\Bitrix\Main\DB\SqlExpression $wfComments)
	 * @method bool hasWfComments()
	 * @method bool isWfCommentsFilled()
	 * @method bool isWfCommentsChanged()
	 * @method \string remindActualWfComments()
	 * @method \string requireWfComments()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetWfComments()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetWfComments()
	 * @method \string fillWfComments()
	 * @method \boolean getInSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setInSections(\boolean|\Bitrix\Main\DB\SqlExpression $inSections)
	 * @method bool hasInSections()
	 * @method bool isInSectionsFilled()
	 * @method bool isInSectionsChanged()
	 * @method \boolean remindActualInSections()
	 * @method \boolean requireInSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetInSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetInSections()
	 * @method \boolean fillInSections()
	 * @method \string getXmlId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetXmlId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetCode()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetCode()
	 * @method \string fillCode()
	 * @method \string getTags()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setTags(\string|\Bitrix\Main\DB\SqlExpression $tags)
	 * @method bool hasTags()
	 * @method bool isTagsFilled()
	 * @method bool isTagsChanged()
	 * @method \string remindActualTags()
	 * @method \string requireTags()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetTags()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetTags()
	 * @method \string fillTags()
	 * @method \string getTmpId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setTmpId(\string|\Bitrix\Main\DB\SqlExpression $tmpId)
	 * @method bool hasTmpId()
	 * @method bool isTmpIdFilled()
	 * @method bool isTmpIdChanged()
	 * @method \string remindActualTmpId()
	 * @method \string requireTmpId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetTmpId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetTmpId()
	 * @method \string fillTmpId()
	 * @method \int getShowCounter()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setShowCounter(\int|\Bitrix\Main\DB\SqlExpression $showCounter)
	 * @method bool hasShowCounter()
	 * @method bool isShowCounterFilled()
	 * @method bool isShowCounterChanged()
	 * @method \int remindActualShowCounter()
	 * @method \int requireShowCounter()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetShowCounter()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetShowCounter()
	 * @method \int fillShowCounter()
	 * @method \Bitrix\Main\Type\DateTime getShowCounterStart()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setShowCounterStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $showCounterStart)
	 * @method bool hasShowCounterStart()
	 * @method bool isShowCounterStartFilled()
	 * @method bool isShowCounterStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualShowCounterStart()
	 * @method \Bitrix\Main\Type\DateTime requireShowCounterStart()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetShowCounterStart()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetShowCounterStart()
	 * @method \Bitrix\Main\Type\DateTime fillShowCounterStart()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetIblock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 * @method \Bitrix\Iblock\EO_Element getWfParentElement()
	 * @method \Bitrix\Iblock\EO_Element remindActualWfParentElement()
	 * @method \Bitrix\Iblock\EO_Element requireWfParentElement()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setWfParentElement(\Bitrix\Iblock\EO_Element $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetWfParentElement()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetWfParentElement()
	 * @method bool hasWfParentElement()
	 * @method bool isWfParentElementFilled()
	 * @method bool isWfParentElementChanged()
	 * @method \Bitrix\Iblock\EO_Element fillWfParentElement()
	 * @method \Bitrix\Iblock\EO_Section getIblockSection()
	 * @method \Bitrix\Iblock\EO_Section remindActualIblockSection()
	 * @method \Bitrix\Iblock\EO_Section requireIblockSection()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setIblockSection(\Bitrix\Iblock\EO_Section $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetIblockSection()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetIblockSection()
	 * @method bool hasIblockSection()
	 * @method bool isIblockSectionFilled()
	 * @method bool isIblockSectionChanged()
	 * @method \Bitrix\Iblock\EO_Section fillIblockSection()
	 * @method \Bitrix\Main\EO_User getModifiedByUser()
	 * @method \Bitrix\Main\EO_User remindActualModifiedByUser()
	 * @method \Bitrix\Main\EO_User requireModifiedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setModifiedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetModifiedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetModifiedByUser()
	 * @method bool hasModifiedByUser()
	 * @method bool isModifiedByUserFilled()
	 * @method bool isModifiedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillModifiedByUser()
	 * @method \Bitrix\Main\EO_User getCreatedByUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedByUser()
	 * @method \Bitrix\Main\EO_User requireCreatedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setCreatedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetCreatedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetCreatedByUser()
	 * @method bool hasCreatedByUser()
	 * @method bool isCreatedByUserFilled()
	 * @method bool isCreatedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User getWfLockedByUser()
	 * @method \Bitrix\Main\EO_User remindActualWfLockedByUser()
	 * @method \Bitrix\Main\EO_User requireWfLockedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 setWfLockedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetWfLockedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetWfLockedByUser()
	 * @method bool hasWfLockedByUser()
	 * @method bool isWfLockedByUserFilled()
	 * @method bool isWfLockedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillWfLockedByUser()
	 * @method \Bitrix\Iblock\EO_Section_Collection getSections()
	 * @method \Bitrix\Iblock\EO_Section_Collection requireSections()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillSections()
	 * @method bool hasSections()
	 * @method bool isSectionsFilled()
	 * @method bool isSectionsChanged()
	 * @method void addToSections(\Bitrix\Iblock\EO_Section $section)
	 * @method void removeFromSections(\Bitrix\Iblock\EO_Section $section)
	 * @method void removeAllSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 resetSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unsetSections()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 set($fieldName, $value)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 reset($fieldName)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV2 wakeUp($data)
	 */
	class EO_ElementV2 {
		/* @var \Bitrix\Iblock\ORM\ElementV2Table */
		static public $dataClass = '\Bitrix\Iblock\ORM\ElementV2Table';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock\ORM {
	/**
	 * EO_ElementV2_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getModifiedByList()
	 * @method \int[] fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \int[] getIblockIdList()
	 * @method \int[] fillIblockId()
	 * @method \int[] getIblockSectionIdList()
	 * @method \int[] fillIblockSectionId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveFromList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveToList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveTo()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getPreviewPictureList()
	 * @method \int[] fillPreviewPicture()
	 * @method \string[] getPreviewTextList()
	 * @method \string[] fillPreviewText()
	 * @method \string[] getPreviewTextTypeList()
	 * @method \string[] fillPreviewTextType()
	 * @method \int[] getDetailPictureList()
	 * @method \int[] fillDetailPicture()
	 * @method \string[] getDetailTextList()
	 * @method \string[] fillDetailText()
	 * @method \string[] getDetailTextTypeList()
	 * @method \string[] fillDetailTextType()
	 * @method \string[] getSearchableContentList()
	 * @method \string[] fillSearchableContent()
	 * @method \int[] getWfStatusIdList()
	 * @method \int[] fillWfStatusId()
	 * @method \int[] getWfParentElementIdList()
	 * @method \int[] fillWfParentElementId()
	 * @method \string[] getWfNewList()
	 * @method \string[] fillWfNew()
	 * @method \int[] getWfLockedByList()
	 * @method \int[] fillWfLockedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getWfDateLockList()
	 * @method \Bitrix\Main\Type\DateTime[] fillWfDateLock()
	 * @method \string[] getWfCommentsList()
	 * @method \string[] fillWfComments()
	 * @method \boolean[] getInSectionsList()
	 * @method \boolean[] fillInSections()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getTagsList()
	 * @method \string[] fillTags()
	 * @method \string[] getTmpIdList()
	 * @method \string[] fillTmpId()
	 * @method \int[] getShowCounterList()
	 * @method \int[] fillShowCounter()
	 * @method \Bitrix\Main\Type\DateTime[] getShowCounterStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillShowCounterStart()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 * @method \Bitrix\Iblock\EO_Element[] getWfParentElementList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection getWfParentElementCollection()
	 * @method \Bitrix\Iblock\EO_Element_Collection fillWfParentElement()
	 * @method \Bitrix\Iblock\EO_Section[] getIblockSectionList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection getIblockSectionCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillIblockSection()
	 * @method \Bitrix\Main\EO_User[] getModifiedByUserList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection getModifiedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifiedByUser()
	 * @method \Bitrix\Main\EO_User[] getCreatedByUserList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection getCreatedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User[] getWfLockedByUserList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection getWfLockedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillWfLockedByUser()
	 * @method \Bitrix\Iblock\EO_Section_Collection[] getSectionsList()
	 * @method \Bitrix\Iblock\EO_Section_Collection getSectionsCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillSections()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\ORM\EO_ElementV2 $object)
	 * @method bool has(\Bitrix\Iblock\ORM\EO_ElementV2 $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 getByPrimary($primary)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2[] getAll()
	 * @method bool remove(\Bitrix\Iblock\ORM\EO_ElementV2 $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV2_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ElementV2_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\ORM\ElementV2Table */
		static public $dataClass = '\Bitrix\Iblock\ORM\ElementV2Table';
	}
}
namespace Bitrix\Iblock\ORM {
	/**
	 * @method static EO_ElementV2_Query query()
	 * @method static EO_ElementV2_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ElementV2_Result getById($id)
	 * @method static EO_ElementV2_Result getList(array $parameters = array())
	 * @method static EO_ElementV2_Entity getEntity()
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV2 createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV2_Collection createCollection()
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV2 wakeUpObject($row)
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV2_Collection wakeUpCollection($rows)
	 */
	class ElementV2Table extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_ElementV2_Result exec()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 fetchObject()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection fetchCollection()
	 */
	class EO_ElementV2_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 fetchObject()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection fetchCollection()
	 */
	class EO_ElementV2_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection createCollection()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2 wakeUpObject($row)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV2_Collection wakeUpCollection($rows)
	 */
	class EO_ElementV2_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\ORM\ElementV1Table */
namespace Bitrix\Iblock\ORM {
	/**
	 * EO_ElementV1
	 * @see \Bitrix\Iblock\ORM\ElementV1Table
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetTimestampX()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getModifiedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setModifiedBy(\int|\Bitrix\Main\DB\SqlExpression $modifiedBy)
	 * @method bool hasModifiedBy()
	 * @method bool isModifiedByFilled()
	 * @method bool isModifiedByChanged()
	 * @method \int remindActualModifiedBy()
	 * @method \int requireModifiedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetModifiedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetModifiedBy()
	 * @method \int fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetDateCreate()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetCreatedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int remindActualIblockId()
	 * @method \int requireIblockId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetIblockId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetIblockId()
	 * @method \int fillIblockId()
	 * @method \int getIblockSectionId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setIblockSectionId(\int|\Bitrix\Main\DB\SqlExpression $iblockSectionId)
	 * @method bool hasIblockSectionId()
	 * @method bool isIblockSectionIdFilled()
	 * @method bool isIblockSectionIdChanged()
	 * @method \int remindActualIblockSectionId()
	 * @method \int requireIblockSectionId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetIblockSectionId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetIblockSectionId()
	 * @method \int fillIblockSectionId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetActive()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetActive()
	 * @method \boolean fillActive()
	 * @method \Bitrix\Main\Type\DateTime getActiveFrom()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setActiveFrom(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeFrom)
	 * @method bool hasActiveFrom()
	 * @method bool isActiveFromFilled()
	 * @method bool isActiveFromChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime requireActiveFrom()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetActiveFrom()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime getActiveTo()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setActiveTo(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeTo)
	 * @method bool hasActiveTo()
	 * @method bool isActiveToFilled()
	 * @method bool isActiveToChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveTo()
	 * @method \Bitrix\Main\Type\DateTime requireActiveTo()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetActiveTo()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetActiveTo()
	 * @method \Bitrix\Main\Type\DateTime fillActiveTo()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetSort()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetSort()
	 * @method \int fillSort()
	 * @method \string getName()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetName()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetName()
	 * @method \string fillName()
	 * @method \int getPreviewPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setPreviewPicture(\int|\Bitrix\Main\DB\SqlExpression $previewPicture)
	 * @method bool hasPreviewPicture()
	 * @method bool isPreviewPictureFilled()
	 * @method bool isPreviewPictureChanged()
	 * @method \int remindActualPreviewPicture()
	 * @method \int requirePreviewPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetPreviewPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetPreviewPicture()
	 * @method \int fillPreviewPicture()
	 * @method \string getPreviewText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setPreviewText(\string|\Bitrix\Main\DB\SqlExpression $previewText)
	 * @method bool hasPreviewText()
	 * @method bool isPreviewTextFilled()
	 * @method bool isPreviewTextChanged()
	 * @method \string remindActualPreviewText()
	 * @method \string requirePreviewText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetPreviewText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetPreviewText()
	 * @method \string fillPreviewText()
	 * @method \string getPreviewTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setPreviewTextType(\string|\Bitrix\Main\DB\SqlExpression $previewTextType)
	 * @method bool hasPreviewTextType()
	 * @method bool isPreviewTextTypeFilled()
	 * @method bool isPreviewTextTypeChanged()
	 * @method \string remindActualPreviewTextType()
	 * @method \string requirePreviewTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetPreviewTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetPreviewTextType()
	 * @method \string fillPreviewTextType()
	 * @method \int getDetailPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setDetailPicture(\int|\Bitrix\Main\DB\SqlExpression $detailPicture)
	 * @method bool hasDetailPicture()
	 * @method bool isDetailPictureFilled()
	 * @method bool isDetailPictureChanged()
	 * @method \int remindActualDetailPicture()
	 * @method \int requireDetailPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetDetailPicture()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetDetailPicture()
	 * @method \int fillDetailPicture()
	 * @method \string getDetailText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setDetailText(\string|\Bitrix\Main\DB\SqlExpression $detailText)
	 * @method bool hasDetailText()
	 * @method bool isDetailTextFilled()
	 * @method bool isDetailTextChanged()
	 * @method \string remindActualDetailText()
	 * @method \string requireDetailText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetDetailText()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetDetailText()
	 * @method \string fillDetailText()
	 * @method \string getDetailTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setDetailTextType(\string|\Bitrix\Main\DB\SqlExpression $detailTextType)
	 * @method bool hasDetailTextType()
	 * @method bool isDetailTextTypeFilled()
	 * @method bool isDetailTextTypeChanged()
	 * @method \string remindActualDetailTextType()
	 * @method \string requireDetailTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetDetailTextType()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetDetailTextType()
	 * @method \string fillDetailTextType()
	 * @method \string getSearchableContent()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setSearchableContent(\string|\Bitrix\Main\DB\SqlExpression $searchableContent)
	 * @method bool hasSearchableContent()
	 * @method bool isSearchableContentFilled()
	 * @method bool isSearchableContentChanged()
	 * @method \string remindActualSearchableContent()
	 * @method \string requireSearchableContent()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetSearchableContent()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetSearchableContent()
	 * @method \string fillSearchableContent()
	 * @method \int getWfStatusId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setWfStatusId(\int|\Bitrix\Main\DB\SqlExpression $wfStatusId)
	 * @method bool hasWfStatusId()
	 * @method bool isWfStatusIdFilled()
	 * @method bool isWfStatusIdChanged()
	 * @method \int remindActualWfStatusId()
	 * @method \int requireWfStatusId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetWfStatusId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetWfStatusId()
	 * @method \int fillWfStatusId()
	 * @method \int getWfParentElementId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setWfParentElementId(\int|\Bitrix\Main\DB\SqlExpression $wfParentElementId)
	 * @method bool hasWfParentElementId()
	 * @method bool isWfParentElementIdFilled()
	 * @method bool isWfParentElementIdChanged()
	 * @method \int remindActualWfParentElementId()
	 * @method \int requireWfParentElementId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetWfParentElementId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetWfParentElementId()
	 * @method \int fillWfParentElementId()
	 * @method \string getWfNew()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setWfNew(\string|\Bitrix\Main\DB\SqlExpression $wfNew)
	 * @method bool hasWfNew()
	 * @method bool isWfNewFilled()
	 * @method bool isWfNewChanged()
	 * @method \string remindActualWfNew()
	 * @method \string requireWfNew()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetWfNew()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetWfNew()
	 * @method \string fillWfNew()
	 * @method \int getWfLockedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setWfLockedBy(\int|\Bitrix\Main\DB\SqlExpression $wfLockedBy)
	 * @method bool hasWfLockedBy()
	 * @method bool isWfLockedByFilled()
	 * @method bool isWfLockedByChanged()
	 * @method \int remindActualWfLockedBy()
	 * @method \int requireWfLockedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetWfLockedBy()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetWfLockedBy()
	 * @method \int fillWfLockedBy()
	 * @method \Bitrix\Main\Type\DateTime getWfDateLock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setWfDateLock(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $wfDateLock)
	 * @method bool hasWfDateLock()
	 * @method bool isWfDateLockFilled()
	 * @method bool isWfDateLockChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualWfDateLock()
	 * @method \Bitrix\Main\Type\DateTime requireWfDateLock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetWfDateLock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetWfDateLock()
	 * @method \Bitrix\Main\Type\DateTime fillWfDateLock()
	 * @method \string getWfComments()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setWfComments(\string|\Bitrix\Main\DB\SqlExpression $wfComments)
	 * @method bool hasWfComments()
	 * @method bool isWfCommentsFilled()
	 * @method bool isWfCommentsChanged()
	 * @method \string remindActualWfComments()
	 * @method \string requireWfComments()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetWfComments()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetWfComments()
	 * @method \string fillWfComments()
	 * @method \boolean getInSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setInSections(\boolean|\Bitrix\Main\DB\SqlExpression $inSections)
	 * @method bool hasInSections()
	 * @method bool isInSectionsFilled()
	 * @method bool isInSectionsChanged()
	 * @method \boolean remindActualInSections()
	 * @method \boolean requireInSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetInSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetInSections()
	 * @method \boolean fillInSections()
	 * @method \string getXmlId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetXmlId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetCode()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetCode()
	 * @method \string fillCode()
	 * @method \string getTags()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setTags(\string|\Bitrix\Main\DB\SqlExpression $tags)
	 * @method bool hasTags()
	 * @method bool isTagsFilled()
	 * @method bool isTagsChanged()
	 * @method \string remindActualTags()
	 * @method \string requireTags()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetTags()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetTags()
	 * @method \string fillTags()
	 * @method \string getTmpId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setTmpId(\string|\Bitrix\Main\DB\SqlExpression $tmpId)
	 * @method bool hasTmpId()
	 * @method bool isTmpIdFilled()
	 * @method bool isTmpIdChanged()
	 * @method \string remindActualTmpId()
	 * @method \string requireTmpId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetTmpId()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetTmpId()
	 * @method \string fillTmpId()
	 * @method \int getShowCounter()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setShowCounter(\int|\Bitrix\Main\DB\SqlExpression $showCounter)
	 * @method bool hasShowCounter()
	 * @method bool isShowCounterFilled()
	 * @method bool isShowCounterChanged()
	 * @method \int remindActualShowCounter()
	 * @method \int requireShowCounter()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetShowCounter()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetShowCounter()
	 * @method \int fillShowCounter()
	 * @method \Bitrix\Main\Type\DateTime getShowCounterStart()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setShowCounterStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $showCounterStart)
	 * @method bool hasShowCounterStart()
	 * @method bool isShowCounterStartFilled()
	 * @method bool isShowCounterStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualShowCounterStart()
	 * @method \Bitrix\Main\Type\DateTime requireShowCounterStart()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetShowCounterStart()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetShowCounterStart()
	 * @method \Bitrix\Main\Type\DateTime fillShowCounterStart()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetIblock()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 * @method \Bitrix\Iblock\EO_Element getWfParentElement()
	 * @method \Bitrix\Iblock\EO_Element remindActualWfParentElement()
	 * @method \Bitrix\Iblock\EO_Element requireWfParentElement()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setWfParentElement(\Bitrix\Iblock\EO_Element $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetWfParentElement()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetWfParentElement()
	 * @method bool hasWfParentElement()
	 * @method bool isWfParentElementFilled()
	 * @method bool isWfParentElementChanged()
	 * @method \Bitrix\Iblock\EO_Element fillWfParentElement()
	 * @method \Bitrix\Iblock\EO_Section getIblockSection()
	 * @method \Bitrix\Iblock\EO_Section remindActualIblockSection()
	 * @method \Bitrix\Iblock\EO_Section requireIblockSection()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setIblockSection(\Bitrix\Iblock\EO_Section $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetIblockSection()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetIblockSection()
	 * @method bool hasIblockSection()
	 * @method bool isIblockSectionFilled()
	 * @method bool isIblockSectionChanged()
	 * @method \Bitrix\Iblock\EO_Section fillIblockSection()
	 * @method \Bitrix\Main\EO_User getModifiedByUser()
	 * @method \Bitrix\Main\EO_User remindActualModifiedByUser()
	 * @method \Bitrix\Main\EO_User requireModifiedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setModifiedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetModifiedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetModifiedByUser()
	 * @method bool hasModifiedByUser()
	 * @method bool isModifiedByUserFilled()
	 * @method bool isModifiedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillModifiedByUser()
	 * @method \Bitrix\Main\EO_User getCreatedByUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedByUser()
	 * @method \Bitrix\Main\EO_User requireCreatedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setCreatedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetCreatedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetCreatedByUser()
	 * @method bool hasCreatedByUser()
	 * @method bool isCreatedByUserFilled()
	 * @method bool isCreatedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User getWfLockedByUser()
	 * @method \Bitrix\Main\EO_User remindActualWfLockedByUser()
	 * @method \Bitrix\Main\EO_User requireWfLockedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 setWfLockedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetWfLockedByUser()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetWfLockedByUser()
	 * @method bool hasWfLockedByUser()
	 * @method bool isWfLockedByUserFilled()
	 * @method bool isWfLockedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillWfLockedByUser()
	 * @method \Bitrix\Iblock\EO_Section_Collection getSections()
	 * @method \Bitrix\Iblock\EO_Section_Collection requireSections()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillSections()
	 * @method bool hasSections()
	 * @method bool isSectionsFilled()
	 * @method bool isSectionsChanged()
	 * @method void addToSections(\Bitrix\Iblock\EO_Section $section)
	 * @method void removeFromSections(\Bitrix\Iblock\EO_Section $section)
	 * @method void removeAllSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 resetSections()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unsetSections()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 set($fieldName, $value)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 reset($fieldName)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV1 wakeUp($data)
	 */
	class EO_ElementV1 {
		/* @var \Bitrix\Iblock\ORM\ElementV1Table */
		static public $dataClass = '\Bitrix\Iblock\ORM\ElementV1Table';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock\ORM {
	/**
	 * EO_ElementV1_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getModifiedByList()
	 * @method \int[] fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \int[] getIblockIdList()
	 * @method \int[] fillIblockId()
	 * @method \int[] getIblockSectionIdList()
	 * @method \int[] fillIblockSectionId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveFromList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveToList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveTo()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getPreviewPictureList()
	 * @method \int[] fillPreviewPicture()
	 * @method \string[] getPreviewTextList()
	 * @method \string[] fillPreviewText()
	 * @method \string[] getPreviewTextTypeList()
	 * @method \string[] fillPreviewTextType()
	 * @method \int[] getDetailPictureList()
	 * @method \int[] fillDetailPicture()
	 * @method \string[] getDetailTextList()
	 * @method \string[] fillDetailText()
	 * @method \string[] getDetailTextTypeList()
	 * @method \string[] fillDetailTextType()
	 * @method \string[] getSearchableContentList()
	 * @method \string[] fillSearchableContent()
	 * @method \int[] getWfStatusIdList()
	 * @method \int[] fillWfStatusId()
	 * @method \int[] getWfParentElementIdList()
	 * @method \int[] fillWfParentElementId()
	 * @method \string[] getWfNewList()
	 * @method \string[] fillWfNew()
	 * @method \int[] getWfLockedByList()
	 * @method \int[] fillWfLockedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getWfDateLockList()
	 * @method \Bitrix\Main\Type\DateTime[] fillWfDateLock()
	 * @method \string[] getWfCommentsList()
	 * @method \string[] fillWfComments()
	 * @method \boolean[] getInSectionsList()
	 * @method \boolean[] fillInSections()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getTagsList()
	 * @method \string[] fillTags()
	 * @method \string[] getTmpIdList()
	 * @method \string[] fillTmpId()
	 * @method \int[] getShowCounterList()
	 * @method \int[] fillShowCounter()
	 * @method \Bitrix\Main\Type\DateTime[] getShowCounterStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillShowCounterStart()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 * @method \Bitrix\Iblock\EO_Element[] getWfParentElementList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection getWfParentElementCollection()
	 * @method \Bitrix\Iblock\EO_Element_Collection fillWfParentElement()
	 * @method \Bitrix\Iblock\EO_Section[] getIblockSectionList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection getIblockSectionCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillIblockSection()
	 * @method \Bitrix\Main\EO_User[] getModifiedByUserList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection getModifiedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifiedByUser()
	 * @method \Bitrix\Main\EO_User[] getCreatedByUserList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection getCreatedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User[] getWfLockedByUserList()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection getWfLockedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillWfLockedByUser()
	 * @method \Bitrix\Iblock\EO_Section_Collection[] getSectionsList()
	 * @method \Bitrix\Iblock\EO_Section_Collection getSectionsCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillSections()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\ORM\EO_ElementV1 $object)
	 * @method bool has(\Bitrix\Iblock\ORM\EO_ElementV1 $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 getByPrimary($primary)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1[] getAll()
	 * @method bool remove(\Bitrix\Iblock\ORM\EO_ElementV1 $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV1_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ElementV1_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\ORM\ElementV1Table */
		static public $dataClass = '\Bitrix\Iblock\ORM\ElementV1Table';
	}
}
namespace Bitrix\Iblock\ORM {
	/**
	 * @method static EO_ElementV1_Query query()
	 * @method static EO_ElementV1_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ElementV1_Result getById($id)
	 * @method static EO_ElementV1_Result getList(array $parameters = array())
	 * @method static EO_ElementV1_Entity getEntity()
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV1 createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV1_Collection createCollection()
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV1 wakeUpObject($row)
	 * @method static \Bitrix\Iblock\ORM\EO_ElementV1_Collection wakeUpCollection($rows)
	 */
	class ElementV1Table extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_ElementV1_Result exec()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 fetchObject()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection fetchCollection()
	 */
	class EO_ElementV1_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 fetchObject()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection fetchCollection()
	 */
	class EO_ElementV1_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection createCollection()
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1 wakeUpObject($row)
	 * @method \Bitrix\Iblock\ORM\EO_ElementV1_Collection wakeUpCollection($rows)
	 */
	class EO_ElementV1_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\IblockSiteTable */
namespace Bitrix\Iblock {
	/**
	 * EO_IblockSite
	 * @see \Bitrix\Iblock\IblockSiteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_IblockSite setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \string getSiteId()
	 * @method \Bitrix\Iblock\EO_IblockSite setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_IblockSite setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_IblockSite resetIblock()
	 * @method \Bitrix\Iblock\EO_IblockSite unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 * @method \Bitrix\Main\EO_Site getSite()
	 * @method \Bitrix\Main\EO_Site remindActualSite()
	 * @method \Bitrix\Main\EO_Site requireSite()
	 * @method \Bitrix\Iblock\EO_IblockSite setSite(\Bitrix\Main\EO_Site $object)
	 * @method \Bitrix\Iblock\EO_IblockSite resetSite()
	 * @method \Bitrix\Iblock\EO_IblockSite unsetSite()
	 * @method bool hasSite()
	 * @method bool isSiteFilled()
	 * @method bool isSiteChanged()
	 * @method \Bitrix\Main\EO_Site fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockSite set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_IblockSite reset($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockSite unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_IblockSite wakeUp($data)
	 */
	class EO_IblockSite {
		/* @var \Bitrix\Iblock\IblockSiteTable */
		static public $dataClass = '\Bitrix\Iblock\IblockSiteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_IblockSite_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockIdList()
	 * @method \string[] getSiteIdList()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_IblockSite_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 * @method \Bitrix\Main\EO_Site[] getSiteList()
	 * @method \Bitrix\Iblock\EO_IblockSite_Collection getSiteCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_IblockSite $object)
	 * @method bool has(\Bitrix\Iblock\EO_IblockSite $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockSite getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockSite[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_IblockSite $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_IblockSite_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_IblockSite current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_IblockSite_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\IblockSiteTable */
		static public $dataClass = '\Bitrix\Iblock\IblockSiteTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_IblockSite_Query query()
	 * @method static EO_IblockSite_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_IblockSite_Result getById($id)
	 * @method static EO_IblockSite_Result getList(array $parameters = array())
	 * @method static EO_IblockSite_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_IblockSite createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_IblockSite_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_IblockSite wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_IblockSite_Collection wakeUpCollection($rows)
	 */
	class IblockSiteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_IblockSite_Result exec()
	 * @method \Bitrix\Iblock\EO_IblockSite fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockSite_Collection fetchCollection()
	 */
	class EO_IblockSite_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockSite fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockSite_Collection fetchCollection()
	 */
	class EO_IblockSite_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockSite createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_IblockSite_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_IblockSite wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_IblockSite_Collection wakeUpCollection($rows)
	 */
	class EO_IblockSite_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\IblockTable */
namespace Bitrix\Iblock {
	/**
	 * Iblock
	 * @see \Bitrix\Iblock\IblockTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\Iblock setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Iblock\Iblock setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Iblock\Iblock resetTimestampX()
	 * @method \Bitrix\Iblock\Iblock unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \string getIblockTypeId()
	 * @method \Bitrix\Iblock\Iblock setIblockTypeId(\string|\Bitrix\Main\DB\SqlExpression $iblockTypeId)
	 * @method bool hasIblockTypeId()
	 * @method bool isIblockTypeIdFilled()
	 * @method bool isIblockTypeIdChanged()
	 * @method \string remindActualIblockTypeId()
	 * @method \string requireIblockTypeId()
	 * @method \Bitrix\Iblock\Iblock resetIblockTypeId()
	 * @method \Bitrix\Iblock\Iblock unsetIblockTypeId()
	 * @method \string fillIblockTypeId()
	 * @method \string getLid()
	 * @method \Bitrix\Iblock\Iblock setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Iblock\Iblock resetLid()
	 * @method \Bitrix\Iblock\Iblock unsetLid()
	 * @method \string fillLid()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\Iblock setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Iblock\Iblock resetCode()
	 * @method \Bitrix\Iblock\Iblock unsetCode()
	 * @method \string fillCode()
	 * @method \string getApiCode()
	 * @method \Bitrix\Iblock\Iblock setApiCode(\string|\Bitrix\Main\DB\SqlExpression $apiCode)
	 * @method bool hasApiCode()
	 * @method bool isApiCodeFilled()
	 * @method bool isApiCodeChanged()
	 * @method \string remindActualApiCode()
	 * @method \string requireApiCode()
	 * @method \Bitrix\Iblock\Iblock resetApiCode()
	 * @method \Bitrix\Iblock\Iblock unsetApiCode()
	 * @method \string fillApiCode()
	 * @method \string getName()
	 * @method \Bitrix\Iblock\Iblock setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Iblock\Iblock resetName()
	 * @method \Bitrix\Iblock\Iblock unsetName()
	 * @method \string fillName()
	 * @method \boolean getActive()
	 * @method \Bitrix\Iblock\Iblock setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Iblock\Iblock resetActive()
	 * @method \Bitrix\Iblock\Iblock unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\Iblock setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\Iblock resetSort()
	 * @method \Bitrix\Iblock\Iblock unsetSort()
	 * @method \int fillSort()
	 * @method \string getListPageUrl()
	 * @method \Bitrix\Iblock\Iblock setListPageUrl(\string|\Bitrix\Main\DB\SqlExpression $listPageUrl)
	 * @method bool hasListPageUrl()
	 * @method bool isListPageUrlFilled()
	 * @method bool isListPageUrlChanged()
	 * @method \string remindActualListPageUrl()
	 * @method \string requireListPageUrl()
	 * @method \Bitrix\Iblock\Iblock resetListPageUrl()
	 * @method \Bitrix\Iblock\Iblock unsetListPageUrl()
	 * @method \string fillListPageUrl()
	 * @method \string getDetailPageUrl()
	 * @method \Bitrix\Iblock\Iblock setDetailPageUrl(\string|\Bitrix\Main\DB\SqlExpression $detailPageUrl)
	 * @method bool hasDetailPageUrl()
	 * @method bool isDetailPageUrlFilled()
	 * @method bool isDetailPageUrlChanged()
	 * @method \string remindActualDetailPageUrl()
	 * @method \string requireDetailPageUrl()
	 * @method \Bitrix\Iblock\Iblock resetDetailPageUrl()
	 * @method \Bitrix\Iblock\Iblock unsetDetailPageUrl()
	 * @method \string fillDetailPageUrl()
	 * @method \string getSectionPageUrl()
	 * @method \Bitrix\Iblock\Iblock setSectionPageUrl(\string|\Bitrix\Main\DB\SqlExpression $sectionPageUrl)
	 * @method bool hasSectionPageUrl()
	 * @method bool isSectionPageUrlFilled()
	 * @method bool isSectionPageUrlChanged()
	 * @method \string remindActualSectionPageUrl()
	 * @method \string requireSectionPageUrl()
	 * @method \Bitrix\Iblock\Iblock resetSectionPageUrl()
	 * @method \Bitrix\Iblock\Iblock unsetSectionPageUrl()
	 * @method \string fillSectionPageUrl()
	 * @method \string getCanonicalPageUrl()
	 * @method \Bitrix\Iblock\Iblock setCanonicalPageUrl(\string|\Bitrix\Main\DB\SqlExpression $canonicalPageUrl)
	 * @method bool hasCanonicalPageUrl()
	 * @method bool isCanonicalPageUrlFilled()
	 * @method bool isCanonicalPageUrlChanged()
	 * @method \string remindActualCanonicalPageUrl()
	 * @method \string requireCanonicalPageUrl()
	 * @method \Bitrix\Iblock\Iblock resetCanonicalPageUrl()
	 * @method \Bitrix\Iblock\Iblock unsetCanonicalPageUrl()
	 * @method \string fillCanonicalPageUrl()
	 * @method \int getPicture()
	 * @method \Bitrix\Iblock\Iblock setPicture(\int|\Bitrix\Main\DB\SqlExpression $picture)
	 * @method bool hasPicture()
	 * @method bool isPictureFilled()
	 * @method bool isPictureChanged()
	 * @method \int remindActualPicture()
	 * @method \int requirePicture()
	 * @method \Bitrix\Iblock\Iblock resetPicture()
	 * @method \Bitrix\Iblock\Iblock unsetPicture()
	 * @method \int fillPicture()
	 * @method \string getDescription()
	 * @method \Bitrix\Iblock\Iblock setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Iblock\Iblock resetDescription()
	 * @method \Bitrix\Iblock\Iblock unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getDescriptionType()
	 * @method \Bitrix\Iblock\Iblock setDescriptionType(\string|\Bitrix\Main\DB\SqlExpression $descriptionType)
	 * @method bool hasDescriptionType()
	 * @method bool isDescriptionTypeFilled()
	 * @method bool isDescriptionTypeChanged()
	 * @method \string remindActualDescriptionType()
	 * @method \string requireDescriptionType()
	 * @method \Bitrix\Iblock\Iblock resetDescriptionType()
	 * @method \Bitrix\Iblock\Iblock unsetDescriptionType()
	 * @method \string fillDescriptionType()
	 * @method \string getXmlId()
	 * @method \Bitrix\Iblock\Iblock setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Iblock\Iblock resetXmlId()
	 * @method \Bitrix\Iblock\Iblock unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getTmpId()
	 * @method \Bitrix\Iblock\Iblock setTmpId(\string|\Bitrix\Main\DB\SqlExpression $tmpId)
	 * @method bool hasTmpId()
	 * @method bool isTmpIdFilled()
	 * @method bool isTmpIdChanged()
	 * @method \string remindActualTmpId()
	 * @method \string requireTmpId()
	 * @method \Bitrix\Iblock\Iblock resetTmpId()
	 * @method \Bitrix\Iblock\Iblock unsetTmpId()
	 * @method \string fillTmpId()
	 * @method \boolean getIndexElement()
	 * @method \Bitrix\Iblock\Iblock setIndexElement(\boolean|\Bitrix\Main\DB\SqlExpression $indexElement)
	 * @method bool hasIndexElement()
	 * @method bool isIndexElementFilled()
	 * @method bool isIndexElementChanged()
	 * @method \boolean remindActualIndexElement()
	 * @method \boolean requireIndexElement()
	 * @method \Bitrix\Iblock\Iblock resetIndexElement()
	 * @method \Bitrix\Iblock\Iblock unsetIndexElement()
	 * @method \boolean fillIndexElement()
	 * @method \boolean getIndexSection()
	 * @method \Bitrix\Iblock\Iblock setIndexSection(\boolean|\Bitrix\Main\DB\SqlExpression $indexSection)
	 * @method bool hasIndexSection()
	 * @method bool isIndexSectionFilled()
	 * @method bool isIndexSectionChanged()
	 * @method \boolean remindActualIndexSection()
	 * @method \boolean requireIndexSection()
	 * @method \Bitrix\Iblock\Iblock resetIndexSection()
	 * @method \Bitrix\Iblock\Iblock unsetIndexSection()
	 * @method \boolean fillIndexSection()
	 * @method \boolean getWorkflow()
	 * @method \Bitrix\Iblock\Iblock setWorkflow(\boolean|\Bitrix\Main\DB\SqlExpression $workflow)
	 * @method bool hasWorkflow()
	 * @method bool isWorkflowFilled()
	 * @method bool isWorkflowChanged()
	 * @method \boolean remindActualWorkflow()
	 * @method \boolean requireWorkflow()
	 * @method \Bitrix\Iblock\Iblock resetWorkflow()
	 * @method \Bitrix\Iblock\Iblock unsetWorkflow()
	 * @method \boolean fillWorkflow()
	 * @method \boolean getBizproc()
	 * @method \Bitrix\Iblock\Iblock setBizproc(\boolean|\Bitrix\Main\DB\SqlExpression $bizproc)
	 * @method bool hasBizproc()
	 * @method bool isBizprocFilled()
	 * @method bool isBizprocChanged()
	 * @method \boolean remindActualBizproc()
	 * @method \boolean requireBizproc()
	 * @method \Bitrix\Iblock\Iblock resetBizproc()
	 * @method \Bitrix\Iblock\Iblock unsetBizproc()
	 * @method \boolean fillBizproc()
	 * @method \string getSectionChooser()
	 * @method \Bitrix\Iblock\Iblock setSectionChooser(\string|\Bitrix\Main\DB\SqlExpression $sectionChooser)
	 * @method bool hasSectionChooser()
	 * @method bool isSectionChooserFilled()
	 * @method bool isSectionChooserChanged()
	 * @method \string remindActualSectionChooser()
	 * @method \string requireSectionChooser()
	 * @method \Bitrix\Iblock\Iblock resetSectionChooser()
	 * @method \Bitrix\Iblock\Iblock unsetSectionChooser()
	 * @method \string fillSectionChooser()
	 * @method \string getListMode()
	 * @method \Bitrix\Iblock\Iblock setListMode(\string|\Bitrix\Main\DB\SqlExpression $listMode)
	 * @method bool hasListMode()
	 * @method bool isListModeFilled()
	 * @method bool isListModeChanged()
	 * @method \string remindActualListMode()
	 * @method \string requireListMode()
	 * @method \Bitrix\Iblock\Iblock resetListMode()
	 * @method \Bitrix\Iblock\Iblock unsetListMode()
	 * @method \string fillListMode()
	 * @method \string getRightsMode()
	 * @method \Bitrix\Iblock\Iblock setRightsMode(\string|\Bitrix\Main\DB\SqlExpression $rightsMode)
	 * @method bool hasRightsMode()
	 * @method bool isRightsModeFilled()
	 * @method bool isRightsModeChanged()
	 * @method \string remindActualRightsMode()
	 * @method \string requireRightsMode()
	 * @method \Bitrix\Iblock\Iblock resetRightsMode()
	 * @method \Bitrix\Iblock\Iblock unsetRightsMode()
	 * @method \string fillRightsMode()
	 * @method \boolean getSectionProperty()
	 * @method \Bitrix\Iblock\Iblock setSectionProperty(\boolean|\Bitrix\Main\DB\SqlExpression $sectionProperty)
	 * @method bool hasSectionProperty()
	 * @method bool isSectionPropertyFilled()
	 * @method bool isSectionPropertyChanged()
	 * @method \boolean remindActualSectionProperty()
	 * @method \boolean requireSectionProperty()
	 * @method \Bitrix\Iblock\Iblock resetSectionProperty()
	 * @method \Bitrix\Iblock\Iblock unsetSectionProperty()
	 * @method \boolean fillSectionProperty()
	 * @method \string getPropertyIndex()
	 * @method \Bitrix\Iblock\Iblock setPropertyIndex(\string|\Bitrix\Main\DB\SqlExpression $propertyIndex)
	 * @method bool hasPropertyIndex()
	 * @method bool isPropertyIndexFilled()
	 * @method bool isPropertyIndexChanged()
	 * @method \string remindActualPropertyIndex()
	 * @method \string requirePropertyIndex()
	 * @method \Bitrix\Iblock\Iblock resetPropertyIndex()
	 * @method \Bitrix\Iblock\Iblock unsetPropertyIndex()
	 * @method \string fillPropertyIndex()
	 * @method \string getVersion()
	 * @method \Bitrix\Iblock\Iblock setVersion(\string|\Bitrix\Main\DB\SqlExpression $version)
	 * @method bool hasVersion()
	 * @method bool isVersionFilled()
	 * @method bool isVersionChanged()
	 * @method \string remindActualVersion()
	 * @method \string requireVersion()
	 * @method \Bitrix\Iblock\Iblock resetVersion()
	 * @method \Bitrix\Iblock\Iblock unsetVersion()
	 * @method \string fillVersion()
	 * @method \int getLastConvElement()
	 * @method \Bitrix\Iblock\Iblock setLastConvElement(\int|\Bitrix\Main\DB\SqlExpression $lastConvElement)
	 * @method bool hasLastConvElement()
	 * @method bool isLastConvElementFilled()
	 * @method bool isLastConvElementChanged()
	 * @method \int remindActualLastConvElement()
	 * @method \int requireLastConvElement()
	 * @method \Bitrix\Iblock\Iblock resetLastConvElement()
	 * @method \Bitrix\Iblock\Iblock unsetLastConvElement()
	 * @method \int fillLastConvElement()
	 * @method \int getSocnetGroupId()
	 * @method \Bitrix\Iblock\Iblock setSocnetGroupId(\int|\Bitrix\Main\DB\SqlExpression $socnetGroupId)
	 * @method bool hasSocnetGroupId()
	 * @method bool isSocnetGroupIdFilled()
	 * @method bool isSocnetGroupIdChanged()
	 * @method \int remindActualSocnetGroupId()
	 * @method \int requireSocnetGroupId()
	 * @method \Bitrix\Iblock\Iblock resetSocnetGroupId()
	 * @method \Bitrix\Iblock\Iblock unsetSocnetGroupId()
	 * @method \int fillSocnetGroupId()
	 * @method \string getEditFileBefore()
	 * @method \Bitrix\Iblock\Iblock setEditFileBefore(\string|\Bitrix\Main\DB\SqlExpression $editFileBefore)
	 * @method bool hasEditFileBefore()
	 * @method bool isEditFileBeforeFilled()
	 * @method bool isEditFileBeforeChanged()
	 * @method \string remindActualEditFileBefore()
	 * @method \string requireEditFileBefore()
	 * @method \Bitrix\Iblock\Iblock resetEditFileBefore()
	 * @method \Bitrix\Iblock\Iblock unsetEditFileBefore()
	 * @method \string fillEditFileBefore()
	 * @method \string getEditFileAfter()
	 * @method \Bitrix\Iblock\Iblock setEditFileAfter(\string|\Bitrix\Main\DB\SqlExpression $editFileAfter)
	 * @method bool hasEditFileAfter()
	 * @method bool isEditFileAfterFilled()
	 * @method bool isEditFileAfterChanged()
	 * @method \string remindActualEditFileAfter()
	 * @method \string requireEditFileAfter()
	 * @method \Bitrix\Iblock\Iblock resetEditFileAfter()
	 * @method \Bitrix\Iblock\Iblock unsetEditFileAfter()
	 * @method \string fillEditFileAfter()
	 * @method \Bitrix\Iblock\EO_Type getType()
	 * @method \Bitrix\Iblock\EO_Type remindActualType()
	 * @method \Bitrix\Iblock\EO_Type requireType()
	 * @method \Bitrix\Iblock\Iblock setType(\Bitrix\Iblock\EO_Type $object)
	 * @method \Bitrix\Iblock\Iblock resetType()
	 * @method \Bitrix\Iblock\Iblock unsetType()
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \Bitrix\Iblock\EO_Type fillType()
	 * @method \Bitrix\Iblock\EO_Property_Collection getProperties()
	 * @method \Bitrix\Iblock\EO_Property_Collection requireProperties()
	 * @method \Bitrix\Iblock\EO_Property_Collection fillProperties()
	 * @method bool hasProperties()
	 * @method bool isPropertiesFilled()
	 * @method bool isPropertiesChanged()
	 * @method void addToProperties(\Bitrix\Iblock\Property $property)
	 * @method void removeFromProperties(\Bitrix\Iblock\Property $property)
	 * @method void removeAllProperties()
	 * @method \Bitrix\Iblock\Iblock resetProperties()
	 * @method \Bitrix\Iblock\Iblock unsetProperties()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\Iblock set($fieldName, $value)
	 * @method \Bitrix\Iblock\Iblock reset($fieldName)
	 * @method \Bitrix\Iblock\Iblock unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\Iblock wakeUp($data)
	 */
	class EO_Iblock {
		/* @var \Bitrix\Iblock\IblockTable */
		static public $dataClass = '\Bitrix\Iblock\IblockTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_Iblock_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \string[] getIblockTypeIdList()
	 * @method \string[] fillIblockTypeId()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getApiCodeList()
	 * @method \string[] fillApiCode()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getListPageUrlList()
	 * @method \string[] fillListPageUrl()
	 * @method \string[] getDetailPageUrlList()
	 * @method \string[] fillDetailPageUrl()
	 * @method \string[] getSectionPageUrlList()
	 * @method \string[] fillSectionPageUrl()
	 * @method \string[] getCanonicalPageUrlList()
	 * @method \string[] fillCanonicalPageUrl()
	 * @method \int[] getPictureList()
	 * @method \int[] fillPicture()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getDescriptionTypeList()
	 * @method \string[] fillDescriptionType()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getTmpIdList()
	 * @method \string[] fillTmpId()
	 * @method \boolean[] getIndexElementList()
	 * @method \boolean[] fillIndexElement()
	 * @method \boolean[] getIndexSectionList()
	 * @method \boolean[] fillIndexSection()
	 * @method \boolean[] getWorkflowList()
	 * @method \boolean[] fillWorkflow()
	 * @method \boolean[] getBizprocList()
	 * @method \boolean[] fillBizproc()
	 * @method \string[] getSectionChooserList()
	 * @method \string[] fillSectionChooser()
	 * @method \string[] getListModeList()
	 * @method \string[] fillListMode()
	 * @method \string[] getRightsModeList()
	 * @method \string[] fillRightsMode()
	 * @method \boolean[] getSectionPropertyList()
	 * @method \boolean[] fillSectionProperty()
	 * @method \string[] getPropertyIndexList()
	 * @method \string[] fillPropertyIndex()
	 * @method \string[] getVersionList()
	 * @method \string[] fillVersion()
	 * @method \int[] getLastConvElementList()
	 * @method \int[] fillLastConvElement()
	 * @method \int[] getSocnetGroupIdList()
	 * @method \int[] fillSocnetGroupId()
	 * @method \string[] getEditFileBeforeList()
	 * @method \string[] fillEditFileBefore()
	 * @method \string[] getEditFileAfterList()
	 * @method \string[] fillEditFileAfter()
	 * @method \Bitrix\Iblock\EO_Type[] getTypeList()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection getTypeCollection()
	 * @method \Bitrix\Iblock\EO_Type_Collection fillType()
	 * @method \Bitrix\Iblock\EO_Property_Collection[] getPropertiesList()
	 * @method \Bitrix\Iblock\EO_Property_Collection getPropertiesCollection()
	 * @method \Bitrix\Iblock\EO_Property_Collection fillProperties()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\Iblock $object)
	 * @method bool has(\Bitrix\Iblock\Iblock $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\Iblock getByPrimary($primary)
	 * @method \Bitrix\Iblock\Iblock[] getAll()
	 * @method bool remove(\Bitrix\Iblock\Iblock $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_Iblock_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\Iblock current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Iblock_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\IblockTable */
		static public $dataClass = '\Bitrix\Iblock\IblockTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_Iblock_Query query()
	 * @method static EO_Iblock_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Iblock_Result getById($id)
	 * @method static EO_Iblock_Result getList(array $parameters = array())
	 * @method static EO_Iblock_Entity getEntity()
	 * @method static \Bitrix\Iblock\Iblock createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_Iblock_Collection createCollection()
	 * @method static \Bitrix\Iblock\Iblock wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_Iblock_Collection wakeUpCollection($rows)
	 */
	class IblockTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Iblock_Result exec()
	 * @method \Bitrix\Iblock\Iblock fetchObject()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fetchCollection()
	 */
	class EO_Iblock_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\Iblock fetchObject()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fetchCollection()
	 */
	class EO_Iblock_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\Iblock createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_Iblock_Collection createCollection()
	 * @method \Bitrix\Iblock\Iblock wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_Iblock_Collection wakeUpCollection($rows)
	 */
	class EO_Iblock_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\IblockRssTable */
namespace Bitrix\Iblock {
	/**
	 * EO_IblockRss
	 * @see \Bitrix\Iblock\IblockRssTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\EO_IblockRss setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_IblockRss setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int remindActualIblockId()
	 * @method \int requireIblockId()
	 * @method \Bitrix\Iblock\EO_IblockRss resetIblockId()
	 * @method \Bitrix\Iblock\EO_IblockRss unsetIblockId()
	 * @method \int fillIblockId()
	 * @method \string getNode()
	 * @method \Bitrix\Iblock\EO_IblockRss setNode(\string|\Bitrix\Main\DB\SqlExpression $node)
	 * @method bool hasNode()
	 * @method bool isNodeFilled()
	 * @method bool isNodeChanged()
	 * @method \string remindActualNode()
	 * @method \string requireNode()
	 * @method \Bitrix\Iblock\EO_IblockRss resetNode()
	 * @method \Bitrix\Iblock\EO_IblockRss unsetNode()
	 * @method \string fillNode()
	 * @method \string getNodeValue()
	 * @method \Bitrix\Iblock\EO_IblockRss setNodeValue(\string|\Bitrix\Main\DB\SqlExpression $nodeValue)
	 * @method bool hasNodeValue()
	 * @method bool isNodeValueFilled()
	 * @method bool isNodeValueChanged()
	 * @method \string remindActualNodeValue()
	 * @method \string requireNodeValue()
	 * @method \Bitrix\Iblock\EO_IblockRss resetNodeValue()
	 * @method \Bitrix\Iblock\EO_IblockRss unsetNodeValue()
	 * @method \string fillNodeValue()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_IblockRss setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_IblockRss resetIblock()
	 * @method \Bitrix\Iblock\EO_IblockRss unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockRss set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_IblockRss reset($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockRss unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_IblockRss wakeUp($data)
	 */
	class EO_IblockRss {
		/* @var \Bitrix\Iblock\IblockRssTable */
		static public $dataClass = '\Bitrix\Iblock\IblockRssTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_IblockRss_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getIblockIdList()
	 * @method \int[] fillIblockId()
	 * @method \string[] getNodeList()
	 * @method \string[] fillNode()
	 * @method \string[] getNodeValueList()
	 * @method \string[] fillNodeValue()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_IblockRss_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_IblockRss $object)
	 * @method bool has(\Bitrix\Iblock\EO_IblockRss $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockRss getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockRss[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_IblockRss $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_IblockRss_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_IblockRss current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_IblockRss_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\IblockRssTable */
		static public $dataClass = '\Bitrix\Iblock\IblockRssTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_IblockRss_Query query()
	 * @method static EO_IblockRss_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_IblockRss_Result getById($id)
	 * @method static EO_IblockRss_Result getList(array $parameters = array())
	 * @method static EO_IblockRss_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_IblockRss createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_IblockRss_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_IblockRss wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_IblockRss_Collection wakeUpCollection($rows)
	 */
	class IblockRssTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_IblockRss_Result exec()
	 * @method \Bitrix\Iblock\EO_IblockRss fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockRss_Collection fetchCollection()
	 */
	class EO_IblockRss_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockRss fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockRss_Collection fetchCollection()
	 */
	class EO_IblockRss_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockRss createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_IblockRss_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_IblockRss wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_IblockRss_Collection wakeUpCollection($rows)
	 */
	class EO_IblockRss_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\SectionTable */
namespace Bitrix\Iblock {
	/**
	 * EO_Section
	 * @see \Bitrix\Iblock\SectionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\EO_Section setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Iblock\EO_Section setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Iblock\EO_Section resetTimestampX()
	 * @method \Bitrix\Iblock\EO_Section unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getModifiedBy()
	 * @method \Bitrix\Iblock\EO_Section setModifiedBy(\int|\Bitrix\Main\DB\SqlExpression $modifiedBy)
	 * @method bool hasModifiedBy()
	 * @method bool isModifiedByFilled()
	 * @method bool isModifiedByChanged()
	 * @method \int remindActualModifiedBy()
	 * @method \int requireModifiedBy()
	 * @method \Bitrix\Iblock\EO_Section resetModifiedBy()
	 * @method \Bitrix\Iblock\EO_Section unsetModifiedBy()
	 * @method \int fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Iblock\EO_Section setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Iblock\EO_Section resetDateCreate()
	 * @method \Bitrix\Iblock\EO_Section unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Iblock\EO_Section setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Iblock\EO_Section resetCreatedBy()
	 * @method \Bitrix\Iblock\EO_Section unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_Section setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int remindActualIblockId()
	 * @method \int requireIblockId()
	 * @method \Bitrix\Iblock\EO_Section resetIblockId()
	 * @method \Bitrix\Iblock\EO_Section unsetIblockId()
	 * @method \int fillIblockId()
	 * @method \int getIblockSectionId()
	 * @method \Bitrix\Iblock\EO_Section setIblockSectionId(\int|\Bitrix\Main\DB\SqlExpression $iblockSectionId)
	 * @method bool hasIblockSectionId()
	 * @method bool isIblockSectionIdFilled()
	 * @method bool isIblockSectionIdChanged()
	 * @method \int remindActualIblockSectionId()
	 * @method \int requireIblockSectionId()
	 * @method \Bitrix\Iblock\EO_Section resetIblockSectionId()
	 * @method \Bitrix\Iblock\EO_Section unsetIblockSectionId()
	 * @method \int fillIblockSectionId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Iblock\EO_Section setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Iblock\EO_Section resetActive()
	 * @method \Bitrix\Iblock\EO_Section unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getGlobalActive()
	 * @method \Bitrix\Iblock\EO_Section setGlobalActive(\boolean|\Bitrix\Main\DB\SqlExpression $globalActive)
	 * @method bool hasGlobalActive()
	 * @method bool isGlobalActiveFilled()
	 * @method bool isGlobalActiveChanged()
	 * @method \boolean remindActualGlobalActive()
	 * @method \boolean requireGlobalActive()
	 * @method \Bitrix\Iblock\EO_Section resetGlobalActive()
	 * @method \Bitrix\Iblock\EO_Section unsetGlobalActive()
	 * @method \boolean fillGlobalActive()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\EO_Section setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\EO_Section resetSort()
	 * @method \Bitrix\Iblock\EO_Section unsetSort()
	 * @method \int fillSort()
	 * @method \string getName()
	 * @method \Bitrix\Iblock\EO_Section setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Iblock\EO_Section resetName()
	 * @method \Bitrix\Iblock\EO_Section unsetName()
	 * @method \string fillName()
	 * @method \int getPicture()
	 * @method \Bitrix\Iblock\EO_Section setPicture(\int|\Bitrix\Main\DB\SqlExpression $picture)
	 * @method bool hasPicture()
	 * @method bool isPictureFilled()
	 * @method bool isPictureChanged()
	 * @method \int remindActualPicture()
	 * @method \int requirePicture()
	 * @method \Bitrix\Iblock\EO_Section resetPicture()
	 * @method \Bitrix\Iblock\EO_Section unsetPicture()
	 * @method \int fillPicture()
	 * @method \int getLeftMargin()
	 * @method \Bitrix\Iblock\EO_Section setLeftMargin(\int|\Bitrix\Main\DB\SqlExpression $leftMargin)
	 * @method bool hasLeftMargin()
	 * @method bool isLeftMarginFilled()
	 * @method bool isLeftMarginChanged()
	 * @method \int remindActualLeftMargin()
	 * @method \int requireLeftMargin()
	 * @method \Bitrix\Iblock\EO_Section resetLeftMargin()
	 * @method \Bitrix\Iblock\EO_Section unsetLeftMargin()
	 * @method \int fillLeftMargin()
	 * @method \int getRightMargin()
	 * @method \Bitrix\Iblock\EO_Section setRightMargin(\int|\Bitrix\Main\DB\SqlExpression $rightMargin)
	 * @method bool hasRightMargin()
	 * @method bool isRightMarginFilled()
	 * @method bool isRightMarginChanged()
	 * @method \int remindActualRightMargin()
	 * @method \int requireRightMargin()
	 * @method \Bitrix\Iblock\EO_Section resetRightMargin()
	 * @method \Bitrix\Iblock\EO_Section unsetRightMargin()
	 * @method \int fillRightMargin()
	 * @method \int getDepthLevel()
	 * @method \Bitrix\Iblock\EO_Section setDepthLevel(\int|\Bitrix\Main\DB\SqlExpression $depthLevel)
	 * @method bool hasDepthLevel()
	 * @method bool isDepthLevelFilled()
	 * @method bool isDepthLevelChanged()
	 * @method \int remindActualDepthLevel()
	 * @method \int requireDepthLevel()
	 * @method \Bitrix\Iblock\EO_Section resetDepthLevel()
	 * @method \Bitrix\Iblock\EO_Section unsetDepthLevel()
	 * @method \int fillDepthLevel()
	 * @method \string getDescription()
	 * @method \Bitrix\Iblock\EO_Section setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Iblock\EO_Section resetDescription()
	 * @method \Bitrix\Iblock\EO_Section unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getDescriptionType()
	 * @method \Bitrix\Iblock\EO_Section setDescriptionType(\string|\Bitrix\Main\DB\SqlExpression $descriptionType)
	 * @method bool hasDescriptionType()
	 * @method bool isDescriptionTypeFilled()
	 * @method bool isDescriptionTypeChanged()
	 * @method \string remindActualDescriptionType()
	 * @method \string requireDescriptionType()
	 * @method \Bitrix\Iblock\EO_Section resetDescriptionType()
	 * @method \Bitrix\Iblock\EO_Section unsetDescriptionType()
	 * @method \string fillDescriptionType()
	 * @method \string getSearchableContent()
	 * @method \Bitrix\Iblock\EO_Section setSearchableContent(\string|\Bitrix\Main\DB\SqlExpression $searchableContent)
	 * @method bool hasSearchableContent()
	 * @method bool isSearchableContentFilled()
	 * @method bool isSearchableContentChanged()
	 * @method \string remindActualSearchableContent()
	 * @method \string requireSearchableContent()
	 * @method \Bitrix\Iblock\EO_Section resetSearchableContent()
	 * @method \Bitrix\Iblock\EO_Section unsetSearchableContent()
	 * @method \string fillSearchableContent()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\EO_Section setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Iblock\EO_Section resetCode()
	 * @method \Bitrix\Iblock\EO_Section unsetCode()
	 * @method \string fillCode()
	 * @method \string getXmlId()
	 * @method \Bitrix\Iblock\EO_Section setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Iblock\EO_Section resetXmlId()
	 * @method \Bitrix\Iblock\EO_Section unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getTmpId()
	 * @method \Bitrix\Iblock\EO_Section setTmpId(\string|\Bitrix\Main\DB\SqlExpression $tmpId)
	 * @method bool hasTmpId()
	 * @method bool isTmpIdFilled()
	 * @method bool isTmpIdChanged()
	 * @method \string remindActualTmpId()
	 * @method \string requireTmpId()
	 * @method \Bitrix\Iblock\EO_Section resetTmpId()
	 * @method \Bitrix\Iblock\EO_Section unsetTmpId()
	 * @method \string fillTmpId()
	 * @method \int getDetailPicture()
	 * @method \Bitrix\Iblock\EO_Section setDetailPicture(\int|\Bitrix\Main\DB\SqlExpression $detailPicture)
	 * @method bool hasDetailPicture()
	 * @method bool isDetailPictureFilled()
	 * @method bool isDetailPictureChanged()
	 * @method \int remindActualDetailPicture()
	 * @method \int requireDetailPicture()
	 * @method \Bitrix\Iblock\EO_Section resetDetailPicture()
	 * @method \Bitrix\Iblock\EO_Section unsetDetailPicture()
	 * @method \int fillDetailPicture()
	 * @method \int getSocnetGroupId()
	 * @method \Bitrix\Iblock\EO_Section setSocnetGroupId(\int|\Bitrix\Main\DB\SqlExpression $socnetGroupId)
	 * @method bool hasSocnetGroupId()
	 * @method bool isSocnetGroupIdFilled()
	 * @method bool isSocnetGroupIdChanged()
	 * @method \int remindActualSocnetGroupId()
	 * @method \int requireSocnetGroupId()
	 * @method \Bitrix\Iblock\EO_Section resetSocnetGroupId()
	 * @method \Bitrix\Iblock\EO_Section unsetSocnetGroupId()
	 * @method \int fillSocnetGroupId()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_Section setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_Section resetIblock()
	 * @method \Bitrix\Iblock\EO_Section unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 * @method \Bitrix\Iblock\EO_Section getParentSection()
	 * @method \Bitrix\Iblock\EO_Section remindActualParentSection()
	 * @method \Bitrix\Iblock\EO_Section requireParentSection()
	 * @method \Bitrix\Iblock\EO_Section setParentSection(\Bitrix\Iblock\EO_Section $object)
	 * @method \Bitrix\Iblock\EO_Section resetParentSection()
	 * @method \Bitrix\Iblock\EO_Section unsetParentSection()
	 * @method bool hasParentSection()
	 * @method bool isParentSectionFilled()
	 * @method bool isParentSectionChanged()
	 * @method \Bitrix\Iblock\EO_Section fillParentSection()
	 * @method \Bitrix\Main\EO_User getCreatedByUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedByUser()
	 * @method \Bitrix\Main\EO_User requireCreatedByUser()
	 * @method \Bitrix\Iblock\EO_Section setCreatedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\EO_Section resetCreatedByUser()
	 * @method \Bitrix\Iblock\EO_Section unsetCreatedByUser()
	 * @method bool hasCreatedByUser()
	 * @method bool isCreatedByUserFilled()
	 * @method bool isCreatedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User getModifiedByUser()
	 * @method \Bitrix\Main\EO_User remindActualModifiedByUser()
	 * @method \Bitrix\Main\EO_User requireModifiedByUser()
	 * @method \Bitrix\Iblock\EO_Section setModifiedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\EO_Section resetModifiedByUser()
	 * @method \Bitrix\Iblock\EO_Section unsetModifiedByUser()
	 * @method bool hasModifiedByUser()
	 * @method bool isModifiedByUserFilled()
	 * @method bool isModifiedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillModifiedByUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_Section set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_Section reset($fieldName)
	 * @method \Bitrix\Iblock\EO_Section unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_Section wakeUp($data)
	 */
	class EO_Section {
		/* @var \Bitrix\Iblock\SectionTable */
		static public $dataClass = '\Bitrix\Iblock\SectionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_Section_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getModifiedByList()
	 * @method \int[] fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \int[] getIblockIdList()
	 * @method \int[] fillIblockId()
	 * @method \int[] getIblockSectionIdList()
	 * @method \int[] fillIblockSectionId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getGlobalActiveList()
	 * @method \boolean[] fillGlobalActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getPictureList()
	 * @method \int[] fillPicture()
	 * @method \int[] getLeftMarginList()
	 * @method \int[] fillLeftMargin()
	 * @method \int[] getRightMarginList()
	 * @method \int[] fillRightMargin()
	 * @method \int[] getDepthLevelList()
	 * @method \int[] fillDepthLevel()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getDescriptionTypeList()
	 * @method \string[] fillDescriptionType()
	 * @method \string[] getSearchableContentList()
	 * @method \string[] fillSearchableContent()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getTmpIdList()
	 * @method \string[] fillTmpId()
	 * @method \int[] getDetailPictureList()
	 * @method \int[] fillDetailPicture()
	 * @method \int[] getSocnetGroupIdList()
	 * @method \int[] fillSocnetGroupId()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_Section_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 * @method \Bitrix\Iblock\EO_Section[] getParentSectionList()
	 * @method \Bitrix\Iblock\EO_Section_Collection getParentSectionCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillParentSection()
	 * @method \Bitrix\Main\EO_User[] getCreatedByUserList()
	 * @method \Bitrix\Iblock\EO_Section_Collection getCreatedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User[] getModifiedByUserList()
	 * @method \Bitrix\Iblock\EO_Section_Collection getModifiedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifiedByUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_Section $object)
	 * @method bool has(\Bitrix\Iblock\EO_Section $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Section getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Section[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_Section $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_Section_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_Section current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Section_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\SectionTable */
		static public $dataClass = '\Bitrix\Iblock\SectionTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_Section_Query query()
	 * @method static EO_Section_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Section_Result getById($id)
	 * @method static EO_Section_Result getList(array $parameters = array())
	 * @method static EO_Section_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_Section createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_Section_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_Section wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_Section_Collection wakeUpCollection($rows)
	 */
	class SectionTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Section_Result exec()
	 * @method \Bitrix\Iblock\EO_Section fetchObject()
	 * @method \Bitrix\Iblock\EO_Section_Collection fetchCollection()
	 */
	class EO_Section_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_Section fetchObject()
	 * @method \Bitrix\Iblock\EO_Section_Collection fetchCollection()
	 */
	class EO_Section_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_Section createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_Section_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_Section wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_Section_Collection wakeUpCollection($rows)
	 */
	class EO_Section_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\TypeTable */
namespace Bitrix\Iblock {
	/**
	 * EO_Type
	 * @see \Bitrix\Iblock\TypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getId()
	 * @method \Bitrix\Iblock\EO_Type setId(\string|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \boolean getSections()
	 * @method \Bitrix\Iblock\EO_Type setSections(\boolean|\Bitrix\Main\DB\SqlExpression $sections)
	 * @method bool hasSections()
	 * @method bool isSectionsFilled()
	 * @method bool isSectionsChanged()
	 * @method \boolean remindActualSections()
	 * @method \boolean requireSections()
	 * @method \Bitrix\Iblock\EO_Type resetSections()
	 * @method \Bitrix\Iblock\EO_Type unsetSections()
	 * @method \boolean fillSections()
	 * @method \string getEditFileBefore()
	 * @method \Bitrix\Iblock\EO_Type setEditFileBefore(\string|\Bitrix\Main\DB\SqlExpression $editFileBefore)
	 * @method bool hasEditFileBefore()
	 * @method bool isEditFileBeforeFilled()
	 * @method bool isEditFileBeforeChanged()
	 * @method \string remindActualEditFileBefore()
	 * @method \string requireEditFileBefore()
	 * @method \Bitrix\Iblock\EO_Type resetEditFileBefore()
	 * @method \Bitrix\Iblock\EO_Type unsetEditFileBefore()
	 * @method \string fillEditFileBefore()
	 * @method \string getEditFileAfter()
	 * @method \Bitrix\Iblock\EO_Type setEditFileAfter(\string|\Bitrix\Main\DB\SqlExpression $editFileAfter)
	 * @method bool hasEditFileAfter()
	 * @method bool isEditFileAfterFilled()
	 * @method bool isEditFileAfterChanged()
	 * @method \string remindActualEditFileAfter()
	 * @method \string requireEditFileAfter()
	 * @method \Bitrix\Iblock\EO_Type resetEditFileAfter()
	 * @method \Bitrix\Iblock\EO_Type unsetEditFileAfter()
	 * @method \string fillEditFileAfter()
	 * @method \boolean getInRss()
	 * @method \Bitrix\Iblock\EO_Type setInRss(\boolean|\Bitrix\Main\DB\SqlExpression $inRss)
	 * @method bool hasInRss()
	 * @method bool isInRssFilled()
	 * @method bool isInRssChanged()
	 * @method \boolean remindActualInRss()
	 * @method \boolean requireInRss()
	 * @method \Bitrix\Iblock\EO_Type resetInRss()
	 * @method \Bitrix\Iblock\EO_Type unsetInRss()
	 * @method \boolean fillInRss()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\EO_Type setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\EO_Type resetSort()
	 * @method \Bitrix\Iblock\EO_Type unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Iblock\EO_TypeLanguage getLangMessage()
	 * @method \Bitrix\Iblock\EO_TypeLanguage remindActualLangMessage()
	 * @method \Bitrix\Iblock\EO_TypeLanguage requireLangMessage()
	 * @method \Bitrix\Iblock\EO_Type setLangMessage(\Bitrix\Iblock\EO_TypeLanguage $object)
	 * @method \Bitrix\Iblock\EO_Type resetLangMessage()
	 * @method \Bitrix\Iblock\EO_Type unsetLangMessage()
	 * @method bool hasLangMessage()
	 * @method bool isLangMessageFilled()
	 * @method bool isLangMessageChanged()
	 * @method \Bitrix\Iblock\EO_TypeLanguage fillLangMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_Type set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_Type reset($fieldName)
	 * @method \Bitrix\Iblock\EO_Type unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_Type wakeUp($data)
	 */
	class EO_Type {
		/* @var \Bitrix\Iblock\TypeTable */
		static public $dataClass = '\Bitrix\Iblock\TypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_Type_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getIdList()
	 * @method \boolean[] getSectionsList()
	 * @method \boolean[] fillSections()
	 * @method \string[] getEditFileBeforeList()
	 * @method \string[] fillEditFileBefore()
	 * @method \string[] getEditFileAfterList()
	 * @method \string[] fillEditFileAfter()
	 * @method \boolean[] getInRssList()
	 * @method \boolean[] fillInRss()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Iblock\EO_TypeLanguage[] getLangMessageList()
	 * @method \Bitrix\Iblock\EO_Type_Collection getLangMessageCollection()
	 * @method \Bitrix\Iblock\EO_TypeLanguage_Collection fillLangMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_Type $object)
	 * @method bool has(\Bitrix\Iblock\EO_Type $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Type getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Type[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_Type $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_Type_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_Type current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Type_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\TypeTable */
		static public $dataClass = '\Bitrix\Iblock\TypeTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_Type_Query query()
	 * @method static EO_Type_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Type_Result getById($id)
	 * @method static EO_Type_Result getList(array $parameters = array())
	 * @method static EO_Type_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_Type createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_Type_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_Type wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_Type_Collection wakeUpCollection($rows)
	 */
	class TypeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Type_Result exec()
	 * @method \Bitrix\Iblock\EO_Type fetchObject()
	 * @method \Bitrix\Iblock\EO_Type_Collection fetchCollection()
	 */
	class EO_Type_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_Type fetchObject()
	 * @method \Bitrix\Iblock\EO_Type_Collection fetchCollection()
	 */
	class EO_Type_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_Type createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_Type_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_Type wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_Type_Collection wakeUpCollection($rows)
	 */
	class EO_Type_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\IblockFieldTable */
namespace Bitrix\Iblock {
	/**
	 * EO_IblockField
	 * @see \Bitrix\Iblock\IblockFieldTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_IblockField setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \string getFieldId()
	 * @method \Bitrix\Iblock\EO_IblockField setFieldId(\string|\Bitrix\Main\DB\SqlExpression $fieldId)
	 * @method bool hasFieldId()
	 * @method bool isFieldIdFilled()
	 * @method bool isFieldIdChanged()
	 * @method \boolean getIsRequired()
	 * @method \Bitrix\Iblock\EO_IblockField setIsRequired(\boolean|\Bitrix\Main\DB\SqlExpression $isRequired)
	 * @method bool hasIsRequired()
	 * @method bool isIsRequiredFilled()
	 * @method bool isIsRequiredChanged()
	 * @method \boolean remindActualIsRequired()
	 * @method \boolean requireIsRequired()
	 * @method \Bitrix\Iblock\EO_IblockField resetIsRequired()
	 * @method \Bitrix\Iblock\EO_IblockField unsetIsRequired()
	 * @method \boolean fillIsRequired()
	 * @method \string getDefaultValue()
	 * @method \Bitrix\Iblock\EO_IblockField setDefaultValue(\string|\Bitrix\Main\DB\SqlExpression $defaultValue)
	 * @method bool hasDefaultValue()
	 * @method bool isDefaultValueFilled()
	 * @method bool isDefaultValueChanged()
	 * @method \string remindActualDefaultValue()
	 * @method \string requireDefaultValue()
	 * @method \Bitrix\Iblock\EO_IblockField resetDefaultValue()
	 * @method \Bitrix\Iblock\EO_IblockField unsetDefaultValue()
	 * @method \string fillDefaultValue()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_IblockField setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_IblockField resetIblock()
	 * @method \Bitrix\Iblock\EO_IblockField unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockField set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_IblockField reset($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockField unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_IblockField wakeUp($data)
	 */
	class EO_IblockField {
		/* @var \Bitrix\Iblock\IblockFieldTable */
		static public $dataClass = '\Bitrix\Iblock\IblockFieldTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_IblockField_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockIdList()
	 * @method \string[] getFieldIdList()
	 * @method \boolean[] getIsRequiredList()
	 * @method \boolean[] fillIsRequired()
	 * @method \string[] getDefaultValueList()
	 * @method \string[] fillDefaultValue()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_IblockField_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_IblockField $object)
	 * @method bool has(\Bitrix\Iblock\EO_IblockField $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockField getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockField[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_IblockField $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_IblockField_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_IblockField current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_IblockField_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\IblockFieldTable */
		static public $dataClass = '\Bitrix\Iblock\IblockFieldTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_IblockField_Query query()
	 * @method static EO_IblockField_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_IblockField_Result getById($id)
	 * @method static EO_IblockField_Result getList(array $parameters = array())
	 * @method static EO_IblockField_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_IblockField createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_IblockField_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_IblockField wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_IblockField_Collection wakeUpCollection($rows)
	 */
	class IblockFieldTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_IblockField_Result exec()
	 * @method \Bitrix\Iblock\EO_IblockField fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockField_Collection fetchCollection()
	 */
	class EO_IblockField_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockField fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockField_Collection fetchCollection()
	 */
	class EO_IblockField_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockField createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_IblockField_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_IblockField wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_IblockField_Collection wakeUpCollection($rows)
	 */
	class EO_IblockField_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Bizproc\Workflow\Template\Entity\WorkflowTemplateTable */
namespace Bitrix\Bizproc\Workflow\Template\Entity {
	/**
	 * Tpl
	 * @see \Bitrix\Bizproc\Workflow\Template\Entity\WorkflowTemplateTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getEntity()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setEntity(\string|\Bitrix\Main\DB\SqlExpression $entity)
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \string remindActualEntity()
	 * @method \string requireEntity()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetEntity()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetEntity()
	 * @method \string fillEntity()
	 * @method \string getDocumentType()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setDocumentType(\string|\Bitrix\Main\DB\SqlExpression $documentType)
	 * @method bool hasDocumentType()
	 * @method bool isDocumentTypeFilled()
	 * @method bool isDocumentTypeChanged()
	 * @method \string remindActualDocumentType()
	 * @method \string requireDocumentType()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetDocumentType()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetDocumentType()
	 * @method \string fillDocumentType()
	 * @method \string getDocumentStatus()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setDocumentStatus(\string|\Bitrix\Main\DB\SqlExpression $documentStatus)
	 * @method bool hasDocumentStatus()
	 * @method bool isDocumentStatusFilled()
	 * @method bool isDocumentStatusChanged()
	 * @method \string remindActualDocumentStatus()
	 * @method \string requireDocumentStatus()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetDocumentStatus()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetDocumentStatus()
	 * @method \string fillDocumentStatus()
	 * @method \int getAutoExecute()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setAutoExecute(\int|\Bitrix\Main\DB\SqlExpression $autoExecute)
	 * @method bool hasAutoExecute()
	 * @method bool isAutoExecuteFilled()
	 * @method bool isAutoExecuteChanged()
	 * @method \int remindActualAutoExecute()
	 * @method \int requireAutoExecute()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetAutoExecute()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetAutoExecute()
	 * @method \int fillAutoExecute()
	 * @method \string getName()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetName()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetName()
	 * @method \string fillName()
	 * @method \string getDescription()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetDescription()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetDescription()
	 * @method \string fillDescription()
	 * @method array getTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setTemplate(array|\Bitrix\Main\DB\SqlExpression $template)
	 * @method bool hasTemplate()
	 * @method bool isTemplateFilled()
	 * @method bool isTemplateChanged()
	 * @method array remindActualTemplate()
	 * @method array requireTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetTemplate()
	 * @method array fillTemplate()
	 * @method array getParameters()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setParameters(array|\Bitrix\Main\DB\SqlExpression $parameters)
	 * @method bool hasParameters()
	 * @method bool isParametersFilled()
	 * @method bool isParametersChanged()
	 * @method array remindActualParameters()
	 * @method array requireParameters()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetParameters()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetParameters()
	 * @method array fillParameters()
	 * @method array getVariables()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setVariables(array|\Bitrix\Main\DB\SqlExpression $variables)
	 * @method bool hasVariables()
	 * @method bool isVariablesFilled()
	 * @method bool isVariablesChanged()
	 * @method array remindActualVariables()
	 * @method array requireVariables()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetVariables()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetVariables()
	 * @method array fillVariables()
	 * @method array getConstants()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setConstants(array|\Bitrix\Main\DB\SqlExpression $constants)
	 * @method bool hasConstants()
	 * @method bool isConstantsFilled()
	 * @method bool isConstantsChanged()
	 * @method array remindActualConstants()
	 * @method array requireConstants()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetConstants()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetConstants()
	 * @method array fillConstants()
	 * @method \Bitrix\Main\Type\DateTime getModified()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setModified(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $modified)
	 * @method bool hasModified()
	 * @method bool isModifiedFilled()
	 * @method bool isModifiedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualModified()
	 * @method \Bitrix\Main\Type\DateTime requireModified()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetModified()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetModified()
	 * @method \Bitrix\Main\Type\DateTime fillModified()
	 * @method \boolean getIsModified()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setIsModified(\boolean|\Bitrix\Main\DB\SqlExpression $isModified)
	 * @method bool hasIsModified()
	 * @method bool isIsModifiedFilled()
	 * @method bool isIsModifiedChanged()
	 * @method \boolean remindActualIsModified()
	 * @method \boolean requireIsModified()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetIsModified()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetIsModified()
	 * @method \boolean fillIsModified()
	 * @method \int getUserId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetUserId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetUserId()
	 * @method \int fillUserId()
	 * @method \string getSystemCode()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setSystemCode(\string|\Bitrix\Main\DB\SqlExpression $systemCode)
	 * @method bool hasSystemCode()
	 * @method bool isSystemCodeFilled()
	 * @method bool isSystemCodeChanged()
	 * @method \string remindActualSystemCode()
	 * @method \string requireSystemCode()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetSystemCode()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetSystemCode()
	 * @method \string fillSystemCode()
	 * @method \boolean getActive()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetActive()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string remindActualOriginatorId()
	 * @method \string requireOriginatorId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetOriginatorId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetOriginatorId()
	 * @method \string fillOriginatorId()
	 * @method \string getOriginId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setOriginId(\string|\Bitrix\Main\DB\SqlExpression $originId)
	 * @method bool hasOriginId()
	 * @method bool isOriginIdFilled()
	 * @method bool isOriginIdChanged()
	 * @method \string remindActualOriginId()
	 * @method \string requireOriginId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetOriginId()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetOriginId()
	 * @method \string fillOriginId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl resetUser()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl set($fieldName, $value)
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl reset($fieldName)
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Bizproc\Workflow\Template\Tpl wakeUp($data)
	 */
	class EO_WorkflowTemplate {
		/* @var \Bitrix\Bizproc\Workflow\Template\Entity\WorkflowTemplateTable */
		static public $dataClass = '\Bitrix\Bizproc\Workflow\Template\Entity\WorkflowTemplateTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Bizproc\Workflow\Template\Entity {
	/**
	 * EO_WorkflowTemplate_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getEntityList()
	 * @method \string[] fillEntity()
	 * @method \string[] getDocumentTypeList()
	 * @method \string[] fillDocumentType()
	 * @method \string[] getDocumentStatusList()
	 * @method \string[] fillDocumentStatus()
	 * @method \int[] getAutoExecuteList()
	 * @method \int[] fillAutoExecute()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method array[] getTemplateList()
	 * @method array[] fillTemplate()
	 * @method array[] getParametersList()
	 * @method array[] fillParameters()
	 * @method array[] getVariablesList()
	 * @method array[] fillVariables()
	 * @method array[] getConstantsList()
	 * @method array[] fillConstants()
	 * @method \Bitrix\Main\Type\DateTime[] getModifiedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillModified()
	 * @method \boolean[] getIsModifiedList()
	 * @method \boolean[] fillIsModified()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \string[] getSystemCodeList()
	 * @method \string[] fillSystemCode()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] fillOriginatorId()
	 * @method \string[] getOriginIdList()
	 * @method \string[] fillOriginId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Bizproc\Workflow\Template\Tpl $object)
	 * @method bool has(\Bitrix\Bizproc\Workflow\Template\Tpl $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl getByPrimary($primary)
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl[] getAll()
	 * @method bool remove(\Bitrix\Bizproc\Workflow\Template\Tpl $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_WorkflowTemplate_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Bizproc\Workflow\Template\Entity\WorkflowTemplateTable */
		static public $dataClass = '\Bitrix\Bizproc\Workflow\Template\Entity\WorkflowTemplateTable';
	}
}
namespace Bitrix\Bizproc\Workflow\Template\Entity {
	/**
	 * @method static EO_WorkflowTemplate_Query query()
	 * @method static EO_WorkflowTemplate_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_WorkflowTemplate_Result getById($id)
	 * @method static EO_WorkflowTemplate_Result getList(array $parameters = array())
	 * @method static EO_WorkflowTemplate_Entity getEntity()
	 * @method static \Bitrix\Bizproc\Workflow\Template\Tpl createObject($setDefaultValues = true)
	 * @method static \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection createCollection()
	 * @method static \Bitrix\Bizproc\Workflow\Template\Tpl wakeUpObject($row)
	 * @method static \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection wakeUpCollection($rows)
	 */
	class WorkflowTemplateTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_WorkflowTemplate_Result exec()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl fetchObject()
	 * @method \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection fetchCollection()
	 */
	class EO_WorkflowTemplate_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl fetchObject()
	 * @method \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection fetchCollection()
	 */
	class EO_WorkflowTemplate_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl createObject($setDefaultValues = true)
	 * @method \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection createCollection()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl wakeUpObject($row)
	 * @method \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection wakeUpCollection($rows)
	 */
	class EO_WorkflowTemplate_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Bizproc\Workflow\Entity\WorkflowInstanceTable */
namespace Bitrix\Bizproc\Workflow\Entity {
	/**
	 * EO_WorkflowInstance
	 * @see \Bitrix\Bizproc\Workflow\Entity\WorkflowInstanceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setId(\string|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getEntity()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setEntity(\string|\Bitrix\Main\DB\SqlExpression $entity)
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \string remindActualEntity()
	 * @method \string requireEntity()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetEntity()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetEntity()
	 * @method \string fillEntity()
	 * @method \string getDocumentId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setDocumentId(\string|\Bitrix\Main\DB\SqlExpression $documentId)
	 * @method bool hasDocumentId()
	 * @method bool isDocumentIdFilled()
	 * @method bool isDocumentIdChanged()
	 * @method \string remindActualDocumentId()
	 * @method \string requireDocumentId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetDocumentId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetDocumentId()
	 * @method \string fillDocumentId()
	 * @method \int getWorkflowTemplateId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setWorkflowTemplateId(\int|\Bitrix\Main\DB\SqlExpression $workflowTemplateId)
	 * @method bool hasWorkflowTemplateId()
	 * @method bool isWorkflowTemplateIdFilled()
	 * @method bool isWorkflowTemplateIdChanged()
	 * @method \int remindActualWorkflowTemplateId()
	 * @method \int requireWorkflowTemplateId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetWorkflowTemplateId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetWorkflowTemplateId()
	 * @method \int fillWorkflowTemplateId()
	 * @method \string getWorkflow()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setWorkflow(\string|\Bitrix\Main\DB\SqlExpression $workflow)
	 * @method bool hasWorkflow()
	 * @method bool isWorkflowFilled()
	 * @method bool isWorkflowChanged()
	 * @method \string remindActualWorkflow()
	 * @method \string requireWorkflow()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetWorkflow()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetWorkflow()
	 * @method \string fillWorkflow()
	 * @method \Bitrix\Main\Type\DateTime getStarted()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setStarted(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $started)
	 * @method bool hasStarted()
	 * @method bool isStartedFilled()
	 * @method bool isStartedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualStarted()
	 * @method \Bitrix\Main\Type\DateTime requireStarted()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetStarted()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetStarted()
	 * @method \Bitrix\Main\Type\DateTime fillStarted()
	 * @method \int getStartedBy()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setStartedBy(\int|\Bitrix\Main\DB\SqlExpression $startedBy)
	 * @method bool hasStartedBy()
	 * @method bool isStartedByFilled()
	 * @method bool isStartedByChanged()
	 * @method \int remindActualStartedBy()
	 * @method \int requireStartedBy()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetStartedBy()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetStartedBy()
	 * @method \int fillStartedBy()
	 * @method \Bitrix\Main\EO_User getStartedUser()
	 * @method \Bitrix\Main\EO_User remindActualStartedUser()
	 * @method \Bitrix\Main\EO_User requireStartedUser()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setStartedUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetStartedUser()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetStartedUser()
	 * @method bool hasStartedUser()
	 * @method bool isStartedUserFilled()
	 * @method bool isStartedUserChanged()
	 * @method \Bitrix\Main\EO_User fillStartedUser()
	 * @method \int getStartedEventType()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setStartedEventType(\int|\Bitrix\Main\DB\SqlExpression $startedEventType)
	 * @method bool hasStartedEventType()
	 * @method bool isStartedEventTypeFilled()
	 * @method bool isStartedEventTypeChanged()
	 * @method \int remindActualStartedEventType()
	 * @method \int requireStartedEventType()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetStartedEventType()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetStartedEventType()
	 * @method \int fillStartedEventType()
	 * @method \int getStatus()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setStatus(\int|\Bitrix\Main\DB\SqlExpression $status)
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \int remindActualStatus()
	 * @method \int requireStatus()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetStatus()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetStatus()
	 * @method \int fillStatus()
	 * @method \Bitrix\Main\Type\DateTime getModified()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setModified(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $modified)
	 * @method bool hasModified()
	 * @method bool isModifiedFilled()
	 * @method bool isModifiedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualModified()
	 * @method \Bitrix\Main\Type\DateTime requireModified()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetModified()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetModified()
	 * @method \Bitrix\Main\Type\DateTime fillModified()
	 * @method \string getOwnerId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setOwnerId(\string|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \string remindActualOwnerId()
	 * @method \string requireOwnerId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetOwnerId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetOwnerId()
	 * @method \string fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime getOwnedUntil()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setOwnedUntil(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $ownedUntil)
	 * @method bool hasOwnedUntil()
	 * @method bool isOwnedUntilFilled()
	 * @method bool isOwnedUntilChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualOwnedUntil()
	 * @method \Bitrix\Main\Type\DateTime requireOwnedUntil()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetOwnedUntil()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetOwnedUntil()
	 * @method \Bitrix\Main\Type\DateTime fillOwnedUntil()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState getState()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState remindActualState()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState requireState()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setState(\Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState $object)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetState()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetState()
	 * @method bool hasState()
	 * @method bool isStateFilled()
	 * @method bool isStateChanged()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState fillState()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl getTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl remindActualTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl requireTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance setTemplate(\Bitrix\Bizproc\Workflow\Template\Tpl $object)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance resetTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unsetTemplate()
	 * @method bool hasTemplate()
	 * @method bool isTemplateFilled()
	 * @method bool isTemplateChanged()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl fillTemplate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance set($fieldName, $value)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance reset($fieldName)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance wakeUp($data)
	 */
	class EO_WorkflowInstance {
		/* @var \Bitrix\Bizproc\Workflow\Entity\WorkflowInstanceTable */
		static public $dataClass = '\Bitrix\Bizproc\Workflow\Entity\WorkflowInstanceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Bizproc\Workflow\Entity {
	/**
	 * EO_WorkflowInstance_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getEntityList()
	 * @method \string[] fillEntity()
	 * @method \string[] getDocumentIdList()
	 * @method \string[] fillDocumentId()
	 * @method \int[] getWorkflowTemplateIdList()
	 * @method \int[] fillWorkflowTemplateId()
	 * @method \string[] getWorkflowList()
	 * @method \string[] fillWorkflow()
	 * @method \Bitrix\Main\Type\DateTime[] getStartedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStarted()
	 * @method \int[] getStartedByList()
	 * @method \int[] fillStartedBy()
	 * @method \Bitrix\Main\EO_User[] getStartedUserList()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection getStartedUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillStartedUser()
	 * @method \int[] getStartedEventTypeList()
	 * @method \int[] fillStartedEventType()
	 * @method \int[] getStatusList()
	 * @method \int[] fillStatus()
	 * @method \Bitrix\Main\Type\DateTime[] getModifiedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillModified()
	 * @method \string[] getOwnerIdList()
	 * @method \string[] fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime[] getOwnedUntilList()
	 * @method \Bitrix\Main\Type\DateTime[] fillOwnedUntil()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState[] getStateList()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection getStateCollection()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection fillState()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl[] getTemplateList()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection getTemplateCollection()
	 * @method \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection fillTemplate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance $object)
	 * @method bool has(\Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance getByPrimary($primary)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance[] getAll()
	 * @method bool remove(\Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_WorkflowInstance_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Bizproc\Workflow\Entity\WorkflowInstanceTable */
		static public $dataClass = '\Bitrix\Bizproc\Workflow\Entity\WorkflowInstanceTable';
	}
}
namespace Bitrix\Bizproc\Workflow\Entity {
	/**
	 * @method static EO_WorkflowInstance_Query query()
	 * @method static EO_WorkflowInstance_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_WorkflowInstance_Result getById($id)
	 * @method static EO_WorkflowInstance_Result getList(array $parameters = array())
	 * @method static EO_WorkflowInstance_Entity getEntity()
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance createObject($setDefaultValues = true)
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection createCollection()
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance wakeUpObject($row)
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection wakeUpCollection($rows)
	 */
	class WorkflowInstanceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_WorkflowInstance_Result exec()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance fetchObject()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection fetchCollection()
	 */
	class EO_WorkflowInstance_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance fetchObject()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection fetchCollection()
	 */
	class EO_WorkflowInstance_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance createObject($setDefaultValues = true)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection createCollection()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance wakeUpObject($row)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection wakeUpCollection($rows)
	 */
	class EO_WorkflowInstance_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Bizproc\Workflow\Entity\WorkflowStateTable */
namespace Bitrix\Bizproc\Workflow\Entity {
	/**
	 * EO_WorkflowState
	 * @see \Bitrix\Bizproc\Workflow\Entity\WorkflowStateTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setId(\string|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetModuleId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getEntity()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setEntity(\string|\Bitrix\Main\DB\SqlExpression $entity)
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \string remindActualEntity()
	 * @method \string requireEntity()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetEntity()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetEntity()
	 * @method \string fillEntity()
	 * @method \string getDocumentId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setDocumentId(\string|\Bitrix\Main\DB\SqlExpression $documentId)
	 * @method bool hasDocumentId()
	 * @method bool isDocumentIdFilled()
	 * @method bool isDocumentIdChanged()
	 * @method \string remindActualDocumentId()
	 * @method \string requireDocumentId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetDocumentId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetDocumentId()
	 * @method \string fillDocumentId()
	 * @method \int getDocumentIdInt()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setDocumentIdInt(\int|\Bitrix\Main\DB\SqlExpression $documentIdInt)
	 * @method bool hasDocumentIdInt()
	 * @method bool isDocumentIdIntFilled()
	 * @method bool isDocumentIdIntChanged()
	 * @method \int remindActualDocumentIdInt()
	 * @method \int requireDocumentIdInt()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetDocumentIdInt()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetDocumentIdInt()
	 * @method \int fillDocumentIdInt()
	 * @method \int getWorkflowTemplateId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setWorkflowTemplateId(\int|\Bitrix\Main\DB\SqlExpression $workflowTemplateId)
	 * @method bool hasWorkflowTemplateId()
	 * @method bool isWorkflowTemplateIdFilled()
	 * @method bool isWorkflowTemplateIdChanged()
	 * @method \int remindActualWorkflowTemplateId()
	 * @method \int requireWorkflowTemplateId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetWorkflowTemplateId()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetWorkflowTemplateId()
	 * @method \int fillWorkflowTemplateId()
	 * @method \string getState()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setState(\string|\Bitrix\Main\DB\SqlExpression $state)
	 * @method bool hasState()
	 * @method bool isStateFilled()
	 * @method bool isStateChanged()
	 * @method \string remindActualState()
	 * @method \string requireState()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetState()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetState()
	 * @method \string fillState()
	 * @method \string getStateParameters()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setStateParameters(\string|\Bitrix\Main\DB\SqlExpression $stateParameters)
	 * @method bool hasStateParameters()
	 * @method bool isStateParametersFilled()
	 * @method bool isStateParametersChanged()
	 * @method \string remindActualStateParameters()
	 * @method \string requireStateParameters()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetStateParameters()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetStateParameters()
	 * @method \string fillStateParameters()
	 * @method \Bitrix\Main\Type\DateTime getModified()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setModified(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $modified)
	 * @method bool hasModified()
	 * @method bool isModifiedFilled()
	 * @method bool isModifiedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualModified()
	 * @method \Bitrix\Main\Type\DateTime requireModified()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetModified()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetModified()
	 * @method \Bitrix\Main\Type\DateTime fillModified()
	 * @method \Bitrix\Main\Type\DateTime getStarted()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setStarted(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $started)
	 * @method bool hasStarted()
	 * @method bool isStartedFilled()
	 * @method bool isStartedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualStarted()
	 * @method \Bitrix\Main\Type\DateTime requireStarted()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetStarted()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetStarted()
	 * @method \Bitrix\Main\Type\DateTime fillStarted()
	 * @method \int getStartedBy()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setStartedBy(\int|\Bitrix\Main\DB\SqlExpression $startedBy)
	 * @method bool hasStartedBy()
	 * @method bool isStartedByFilled()
	 * @method bool isStartedByChanged()
	 * @method \int remindActualStartedBy()
	 * @method \int requireStartedBy()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetStartedBy()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetStartedBy()
	 * @method \int fillStartedBy()
	 * @method \Bitrix\Main\EO_User getStartedUser()
	 * @method \Bitrix\Main\EO_User remindActualStartedUser()
	 * @method \Bitrix\Main\EO_User requireStartedUser()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setStartedUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetStartedUser()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetStartedUser()
	 * @method bool hasStartedUser()
	 * @method bool isStartedUserFilled()
	 * @method bool isStartedUserChanged()
	 * @method \Bitrix\Main\EO_User fillStartedUser()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance getInstance()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance remindActualInstance()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance requireInstance()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setInstance(\Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance $object)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetInstance()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetInstance()
	 * @method bool hasInstance()
	 * @method bool isInstanceFilled()
	 * @method bool isInstanceChanged()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance fillInstance()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl getTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl remindActualTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl requireTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState setTemplate(\Bitrix\Bizproc\Workflow\Template\Tpl $object)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState resetTemplate()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unsetTemplate()
	 * @method bool hasTemplate()
	 * @method bool isTemplateFilled()
	 * @method bool isTemplateChanged()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl fillTemplate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState set($fieldName, $value)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState reset($fieldName)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState wakeUp($data)
	 */
	class EO_WorkflowState {
		/* @var \Bitrix\Bizproc\Workflow\Entity\WorkflowStateTable */
		static public $dataClass = '\Bitrix\Bizproc\Workflow\Entity\WorkflowStateTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Bizproc\Workflow\Entity {
	/**
	 * EO_WorkflowState_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getEntityList()
	 * @method \string[] fillEntity()
	 * @method \string[] getDocumentIdList()
	 * @method \string[] fillDocumentId()
	 * @method \int[] getDocumentIdIntList()
	 * @method \int[] fillDocumentIdInt()
	 * @method \int[] getWorkflowTemplateIdList()
	 * @method \int[] fillWorkflowTemplateId()
	 * @method \string[] getStateList()
	 * @method \string[] fillState()
	 * @method \string[] getStateParametersList()
	 * @method \string[] fillStateParameters()
	 * @method \Bitrix\Main\Type\DateTime[] getModifiedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillModified()
	 * @method \Bitrix\Main\Type\DateTime[] getStartedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStarted()
	 * @method \int[] getStartedByList()
	 * @method \int[] fillStartedBy()
	 * @method \Bitrix\Main\EO_User[] getStartedUserList()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection getStartedUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillStartedUser()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance[] getInstanceList()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection getInstanceCollection()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowInstance_Collection fillInstance()
	 * @method \Bitrix\Bizproc\Workflow\Template\Tpl[] getTemplateList()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection getTemplateCollection()
	 * @method \Bitrix\Bizproc\Workflow\Template\Entity\EO_WorkflowTemplate_Collection fillTemplate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState $object)
	 * @method bool has(\Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState getByPrimary($primary)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState[] getAll()
	 * @method bool remove(\Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_WorkflowState_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Bizproc\Workflow\Entity\WorkflowStateTable */
		static public $dataClass = '\Bitrix\Bizproc\Workflow\Entity\WorkflowStateTable';
	}
}
namespace Bitrix\Bizproc\Workflow\Entity {
	/**
	 * @method static EO_WorkflowState_Query query()
	 * @method static EO_WorkflowState_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_WorkflowState_Result getById($id)
	 * @method static EO_WorkflowState_Result getList(array $parameters = array())
	 * @method static EO_WorkflowState_Entity getEntity()
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState createObject($setDefaultValues = true)
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection createCollection()
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState wakeUpObject($row)
	 * @method static \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection wakeUpCollection($rows)
	 */
	class WorkflowStateTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_WorkflowState_Result exec()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState fetchObject()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection fetchCollection()
	 */
	class EO_WorkflowState_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState fetchObject()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection fetchCollection()
	 */
	class EO_WorkflowState_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState createObject($setDefaultValues = true)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection createCollection()
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState wakeUpObject($row)
	 * @method \Bitrix\Bizproc\Workflow\Entity\EO_WorkflowState_Collection wakeUpCollection($rows)
	 */
	class EO_WorkflowState_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\ElementTable */
namespace Bitrix\Iblock {
	/**
	 * EO_Element
	 * @see \Bitrix\Iblock\ElementTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\EO_Element setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Iblock\EO_Element setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Iblock\EO_Element resetTimestampX()
	 * @method \Bitrix\Iblock\EO_Element unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \int getModifiedBy()
	 * @method \Bitrix\Iblock\EO_Element setModifiedBy(\int|\Bitrix\Main\DB\SqlExpression $modifiedBy)
	 * @method bool hasModifiedBy()
	 * @method bool isModifiedByFilled()
	 * @method bool isModifiedByChanged()
	 * @method \int remindActualModifiedBy()
	 * @method \int requireModifiedBy()
	 * @method \Bitrix\Iblock\EO_Element resetModifiedBy()
	 * @method \Bitrix\Iblock\EO_Element unsetModifiedBy()
	 * @method \int fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Iblock\EO_Element setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Iblock\EO_Element resetDateCreate()
	 * @method \Bitrix\Iblock\EO_Element unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Iblock\EO_Element setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Iblock\EO_Element resetCreatedBy()
	 * @method \Bitrix\Iblock\EO_Element unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_Element setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int remindActualIblockId()
	 * @method \int requireIblockId()
	 * @method \Bitrix\Iblock\EO_Element resetIblockId()
	 * @method \Bitrix\Iblock\EO_Element unsetIblockId()
	 * @method \int fillIblockId()
	 * @method \int getIblockSectionId()
	 * @method \Bitrix\Iblock\EO_Element setIblockSectionId(\int|\Bitrix\Main\DB\SqlExpression $iblockSectionId)
	 * @method bool hasIblockSectionId()
	 * @method bool isIblockSectionIdFilled()
	 * @method bool isIblockSectionIdChanged()
	 * @method \int remindActualIblockSectionId()
	 * @method \int requireIblockSectionId()
	 * @method \Bitrix\Iblock\EO_Element resetIblockSectionId()
	 * @method \Bitrix\Iblock\EO_Element unsetIblockSectionId()
	 * @method \int fillIblockSectionId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Iblock\EO_Element setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Iblock\EO_Element resetActive()
	 * @method \Bitrix\Iblock\EO_Element unsetActive()
	 * @method \boolean fillActive()
	 * @method \Bitrix\Main\Type\DateTime getActiveFrom()
	 * @method \Bitrix\Iblock\EO_Element setActiveFrom(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeFrom)
	 * @method bool hasActiveFrom()
	 * @method bool isActiveFromFilled()
	 * @method bool isActiveFromChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime requireActiveFrom()
	 * @method \Bitrix\Iblock\EO_Element resetActiveFrom()
	 * @method \Bitrix\Iblock\EO_Element unsetActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime getActiveTo()
	 * @method \Bitrix\Iblock\EO_Element setActiveTo(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeTo)
	 * @method bool hasActiveTo()
	 * @method bool isActiveToFilled()
	 * @method bool isActiveToChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveTo()
	 * @method \Bitrix\Main\Type\DateTime requireActiveTo()
	 * @method \Bitrix\Iblock\EO_Element resetActiveTo()
	 * @method \Bitrix\Iblock\EO_Element unsetActiveTo()
	 * @method \Bitrix\Main\Type\DateTime fillActiveTo()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\EO_Element setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\EO_Element resetSort()
	 * @method \Bitrix\Iblock\EO_Element unsetSort()
	 * @method \int fillSort()
	 * @method \string getName()
	 * @method \Bitrix\Iblock\EO_Element setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Iblock\EO_Element resetName()
	 * @method \Bitrix\Iblock\EO_Element unsetName()
	 * @method \string fillName()
	 * @method \int getPreviewPicture()
	 * @method \Bitrix\Iblock\EO_Element setPreviewPicture(\int|\Bitrix\Main\DB\SqlExpression $previewPicture)
	 * @method bool hasPreviewPicture()
	 * @method bool isPreviewPictureFilled()
	 * @method bool isPreviewPictureChanged()
	 * @method \int remindActualPreviewPicture()
	 * @method \int requirePreviewPicture()
	 * @method \Bitrix\Iblock\EO_Element resetPreviewPicture()
	 * @method \Bitrix\Iblock\EO_Element unsetPreviewPicture()
	 * @method \int fillPreviewPicture()
	 * @method \string getPreviewText()
	 * @method \Bitrix\Iblock\EO_Element setPreviewText(\string|\Bitrix\Main\DB\SqlExpression $previewText)
	 * @method bool hasPreviewText()
	 * @method bool isPreviewTextFilled()
	 * @method bool isPreviewTextChanged()
	 * @method \string remindActualPreviewText()
	 * @method \string requirePreviewText()
	 * @method \Bitrix\Iblock\EO_Element resetPreviewText()
	 * @method \Bitrix\Iblock\EO_Element unsetPreviewText()
	 * @method \string fillPreviewText()
	 * @method \string getPreviewTextType()
	 * @method \Bitrix\Iblock\EO_Element setPreviewTextType(\string|\Bitrix\Main\DB\SqlExpression $previewTextType)
	 * @method bool hasPreviewTextType()
	 * @method bool isPreviewTextTypeFilled()
	 * @method bool isPreviewTextTypeChanged()
	 * @method \string remindActualPreviewTextType()
	 * @method \string requirePreviewTextType()
	 * @method \Bitrix\Iblock\EO_Element resetPreviewTextType()
	 * @method \Bitrix\Iblock\EO_Element unsetPreviewTextType()
	 * @method \string fillPreviewTextType()
	 * @method \int getDetailPicture()
	 * @method \Bitrix\Iblock\EO_Element setDetailPicture(\int|\Bitrix\Main\DB\SqlExpression $detailPicture)
	 * @method bool hasDetailPicture()
	 * @method bool isDetailPictureFilled()
	 * @method bool isDetailPictureChanged()
	 * @method \int remindActualDetailPicture()
	 * @method \int requireDetailPicture()
	 * @method \Bitrix\Iblock\EO_Element resetDetailPicture()
	 * @method \Bitrix\Iblock\EO_Element unsetDetailPicture()
	 * @method \int fillDetailPicture()
	 * @method \string getDetailText()
	 * @method \Bitrix\Iblock\EO_Element setDetailText(\string|\Bitrix\Main\DB\SqlExpression $detailText)
	 * @method bool hasDetailText()
	 * @method bool isDetailTextFilled()
	 * @method bool isDetailTextChanged()
	 * @method \string remindActualDetailText()
	 * @method \string requireDetailText()
	 * @method \Bitrix\Iblock\EO_Element resetDetailText()
	 * @method \Bitrix\Iblock\EO_Element unsetDetailText()
	 * @method \string fillDetailText()
	 * @method \string getDetailTextType()
	 * @method \Bitrix\Iblock\EO_Element setDetailTextType(\string|\Bitrix\Main\DB\SqlExpression $detailTextType)
	 * @method bool hasDetailTextType()
	 * @method bool isDetailTextTypeFilled()
	 * @method bool isDetailTextTypeChanged()
	 * @method \string remindActualDetailTextType()
	 * @method \string requireDetailTextType()
	 * @method \Bitrix\Iblock\EO_Element resetDetailTextType()
	 * @method \Bitrix\Iblock\EO_Element unsetDetailTextType()
	 * @method \string fillDetailTextType()
	 * @method \string getSearchableContent()
	 * @method \Bitrix\Iblock\EO_Element setSearchableContent(\string|\Bitrix\Main\DB\SqlExpression $searchableContent)
	 * @method bool hasSearchableContent()
	 * @method bool isSearchableContentFilled()
	 * @method bool isSearchableContentChanged()
	 * @method \string remindActualSearchableContent()
	 * @method \string requireSearchableContent()
	 * @method \Bitrix\Iblock\EO_Element resetSearchableContent()
	 * @method \Bitrix\Iblock\EO_Element unsetSearchableContent()
	 * @method \string fillSearchableContent()
	 * @method \int getWfStatusId()
	 * @method \Bitrix\Iblock\EO_Element setWfStatusId(\int|\Bitrix\Main\DB\SqlExpression $wfStatusId)
	 * @method bool hasWfStatusId()
	 * @method bool isWfStatusIdFilled()
	 * @method bool isWfStatusIdChanged()
	 * @method \int remindActualWfStatusId()
	 * @method \int requireWfStatusId()
	 * @method \Bitrix\Iblock\EO_Element resetWfStatusId()
	 * @method \Bitrix\Iblock\EO_Element unsetWfStatusId()
	 * @method \int fillWfStatusId()
	 * @method \int getWfParentElementId()
	 * @method \Bitrix\Iblock\EO_Element setWfParentElementId(\int|\Bitrix\Main\DB\SqlExpression $wfParentElementId)
	 * @method bool hasWfParentElementId()
	 * @method bool isWfParentElementIdFilled()
	 * @method bool isWfParentElementIdChanged()
	 * @method \int remindActualWfParentElementId()
	 * @method \int requireWfParentElementId()
	 * @method \Bitrix\Iblock\EO_Element resetWfParentElementId()
	 * @method \Bitrix\Iblock\EO_Element unsetWfParentElementId()
	 * @method \int fillWfParentElementId()
	 * @method \string getWfNew()
	 * @method \Bitrix\Iblock\EO_Element setWfNew(\string|\Bitrix\Main\DB\SqlExpression $wfNew)
	 * @method bool hasWfNew()
	 * @method bool isWfNewFilled()
	 * @method bool isWfNewChanged()
	 * @method \string remindActualWfNew()
	 * @method \string requireWfNew()
	 * @method \Bitrix\Iblock\EO_Element resetWfNew()
	 * @method \Bitrix\Iblock\EO_Element unsetWfNew()
	 * @method \string fillWfNew()
	 * @method \int getWfLockedBy()
	 * @method \Bitrix\Iblock\EO_Element setWfLockedBy(\int|\Bitrix\Main\DB\SqlExpression $wfLockedBy)
	 * @method bool hasWfLockedBy()
	 * @method bool isWfLockedByFilled()
	 * @method bool isWfLockedByChanged()
	 * @method \int remindActualWfLockedBy()
	 * @method \int requireWfLockedBy()
	 * @method \Bitrix\Iblock\EO_Element resetWfLockedBy()
	 * @method \Bitrix\Iblock\EO_Element unsetWfLockedBy()
	 * @method \int fillWfLockedBy()
	 * @method \Bitrix\Main\Type\DateTime getWfDateLock()
	 * @method \Bitrix\Iblock\EO_Element setWfDateLock(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $wfDateLock)
	 * @method bool hasWfDateLock()
	 * @method bool isWfDateLockFilled()
	 * @method bool isWfDateLockChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualWfDateLock()
	 * @method \Bitrix\Main\Type\DateTime requireWfDateLock()
	 * @method \Bitrix\Iblock\EO_Element resetWfDateLock()
	 * @method \Bitrix\Iblock\EO_Element unsetWfDateLock()
	 * @method \Bitrix\Main\Type\DateTime fillWfDateLock()
	 * @method \string getWfComments()
	 * @method \Bitrix\Iblock\EO_Element setWfComments(\string|\Bitrix\Main\DB\SqlExpression $wfComments)
	 * @method bool hasWfComments()
	 * @method bool isWfCommentsFilled()
	 * @method bool isWfCommentsChanged()
	 * @method \string remindActualWfComments()
	 * @method \string requireWfComments()
	 * @method \Bitrix\Iblock\EO_Element resetWfComments()
	 * @method \Bitrix\Iblock\EO_Element unsetWfComments()
	 * @method \string fillWfComments()
	 * @method \boolean getInSections()
	 * @method \Bitrix\Iblock\EO_Element setInSections(\boolean|\Bitrix\Main\DB\SqlExpression $inSections)
	 * @method bool hasInSections()
	 * @method bool isInSectionsFilled()
	 * @method bool isInSectionsChanged()
	 * @method \boolean remindActualInSections()
	 * @method \boolean requireInSections()
	 * @method \Bitrix\Iblock\EO_Element resetInSections()
	 * @method \Bitrix\Iblock\EO_Element unsetInSections()
	 * @method \boolean fillInSections()
	 * @method \string getXmlId()
	 * @method \Bitrix\Iblock\EO_Element setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Iblock\EO_Element resetXmlId()
	 * @method \Bitrix\Iblock\EO_Element unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getCode()
	 * @method \Bitrix\Iblock\EO_Element setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Iblock\EO_Element resetCode()
	 * @method \Bitrix\Iblock\EO_Element unsetCode()
	 * @method \string fillCode()
	 * @method \string getTags()
	 * @method \Bitrix\Iblock\EO_Element setTags(\string|\Bitrix\Main\DB\SqlExpression $tags)
	 * @method bool hasTags()
	 * @method bool isTagsFilled()
	 * @method bool isTagsChanged()
	 * @method \string remindActualTags()
	 * @method \string requireTags()
	 * @method \Bitrix\Iblock\EO_Element resetTags()
	 * @method \Bitrix\Iblock\EO_Element unsetTags()
	 * @method \string fillTags()
	 * @method \string getTmpId()
	 * @method \Bitrix\Iblock\EO_Element setTmpId(\string|\Bitrix\Main\DB\SqlExpression $tmpId)
	 * @method bool hasTmpId()
	 * @method bool isTmpIdFilled()
	 * @method bool isTmpIdChanged()
	 * @method \string remindActualTmpId()
	 * @method \string requireTmpId()
	 * @method \Bitrix\Iblock\EO_Element resetTmpId()
	 * @method \Bitrix\Iblock\EO_Element unsetTmpId()
	 * @method \string fillTmpId()
	 * @method \int getShowCounter()
	 * @method \Bitrix\Iblock\EO_Element setShowCounter(\int|\Bitrix\Main\DB\SqlExpression $showCounter)
	 * @method bool hasShowCounter()
	 * @method bool isShowCounterFilled()
	 * @method bool isShowCounterChanged()
	 * @method \int remindActualShowCounter()
	 * @method \int requireShowCounter()
	 * @method \Bitrix\Iblock\EO_Element resetShowCounter()
	 * @method \Bitrix\Iblock\EO_Element unsetShowCounter()
	 * @method \int fillShowCounter()
	 * @method \Bitrix\Main\Type\DateTime getShowCounterStart()
	 * @method \Bitrix\Iblock\EO_Element setShowCounterStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $showCounterStart)
	 * @method bool hasShowCounterStart()
	 * @method bool isShowCounterStartFilled()
	 * @method bool isShowCounterStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualShowCounterStart()
	 * @method \Bitrix\Main\Type\DateTime requireShowCounterStart()
	 * @method \Bitrix\Iblock\EO_Element resetShowCounterStart()
	 * @method \Bitrix\Iblock\EO_Element unsetShowCounterStart()
	 * @method \Bitrix\Main\Type\DateTime fillShowCounterStart()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_Element setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_Element resetIblock()
	 * @method \Bitrix\Iblock\EO_Element unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 * @method \Bitrix\Iblock\EO_Element getWfParentElement()
	 * @method \Bitrix\Iblock\EO_Element remindActualWfParentElement()
	 * @method \Bitrix\Iblock\EO_Element requireWfParentElement()
	 * @method \Bitrix\Iblock\EO_Element setWfParentElement(\Bitrix\Iblock\EO_Element $object)
	 * @method \Bitrix\Iblock\EO_Element resetWfParentElement()
	 * @method \Bitrix\Iblock\EO_Element unsetWfParentElement()
	 * @method bool hasWfParentElement()
	 * @method bool isWfParentElementFilled()
	 * @method bool isWfParentElementChanged()
	 * @method \Bitrix\Iblock\EO_Element fillWfParentElement()
	 * @method \Bitrix\Iblock\EO_Section getIblockSection()
	 * @method \Bitrix\Iblock\EO_Section remindActualIblockSection()
	 * @method \Bitrix\Iblock\EO_Section requireIblockSection()
	 * @method \Bitrix\Iblock\EO_Element setIblockSection(\Bitrix\Iblock\EO_Section $object)
	 * @method \Bitrix\Iblock\EO_Element resetIblockSection()
	 * @method \Bitrix\Iblock\EO_Element unsetIblockSection()
	 * @method bool hasIblockSection()
	 * @method bool isIblockSectionFilled()
	 * @method bool isIblockSectionChanged()
	 * @method \Bitrix\Iblock\EO_Section fillIblockSection()
	 * @method \Bitrix\Main\EO_User getModifiedByUser()
	 * @method \Bitrix\Main\EO_User remindActualModifiedByUser()
	 * @method \Bitrix\Main\EO_User requireModifiedByUser()
	 * @method \Bitrix\Iblock\EO_Element setModifiedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\EO_Element resetModifiedByUser()
	 * @method \Bitrix\Iblock\EO_Element unsetModifiedByUser()
	 * @method bool hasModifiedByUser()
	 * @method bool isModifiedByUserFilled()
	 * @method bool isModifiedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillModifiedByUser()
	 * @method \Bitrix\Main\EO_User getCreatedByUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedByUser()
	 * @method \Bitrix\Main\EO_User requireCreatedByUser()
	 * @method \Bitrix\Iblock\EO_Element setCreatedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\EO_Element resetCreatedByUser()
	 * @method \Bitrix\Iblock\EO_Element unsetCreatedByUser()
	 * @method bool hasCreatedByUser()
	 * @method bool isCreatedByUserFilled()
	 * @method bool isCreatedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User getWfLockedByUser()
	 * @method \Bitrix\Main\EO_User remindActualWfLockedByUser()
	 * @method \Bitrix\Main\EO_User requireWfLockedByUser()
	 * @method \Bitrix\Iblock\EO_Element setWfLockedByUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Iblock\EO_Element resetWfLockedByUser()
	 * @method \Bitrix\Iblock\EO_Element unsetWfLockedByUser()
	 * @method bool hasWfLockedByUser()
	 * @method bool isWfLockedByUserFilled()
	 * @method bool isWfLockedByUserChanged()
	 * @method \Bitrix\Main\EO_User fillWfLockedByUser()
	 * @method \Bitrix\Iblock\EO_Section_Collection getSections()
	 * @method \Bitrix\Iblock\EO_Section_Collection requireSections()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillSections()
	 * @method bool hasSections()
	 * @method bool isSectionsFilled()
	 * @method bool isSectionsChanged()
	 * @method void addToSections(\Bitrix\Iblock\EO_Section $section)
	 * @method void removeFromSections(\Bitrix\Iblock\EO_Section $section)
	 * @method void removeAllSections()
	 * @method \Bitrix\Iblock\EO_Element resetSections()
	 * @method \Bitrix\Iblock\EO_Element unsetSections()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_Element set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_Element reset($fieldName)
	 * @method \Bitrix\Iblock\EO_Element unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_Element wakeUp($data)
	 */
	class EO_Element {
		/* @var \Bitrix\Iblock\ElementTable */
		static public $dataClass = '\Bitrix\Iblock\ElementTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_Element_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \int[] getModifiedByList()
	 * @method \int[] fillModifiedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \int[] getIblockIdList()
	 * @method \int[] fillIblockId()
	 * @method \int[] getIblockSectionIdList()
	 * @method \int[] fillIblockSectionId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveFromList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveFrom()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveToList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveTo()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getPreviewPictureList()
	 * @method \int[] fillPreviewPicture()
	 * @method \string[] getPreviewTextList()
	 * @method \string[] fillPreviewText()
	 * @method \string[] getPreviewTextTypeList()
	 * @method \string[] fillPreviewTextType()
	 * @method \int[] getDetailPictureList()
	 * @method \int[] fillDetailPicture()
	 * @method \string[] getDetailTextList()
	 * @method \string[] fillDetailText()
	 * @method \string[] getDetailTextTypeList()
	 * @method \string[] fillDetailTextType()
	 * @method \string[] getSearchableContentList()
	 * @method \string[] fillSearchableContent()
	 * @method \int[] getWfStatusIdList()
	 * @method \int[] fillWfStatusId()
	 * @method \int[] getWfParentElementIdList()
	 * @method \int[] fillWfParentElementId()
	 * @method \string[] getWfNewList()
	 * @method \string[] fillWfNew()
	 * @method \int[] getWfLockedByList()
	 * @method \int[] fillWfLockedBy()
	 * @method \Bitrix\Main\Type\DateTime[] getWfDateLockList()
	 * @method \Bitrix\Main\Type\DateTime[] fillWfDateLock()
	 * @method \string[] getWfCommentsList()
	 * @method \string[] fillWfComments()
	 * @method \boolean[] getInSectionsList()
	 * @method \boolean[] fillInSections()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getTagsList()
	 * @method \string[] fillTags()
	 * @method \string[] getTmpIdList()
	 * @method \string[] fillTmpId()
	 * @method \int[] getShowCounterList()
	 * @method \int[] fillShowCounter()
	 * @method \Bitrix\Main\Type\DateTime[] getShowCounterStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillShowCounterStart()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_Element_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 * @method \Bitrix\Iblock\EO_Element[] getWfParentElementList()
	 * @method \Bitrix\Iblock\EO_Element_Collection getWfParentElementCollection()
	 * @method \Bitrix\Iblock\EO_Element_Collection fillWfParentElement()
	 * @method \Bitrix\Iblock\EO_Section[] getIblockSectionList()
	 * @method \Bitrix\Iblock\EO_Element_Collection getIblockSectionCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillIblockSection()
	 * @method \Bitrix\Main\EO_User[] getModifiedByUserList()
	 * @method \Bitrix\Iblock\EO_Element_Collection getModifiedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifiedByUser()
	 * @method \Bitrix\Main\EO_User[] getCreatedByUserList()
	 * @method \Bitrix\Iblock\EO_Element_Collection getCreatedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedByUser()
	 * @method \Bitrix\Main\EO_User[] getWfLockedByUserList()
	 * @method \Bitrix\Iblock\EO_Element_Collection getWfLockedByUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillWfLockedByUser()
	 * @method \Bitrix\Iblock\EO_Section_Collection[] getSectionsList()
	 * @method \Bitrix\Iblock\EO_Section_Collection getSectionsCollection()
	 * @method \Bitrix\Iblock\EO_Section_Collection fillSections()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_Element $object)
	 * @method bool has(\Bitrix\Iblock\EO_Element $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Element getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Element[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_Element $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_Element_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_Element current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Element_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\ElementTable */
		static public $dataClass = '\Bitrix\Iblock\ElementTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_Element_Query query()
	 * @method static EO_Element_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Element_Result getById($id)
	 * @method static EO_Element_Result getList(array $parameters = array())
	 * @method static EO_Element_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_Element createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_Element_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_Element wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_Element_Collection wakeUpCollection($rows)
	 */
	class ElementTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Element_Result exec()
	 * @method \Bitrix\Iblock\EO_Element fetchObject()
	 * @method \Bitrix\Iblock\EO_Element_Collection fetchCollection()
	 */
	class EO_Element_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_Element fetchObject()
	 * @method \Bitrix\Iblock\EO_Element_Collection fetchCollection()
	 */
	class EO_Element_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_Element createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_Element_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_Element wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_Element_Collection wakeUpCollection($rows)
	 */
	class EO_Element_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\PropertyFeatureTable */
namespace Bitrix\Iblock {
	/**
	 * EO_PropertyFeature
	 * @see \Bitrix\Iblock\PropertyFeatureTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPropertyId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature setPropertyId(\int|\Bitrix\Main\DB\SqlExpression $propertyId)
	 * @method bool hasPropertyId()
	 * @method bool isPropertyIdFilled()
	 * @method bool isPropertyIdChanged()
	 * @method \int remindActualPropertyId()
	 * @method \int requirePropertyId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature resetPropertyId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature unsetPropertyId()
	 * @method \int fillPropertyId()
	 * @method \string getModuleId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature resetModuleId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \string getFeatureId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature setFeatureId(\string|\Bitrix\Main\DB\SqlExpression $featureId)
	 * @method bool hasFeatureId()
	 * @method bool isFeatureIdFilled()
	 * @method bool isFeatureIdChanged()
	 * @method \string remindActualFeatureId()
	 * @method \string requireFeatureId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature resetFeatureId()
	 * @method \Bitrix\Iblock\EO_PropertyFeature unsetFeatureId()
	 * @method \string fillFeatureId()
	 * @method \boolean getIsEnabled()
	 * @method \Bitrix\Iblock\EO_PropertyFeature setIsEnabled(\boolean|\Bitrix\Main\DB\SqlExpression $isEnabled)
	 * @method bool hasIsEnabled()
	 * @method bool isIsEnabledFilled()
	 * @method bool isIsEnabledChanged()
	 * @method \boolean remindActualIsEnabled()
	 * @method \boolean requireIsEnabled()
	 * @method \Bitrix\Iblock\EO_PropertyFeature resetIsEnabled()
	 * @method \Bitrix\Iblock\EO_PropertyFeature unsetIsEnabled()
	 * @method \boolean fillIsEnabled()
	 * @method \Bitrix\Iblock\Property getProperty()
	 * @method \Bitrix\Iblock\Property remindActualProperty()
	 * @method \Bitrix\Iblock\Property requireProperty()
	 * @method \Bitrix\Iblock\EO_PropertyFeature setProperty(\Bitrix\Iblock\Property $object)
	 * @method \Bitrix\Iblock\EO_PropertyFeature resetProperty()
	 * @method \Bitrix\Iblock\EO_PropertyFeature unsetProperty()
	 * @method bool hasProperty()
	 * @method bool isPropertyFilled()
	 * @method bool isPropertyChanged()
	 * @method \Bitrix\Iblock\Property fillProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_PropertyFeature set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_PropertyFeature reset($fieldName)
	 * @method \Bitrix\Iblock\EO_PropertyFeature unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_PropertyFeature wakeUp($data)
	 */
	class EO_PropertyFeature {
		/* @var \Bitrix\Iblock\PropertyFeatureTable */
		static public $dataClass = '\Bitrix\Iblock\PropertyFeatureTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_PropertyFeature_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPropertyIdList()
	 * @method \int[] fillPropertyId()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \string[] getFeatureIdList()
	 * @method \string[] fillFeatureId()
	 * @method \boolean[] getIsEnabledList()
	 * @method \boolean[] fillIsEnabled()
	 * @method \Bitrix\Iblock\Property[] getPropertyList()
	 * @method \Bitrix\Iblock\EO_PropertyFeature_Collection getPropertyCollection()
	 * @method \Bitrix\Iblock\EO_Property_Collection fillProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_PropertyFeature $object)
	 * @method bool has(\Bitrix\Iblock\EO_PropertyFeature $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_PropertyFeature getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_PropertyFeature[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_PropertyFeature $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_PropertyFeature_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_PropertyFeature current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_PropertyFeature_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\PropertyFeatureTable */
		static public $dataClass = '\Bitrix\Iblock\PropertyFeatureTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_PropertyFeature_Query query()
	 * @method static EO_PropertyFeature_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_PropertyFeature_Result getById($id)
	 * @method static EO_PropertyFeature_Result getList(array $parameters = array())
	 * @method static EO_PropertyFeature_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_PropertyFeature createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_PropertyFeature_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_PropertyFeature wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_PropertyFeature_Collection wakeUpCollection($rows)
	 */
	class PropertyFeatureTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_PropertyFeature_Result exec()
	 * @method \Bitrix\Iblock\EO_PropertyFeature fetchObject()
	 * @method \Bitrix\Iblock\EO_PropertyFeature_Collection fetchCollection()
	 */
	class EO_PropertyFeature_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_PropertyFeature fetchObject()
	 * @method \Bitrix\Iblock\EO_PropertyFeature_Collection fetchCollection()
	 */
	class EO_PropertyFeature_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_PropertyFeature createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_PropertyFeature_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_PropertyFeature wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_PropertyFeature_Collection wakeUpCollection($rows)
	 */
	class EO_PropertyFeature_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\PropertyEnumerationTable */
namespace Bitrix\Iblock {
	/**
	 * EO_PropertyEnumeration
	 * @see \Bitrix\Iblock\PropertyEnumerationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPropertyId()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration setPropertyId(\int|\Bitrix\Main\DB\SqlExpression $propertyId)
	 * @method bool hasPropertyId()
	 * @method bool isPropertyIdFilled()
	 * @method bool isPropertyIdChanged()
	 * @method \string getValue()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration resetValue()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration unsetValue()
	 * @method \string fillValue()
	 * @method \boolean getDef()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration setDef(\boolean|\Bitrix\Main\DB\SqlExpression $def)
	 * @method bool hasDef()
	 * @method bool isDefFilled()
	 * @method bool isDefChanged()
	 * @method \boolean remindActualDef()
	 * @method \boolean requireDef()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration resetDef()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration unsetDef()
	 * @method \boolean fillDef()
	 * @method \int getSort()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration resetSort()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration unsetSort()
	 * @method \int fillSort()
	 * @method \string getXmlId()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration resetXmlId()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getTmpId()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration setTmpId(\string|\Bitrix\Main\DB\SqlExpression $tmpId)
	 * @method bool hasTmpId()
	 * @method bool isTmpIdFilled()
	 * @method bool isTmpIdChanged()
	 * @method \string remindActualTmpId()
	 * @method \string requireTmpId()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration resetTmpId()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration unsetTmpId()
	 * @method \string fillTmpId()
	 * @method \Bitrix\Iblock\Property getProperty()
	 * @method \Bitrix\Iblock\Property remindActualProperty()
	 * @method \Bitrix\Iblock\Property requireProperty()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration setProperty(\Bitrix\Iblock\Property $object)
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration resetProperty()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration unsetProperty()
	 * @method bool hasProperty()
	 * @method bool isPropertyFilled()
	 * @method bool isPropertyChanged()
	 * @method \Bitrix\Iblock\Property fillProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration reset($fieldName)
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_PropertyEnumeration wakeUp($data)
	 */
	class EO_PropertyEnumeration {
		/* @var \Bitrix\Iblock\PropertyEnumerationTable */
		static public $dataClass = '\Bitrix\Iblock\PropertyEnumerationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_PropertyEnumeration_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPropertyIdList()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \boolean[] getDefList()
	 * @method \boolean[] fillDef()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getTmpIdList()
	 * @method \string[] fillTmpId()
	 * @method \Bitrix\Iblock\Property[] getPropertyList()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration_Collection getPropertyCollection()
	 * @method \Bitrix\Iblock\EO_Property_Collection fillProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_PropertyEnumeration $object)
	 * @method bool has(\Bitrix\Iblock\EO_PropertyEnumeration $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_PropertyEnumeration $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_PropertyEnumeration_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_PropertyEnumeration_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\PropertyEnumerationTable */
		static public $dataClass = '\Bitrix\Iblock\PropertyEnumerationTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_PropertyEnumeration_Query query()
	 * @method static EO_PropertyEnumeration_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_PropertyEnumeration_Result getById($id)
	 * @method static EO_PropertyEnumeration_Result getList(array $parameters = array())
	 * @method static EO_PropertyEnumeration_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_PropertyEnumeration createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_PropertyEnumeration_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_PropertyEnumeration wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_PropertyEnumeration_Collection wakeUpCollection($rows)
	 */
	class PropertyEnumerationTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_PropertyEnumeration_Result exec()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration fetchObject()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration_Collection fetchCollection()
	 */
	class EO_PropertyEnumeration_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration fetchObject()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration_Collection fetchCollection()
	 */
	class EO_PropertyEnumeration_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_PropertyEnumeration_Collection wakeUpCollection($rows)
	 */
	class EO_PropertyEnumeration_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\SiteTable */
namespace Bitrix\Iblock {
	/**
	 * EO_Site
	 * @see \Bitrix\Iblock\SiteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_Site setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \string getSiteId()
	 * @method \Bitrix\Iblock\EO_Site setSiteId(\string|\Bitrix\Main\DB\SqlExpression $siteId)
	 * @method bool hasSiteId()
	 * @method bool isSiteIdFilled()
	 * @method bool isSiteIdChanged()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_Site setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_Site resetIblock()
	 * @method \Bitrix\Iblock\EO_Site unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 * @method \Bitrix\Main\EO_Site getSite()
	 * @method \Bitrix\Main\EO_Site remindActualSite()
	 * @method \Bitrix\Main\EO_Site requireSite()
	 * @method \Bitrix\Iblock\EO_Site setSite(\Bitrix\Main\EO_Site $object)
	 * @method \Bitrix\Iblock\EO_Site resetSite()
	 * @method \Bitrix\Iblock\EO_Site unsetSite()
	 * @method bool hasSite()
	 * @method bool isSiteFilled()
	 * @method bool isSiteChanged()
	 * @method \Bitrix\Main\EO_Site fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_Site set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_Site reset($fieldName)
	 * @method \Bitrix\Iblock\EO_Site unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_Site wakeUp($data)
	 */
	class EO_Site {
		/* @var \Bitrix\Iblock\SiteTable */
		static public $dataClass = '\Bitrix\Iblock\SiteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_Site_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockIdList()
	 * @method \string[] getSiteIdList()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_Site_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 * @method \Bitrix\Main\EO_Site[] getSiteList()
	 * @method \Bitrix\Iblock\EO_Site_Collection getSiteCollection()
	 * @method \Bitrix\Main\EO_Site_Collection fillSite()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_Site $object)
	 * @method bool has(\Bitrix\Iblock\EO_Site $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Site getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_Site[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_Site $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_Site_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_Site current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Site_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\SiteTable */
		static public $dataClass = '\Bitrix\Iblock\SiteTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_Site_Query query()
	 * @method static EO_Site_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Site_Result getById($id)
	 * @method static EO_Site_Result getList(array $parameters = array())
	 * @method static EO_Site_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_Site createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_Site_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_Site wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_Site_Collection wakeUpCollection($rows)
	 */
	class SiteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_Site_Result exec()
	 * @method \Bitrix\Iblock\EO_Site fetchObject()
	 * @method \Bitrix\Iblock\EO_Site_Collection fetchCollection()
	 */
	class EO_Site_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_Site fetchObject()
	 * @method \Bitrix\Iblock\EO_Site_Collection fetchCollection()
	 */
	class EO_Site_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_Site createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_Site_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_Site wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_Site_Collection wakeUpCollection($rows)
	 */
	class EO_Site_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\IblockMessageTable */
namespace Bitrix\Iblock {
	/**
	 * EO_IblockMessage
	 * @see \Bitrix\Iblock\IblockMessageTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getIblockId()
	 * @method \Bitrix\Iblock\EO_IblockMessage setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \string getMessageId()
	 * @method \Bitrix\Iblock\EO_IblockMessage setMessageId(\string|\Bitrix\Main\DB\SqlExpression $messageId)
	 * @method bool hasMessageId()
	 * @method bool isMessageIdFilled()
	 * @method bool isMessageIdChanged()
	 * @method \string getMessageText()
	 * @method \Bitrix\Iblock\EO_IblockMessage setMessageText(\string|\Bitrix\Main\DB\SqlExpression $messageText)
	 * @method bool hasMessageText()
	 * @method bool isMessageTextFilled()
	 * @method bool isMessageTextChanged()
	 * @method \string remindActualMessageText()
	 * @method \string requireMessageText()
	 * @method \Bitrix\Iblock\EO_IblockMessage resetMessageText()
	 * @method \Bitrix\Iblock\EO_IblockMessage unsetMessageText()
	 * @method \string fillMessageText()
	 * @method \Bitrix\Iblock\Iblock getIblock()
	 * @method \Bitrix\Iblock\Iblock remindActualIblock()
	 * @method \Bitrix\Iblock\Iblock requireIblock()
	 * @method \Bitrix\Iblock\EO_IblockMessage setIblock(\Bitrix\Iblock\Iblock $object)
	 * @method \Bitrix\Iblock\EO_IblockMessage resetIblock()
	 * @method \Bitrix\Iblock\EO_IblockMessage unsetIblock()
	 * @method bool hasIblock()
	 * @method bool isIblockFilled()
	 * @method bool isIblockChanged()
	 * @method \Bitrix\Iblock\Iblock fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockMessage set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_IblockMessage reset($fieldName)
	 * @method \Bitrix\Iblock\EO_IblockMessage unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_IblockMessage wakeUp($data)
	 */
	class EO_IblockMessage {
		/* @var \Bitrix\Iblock\IblockMessageTable */
		static public $dataClass = '\Bitrix\Iblock\IblockMessageTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_IblockMessage_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIblockIdList()
	 * @method \string[] getMessageIdList()
	 * @method \string[] getMessageTextList()
	 * @method \string[] fillMessageText()
	 * @method \Bitrix\Iblock\Iblock[] getIblockList()
	 * @method \Bitrix\Iblock\EO_IblockMessage_Collection getIblockCollection()
	 * @method \Bitrix\Iblock\EO_Iblock_Collection fillIblock()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_IblockMessage $object)
	 * @method bool has(\Bitrix\Iblock\EO_IblockMessage $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockMessage getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_IblockMessage[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_IblockMessage $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_IblockMessage_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_IblockMessage current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_IblockMessage_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\IblockMessageTable */
		static public $dataClass = '\Bitrix\Iblock\IblockMessageTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_IblockMessage_Query query()
	 * @method static EO_IblockMessage_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_IblockMessage_Result getById($id)
	 * @method static EO_IblockMessage_Result getList(array $parameters = array())
	 * @method static EO_IblockMessage_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_IblockMessage createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_IblockMessage_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_IblockMessage wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_IblockMessage_Collection wakeUpCollection($rows)
	 */
	class IblockMessageTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_IblockMessage_Result exec()
	 * @method \Bitrix\Iblock\EO_IblockMessage fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockMessage_Collection fetchCollection()
	 */
	class EO_IblockMessage_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockMessage fetchObject()
	 * @method \Bitrix\Iblock\EO_IblockMessage_Collection fetchCollection()
	 */
	class EO_IblockMessage_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_IblockMessage createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_IblockMessage_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_IblockMessage wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_IblockMessage_Collection wakeUpCollection($rows)
	 */
	class EO_IblockMessage_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Iblock\TypeLanguageTable */
namespace Bitrix\Iblock {
	/**
	 * EO_TypeLanguage
	 * @see \Bitrix\Iblock\TypeLanguageTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getIblockTypeId()
	 * @method \Bitrix\Iblock\EO_TypeLanguage setIblockTypeId(\string|\Bitrix\Main\DB\SqlExpression $iblockTypeId)
	 * @method bool hasIblockTypeId()
	 * @method bool isIblockTypeIdFilled()
	 * @method bool isIblockTypeIdChanged()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Iblock\EO_TypeLanguage setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage resetName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage unsetName()
	 * @method \string fillName()
	 * @method \string getSectionsName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage setSectionsName(\string|\Bitrix\Main\DB\SqlExpression $sectionsName)
	 * @method bool hasSectionsName()
	 * @method bool isSectionsNameFilled()
	 * @method bool isSectionsNameChanged()
	 * @method \string remindActualSectionsName()
	 * @method \string requireSectionsName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage resetSectionsName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage unsetSectionsName()
	 * @method \string fillSectionsName()
	 * @method \string getElementsName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage setElementsName(\string|\Bitrix\Main\DB\SqlExpression $elementsName)
	 * @method bool hasElementsName()
	 * @method bool isElementsNameFilled()
	 * @method bool isElementsNameChanged()
	 * @method \string remindActualElementsName()
	 * @method \string requireElementsName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage resetElementsName()
	 * @method \Bitrix\Iblock\EO_TypeLanguage unsetElementsName()
	 * @method \string fillElementsName()
	 * @method \Bitrix\Main\Localization\EO_Language getLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language remindActualLanguage()
	 * @method \Bitrix\Main\Localization\EO_Language requireLanguage()
	 * @method \Bitrix\Iblock\EO_TypeLanguage setLanguage(\Bitrix\Main\Localization\EO_Language $object)
	 * @method \Bitrix\Iblock\EO_TypeLanguage resetLanguage()
	 * @method \Bitrix\Iblock\EO_TypeLanguage unsetLanguage()
	 * @method bool hasLanguage()
	 * @method bool isLanguageFilled()
	 * @method bool isLanguageChanged()
	 * @method \Bitrix\Main\Localization\EO_Language fillLanguage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Iblock\EO_TypeLanguage set($fieldName, $value)
	 * @method \Bitrix\Iblock\EO_TypeLanguage reset($fieldName)
	 * @method \Bitrix\Iblock\EO_TypeLanguage unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Iblock\EO_TypeLanguage wakeUp($data)
	 */
	class EO_TypeLanguage {
		/* @var \Bitrix\Iblock\TypeLanguageTable */
		static public $dataClass = '\Bitrix\Iblock\TypeLanguageTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Iblock {
	/**
	 * EO_TypeLanguage_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getIblockTypeIdList()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSectionsNameList()
	 * @method \string[] fillSectionsName()
	 * @method \string[] getElementsNameList()
	 * @method \string[] fillElementsName()
	 * @method \Bitrix\Main\Localization\EO_Language[] getLanguageList()
	 * @method \Bitrix\Iblock\EO_TypeLanguage_Collection getLanguageCollection()
	 * @method \Bitrix\Main\Localization\EO_Language_Collection fillLanguage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Iblock\EO_TypeLanguage $object)
	 * @method bool has(\Bitrix\Iblock\EO_TypeLanguage $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_TypeLanguage getByPrimary($primary)
	 * @method \Bitrix\Iblock\EO_TypeLanguage[] getAll()
	 * @method bool remove(\Bitrix\Iblock\EO_TypeLanguage $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Iblock\EO_TypeLanguage_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Iblock\EO_TypeLanguage current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TypeLanguage_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Iblock\TypeLanguageTable */
		static public $dataClass = '\Bitrix\Iblock\TypeLanguageTable';
	}
}
namespace Bitrix\Iblock {
	/**
	 * @method static EO_TypeLanguage_Query query()
	 * @method static EO_TypeLanguage_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TypeLanguage_Result getById($id)
	 * @method static EO_TypeLanguage_Result getList(array $parameters = array())
	 * @method static EO_TypeLanguage_Entity getEntity()
	 * @method static \Bitrix\Iblock\EO_TypeLanguage createObject($setDefaultValues = true)
	 * @method static \Bitrix\Iblock\EO_TypeLanguage_Collection createCollection()
	 * @method static \Bitrix\Iblock\EO_TypeLanguage wakeUpObject($row)
	 * @method static \Bitrix\Iblock\EO_TypeLanguage_Collection wakeUpCollection($rows)
	 */
	class TypeLanguageTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * @method EO_TypeLanguage_Result exec()
	 * @method \Bitrix\Iblock\EO_TypeLanguage fetchObject()
	 * @method \Bitrix\Iblock\EO_TypeLanguage_Collection fetchCollection()
	 */
	class EO_TypeLanguage_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Iblock\EO_TypeLanguage fetchObject()
	 * @method \Bitrix\Iblock\EO_TypeLanguage_Collection fetchCollection()
	 */
	class EO_TypeLanguage_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Iblock\EO_TypeLanguage createObject($setDefaultValues = true)
	 * @method \Bitrix\Iblock\EO_TypeLanguage_Collection createCollection()
	 * @method \Bitrix\Iblock\EO_TypeLanguage wakeUpObject($row)
	 * @method \Bitrix\Iblock\EO_TypeLanguage_Collection wakeUpCollection($rows)
	 */
	class EO_TypeLanguage_Entity extends \Bitrix\Main\ORM\Entity {}
}